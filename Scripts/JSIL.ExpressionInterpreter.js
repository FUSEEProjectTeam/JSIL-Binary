/* Generated by JSIL v0.7.9 build 18232. See http://jsil.org/ for more information. */ 
(function () {
var $asm00 = $jsilcore;
var $asm01 = JSIL.GetAssembly("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
var $asm02 = JSIL.GetAssembly("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
var $asm03 = JSIL.GetAssembly("System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");
var $asm04 = JSIL.GetAssembly("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
var $asm05 = JSIL.GetAssembly("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
var $asm06 = JSIL.GetAssembly("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
var $asm07 = JSIL.GetAssembly("System.Data.SqlXml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
var $asm08 = JSIL.GetAssembly("JSIL.Meta, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
var $asm09 = JSIL.GetAssembly("System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Scripting");
JSIL.DeclareNamespace("Microsoft.Scripting.Ast");
/* class Microsoft.Scripting.Ast.Utils */ 

(function Utils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.System.Linq.Expressions.ConstantExpression)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Reflection.EventInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.System.TypeExtensions)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm04.System.Linq.Expressions.ConstantExpression))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.System.Linq.Expressions.DefaultExpression)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.ExpressionAccess)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.TypedLightLambdaExpression)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm04.System.Linq.Expressions.BinaryExpression)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.WeakReference)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.PropertyInfo")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.WeakReference"), [$asm01.TypeRef("System.Object")]))) ();
  };

  function Utils_Box (expression) {
    if ($T05().op_Equality(expression.get_Type(), $T06().__Type__)) {
      var i = $T08().Int32ToObjectMethod;
    } else if ($T05().op_Equality(expression.get_Type(), $T01().__Type__)) {
      i = $T08().BooleanToObjectMethod;
    } else {
      i = null;
    }
    return $T00().Convert(expression, $T02().__Type__, i);
  };

  function Utils_Constant$00 (value, type) {
    return $T00().Constant(value, type);
  };

  function Utils_Constant$01 (value) {
    var res = null;
    if (value === null) {
      var result = $thisType.NullLiteral;
    } else if ($T05().$Is(value)) {
      result = $T00().Constant(value, $T05().__Type__);
    } else if ($T09().$Is(value)) {
      result = $T00().Constant(value, $T09().__Type__);
    } else if ($T0A().$Is(value)) {
      result = $T00().Constant(value, $T0A().__Type__);
    } else if ($T0B().$Is(value)) {
      result = $T00().Constant(value, $T0B().__Type__);
    } else if ($T07().$Is(value)) {
      result = $T00().Constant(value, $T07().__Type__);
    } else if ($T0C().$Is(value)) {
      result = $T00().Constant(value, $T0C().__Type__);
    } else {
      var t = JSIL.GetType(value);
      if (!($T0D().GetTypeInfo(t)).get_IsEnum()) {
        var typeCode = $T0F().GetTypeCode(t);
        if (typeCode === $T0E().Boolean) {
          result = (
            $T01().$Cast(value)
               ? $thisType.TrueLiteral
               : $thisType.FalseLiteral)
          ;
          return result;
        }
        if (typeCode !== $T0E().Int32) {
          if (typeCode === $T0E().String) {
            if ($T03().IsNullOrEmpty($T03().$Cast(value))) {
              result = $thisType.EmptyStringLiteral;
              return result;
            }
          }
        } else {
          var x = $T06().$Cast(value);
          var cacheIndex = ((x + 2) | 0);
          if (!((cacheIndex < 0) || (cacheIndex >= ($thisType.IntCache.length | 0)))) {
            if ((res = $thisType.IntCache[cacheIndex]) === null) {
              res = $thisType.IntCache[cacheIndex] = $thisType.Constant(x, $T06().__Type__);
            }
            result = res;
            return result;
          }
        }
      }
      result = $T00().Constant(value);
    }
    return result;
  };

  function Utils_Convert (expression, type) {
    $T11().RequiresNotNull(expression, "expression");
    if ($T05().op_Equality(expression.get_Type(), type)) {
      var result = expression;
    } else if ($T05().op_Equality(expression.get_Type(), $T12().__Type__)) {
      result = $S00().CallStatic($T00(), "Block", null, expression, $thisType.Default(type));
    } else if ($T05().op_Equality(type, $T12().__Type__)) {
      result = $thisType.Void(expression);
    } else if ($T05().op_Equality(type, $T02().__Type__)) {
      result = $thisType.Box(expression);
    } else {
      result = $T00().Convert(expression, type);
    }
    return result;
  };

  function Utils_CreateArray$b1 (T, array) {
    var init = JSIL.Array.New($T00(), array.length);

    for (var i = 0; i < (init.length | 0); i = ((i + 1) | 0)) {
      init[i] = $thisType.Constant(JSIL.CloneParameter(T, array[i]));
    }
    return $S01().CallStatic($T00(), "NewArrayInit", null, T, init);
  };

  function Utils_Default (type) {
    if ($T05().op_Equality(type, $T12().__Type__)) {
      var result = $thisType.Empty();
    } else {
      result = $T00().Default(type);
    }
    return result;
  };

  function Utils_Empty () {
    return $thisType.VoidInstance;
  };

  function Utils_GetLValueAccess (type) {
    if ($thisType.IsReadWriteAssignment(type)) {
      var result = $T16().ReadWrite;
    } else if ($thisType.IsWriteOnlyAssignment(type)) {
      result = $T16().Write;
    } else {
      result = $T16().Read;
    }
    return result;
  };

  function Utils_IsAssignment (type) {
    return ($thisType.IsWriteOnlyAssignment(type) || $thisType.IsReadWriteAssignment(type));
  };

  function Utils_IsLValue (type) {
    return ((type === $T15().MemberAccess) || 
      (type === $T15().Parameter) || (type === $T15().Index));
  };

  function Utils_IsReadWriteAssignment (type) {
    switch (type.valueOf()) {
      case 63: 
      case 64: 
      case 65: 
      case 66: 
      case 67: 
      case 68: 
      case 69: 
      case 70: 
      case 71: 
      case 72: 
      case 73: 
      case 74: 
      case 75: 
      case 76: 
      case 77: 
      case 78: 
      case 79: 
      case 80: 
        var result = true;
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function Utils_IsWriteOnlyAssignment (type) {
    return (type === $T15().Assign);
  };

  function Utils_LightLambda$b1 (T, retType, body, name, args) {
    return new ($asm00.Microsoft.Scripting.Ast.LightExpression$b1.Of(T)) (retType, body, name, args);
  };

  function Utils_LightLambda (retType, delegateType, body, name, args) {
    return new ($T18())(retType, delegateType, body, name, args);
  };

  function Utils_Update (expression, left, right) {
    return expression.Update(left, expression.get_Conversion(), right);
  };

  function Utils_Void (expression) {
    $T11().RequiresNotNull(expression, "expression");
    if ($T05().op_Equality(expression.get_Type(), $T12().__Type__)) {
      var result = expression;
    } else {
      result = $S00().CallStatic($T00(), "Block", null, expression, $thisType.Empty());
    }
    return result;
  };

  function Utils_WeakConstant (value) {
    return $S02().CallStatic($T00(), "Property", null, 
      $thisType.Constant($S03().Construct(value)), 
      $T0F().GetDeclaredProperty($T1A().__Type__, "Target")
    );
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Ast.Utils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Box", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      Utils_Box
    );

    $.Method({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm01.TypeRef("System.Type")]), 
      Utils_Constant$00
    );

    $.Method({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$.Object]), 
      Utils_Constant$01
    );

    $.Method({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Type")]), 
      Utils_Convert
    );

    $.Method({Static:true , Public:false}, "CreateArray", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      Utils_CreateArray$b1
    );

    $.Method({Static:true , Public:true }, "Default", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.DefaultExpression"), [$asm01.TypeRef("System.Type")]), 
      Utils_Default
    );

    $.Method({Static:true , Public:true }, "Empty", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.DefaultExpression")), 
      Utils_Empty
    );

    $.Method({Static:true , Public:true }, "GetLValueAccess", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Ast.ExpressionAccess"), [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")]), 
      Utils_GetLValueAccess
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsAssignment", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")]), 
      Utils_IsAssignment
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsLValue", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")]), 
      Utils_IsLValue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsReadWriteAssignment", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")]), 
      Utils_IsReadWriteAssignment
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsWriteOnlyAssignment", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")]), 
      Utils_IsWriteOnlyAssignment
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "LightLambda", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Ast.LightExpression`1", ["!!0"]), [
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $.String, $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["T"]), 
      Utils_LightLambda$b1
    );

    $.Method({Static:true , Public:true }, "LightLambda", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ]), 
      Utils_LightLambda
    );

    $.Method({Static:true , Public:true }, "Update", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression")
        ]), 
      Utils_Update
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "Void", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      Utils_Void
    );

    $.Method({Static:true , Public:true }, "WeakConstant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Object]), 
      Utils_WeakConstant
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "TrueLiteral", $asm04.TypeRef("System.Linq.Expressions.ConstantExpression")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FalseLiteral", $asm04.TypeRef("System.Linq.Expressions.ConstantExpression")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NullLiteral", $asm04.TypeRef("System.Linq.Expressions.ConstantExpression")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyStringLiteral", $asm04.TypeRef("System.Linq.Expressions.ConstantExpression")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IntCache", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ConstantExpression")]), function ($pi) {
        return JSIL.Array.New($asm04.System.Linq.Expressions.ConstantExpression, 100);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "VoidInstance", $asm04.TypeRef("System.Linq.Expressions.DefaultExpression")); 
    function Utils__cctor () {
      $thisType.TrueLiteral = $T00().Constant(true, $T01().__Type__);
      $thisType.FalseLiteral = $T00().Constant(false, $T01().__Type__);
      $thisType.NullLiteral = $T00().Constant(null, $T02().__Type__);
      $thisType.EmptyStringLiteral = $T00().Constant($T03().Empty, $T03().__Type__);
      $thisType.IntCache = JSIL.Array.New($T04(), 100);
      $thisType.VoidInstance = $T00().Empty();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Utils__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Ast.LightLambdaExpression */ 

(function LightLambdaExpression$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), null))) ();
  };

  function LightLambdaExpression__ctor (retType, body, name, args) {
    $T01().prototype._ctor.call(this);
    this._body = body;
    this._name = name;
    this._args = args;
    this._retType = retType;
  };

  function LightLambdaExpression_Compile$00 () {
    return $S00().CallVirtual("Compile", null, this, -1);
  };

  function LightLambdaExpression_Compile$01 (compilationThreshold) {
    return ($S01().CallVirtual("CompileTop", null, $S02().Construct(compilationThreshold), this)).CreateDelegate();
  };

  function LightLambdaExpression_get_Body () {
    return this._body;
  };

  function LightLambdaExpression_get_CanReduce () {
    return true;
  };

  function LightLambdaExpression_get_Name () {
    return this._name;
  };

  function LightLambdaExpression_get_NodeType () {
    return $T07().Extension;
  };

  function LightLambdaExpression_get_Parameters () {
    return this._args;
  };

  function LightLambdaExpression_get_ReturnType () {
    return this._retType;
  };

  function LightLambdaExpression_Reduce () {
    return this.ReduceToLambdaWorker();
  };

  function LightLambdaExpression_ReduceToLambdaWorker () {
    throw $S03().Construct();
  };

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "Microsoft.Scripting.Ast.LightLambdaExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $.String, $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ]), 
      LightLambdaExpression__ctor
    );

    $.Method({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Delegate")), 
      LightLambdaExpression_Compile$00
    );

    $.Method({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Int32]), 
      LightLambdaExpression_Compile$01
    );

    $.Method({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightLambdaExpression_get_Body
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean), 
      LightLambdaExpression_get_CanReduce
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      LightLambdaExpression_get_Name
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.ExpressionType")), 
      LightLambdaExpression_get_NodeType
    );

    $.Method({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])), 
      LightLambdaExpression_get_Parameters
    );

    $.Method({Static:false, Public:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      LightLambdaExpression_get_ReturnType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightLambdaExpression_Reduce
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReduceToLambdaWorker", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.LambdaExpression")), 
      LightLambdaExpression_ReduceToLambdaWorker
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_args", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Property({Static:false, Public:true }, "Body", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Parameters", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm04.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "ReturnType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Ast.TypedLightLambdaExpression */ 

(function TypedLightLambdaExpression$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.LightLambdaExpression)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ]))) ();
  };

  function TypedLightLambdaExpression__ctor (retType, delegateType, body, name, args) {
    $T04().prototype._ctor.call(this, retType, body, name, args);
    this._delegateType = delegateType;
  };

  function TypedLightLambdaExpression_get_Type () {
    return this._delegateType;
  };

  function TypedLightLambdaExpression_ReduceToLambdaWorker () {
    return $S00().CallStatic($T01(), "Lambda", null, 
      this._delegateType, 
      this.get_Body(), 
      this.get_Name(), 
      this.get_Parameters()
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression"), 
      Name: "Microsoft.Scripting.Ast.TypedLightLambdaExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ]), 
      TypedLightLambdaExpression__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      TypedLightLambdaExpression_get_Type
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReduceToLambdaWorker", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.LambdaExpression")), 
      TypedLightLambdaExpression_ReduceToLambdaWorker
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Ast.LightExpression`1 */ 

(function LightExpression$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.LightLambdaExpression)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], ["TDelegate"]))) ();
  };

  function LightExpression$b1__ctor (retType, body, name, args) {
    $T04().prototype._ctor.call(this, retType, body, name, args);
  };

  function LightExpression$b1_Compile$00 () {
    var $s00 = new JSIL.MethodSignature($thisType.T.get(this), [$asm01.System.Int32]);
    return $s00.Call($thisType.Of($thisType.T.get(this)).prototype, "Compile", null, this, -1);
  };

  function LightExpression$b1_Compile$01 (compilationThreshold) {
    return $thisType.T.get(this).$Cast(($S00().CallVirtual("CompileTop", null, $S01().Construct(compilationThreshold), this)).CreateDelegate());
  };

  function LightExpression$b1_get_Type () {
    return $thisType.T.get(this);
  };

  function LightExpression$b1_ReduceToLambda () {
    return $S02().CallStatic($T01(), "Lambda$b1", [$thisType.T.get(this)], 
      this.get_Body(), 
      this.get_Name(), 
      this.get_Parameters()
    );
  };

  function LightExpression$b1_ReduceToLambdaWorker () {
    return $thisType.Of($thisType.T.get(this)).prototype.ReduceToLambda.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression"), 
      Name: "Microsoft.Scripting.Ast.LightExpression`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $.String, $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ]), 
      LightExpression$b1__ctor
    );

    $.Method({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      LightExpression$b1_Compile$00
    );

    $.Method({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32]), 
      LightExpression$b1_Compile$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      LightExpression$b1_get_Type
    );

    $.Method({Static:false, Public:true }, "ReduceToLambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("T")]), null), 
      LightExpression$b1_ReduceToLambda
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ReduceToLambdaWorker", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.LambdaExpression")), 
      LightExpression$b1_ReduceToLambdaWorker
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Scripting.Ast.ExpressionAccess */ 

JSIL.MakeEnum(
  "Microsoft.Scripting.Ast.ExpressionAccess", true, {
    None: 0, 
    Read: 1, 
    Write: 2, 
    ReadWrite: 3
  }, true
);

/* class Microsoft.Scripting.DebugOptions */ 

(function DebugOptions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };

  function DebugOptions_get_TrackPerformance () {
    return $thisType._trackPerformance;
  };

  function DebugOptions_ReadDebugOption (name) {
    return false;
  };

  function DebugOptions_ReadDebugString (name) {
    return null;
  };

  function DebugOptions_ReadOption (name) {
    var envVar = $thisType.ReadString(name);
    return ((envVar !== null) && (envVar.toLowerCase() == "true"));
  };

  function DebugOptions_ReadString (name) {
    return null;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.DebugOptions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "get_TrackPerformance", 
      JSIL.MethodSignature.Return($.Boolean), 
      DebugOptions_get_TrackPerformance
    );

    $.Method({Static:true , Public:false}, "ReadDebugOption", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      DebugOptions_ReadDebugOption
    );

    $.Method({Static:true , Public:false}, "ReadDebugString", 
      new JSIL.MethodSignature($.String, [$.String]), 
      DebugOptions_ReadDebugString
    );

    $.Method({Static:true , Public:false}, "ReadOption", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      DebugOptions_ReadOption
    );

    $.Method({Static:true , Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String]), 
      DebugOptions_ReadString
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_trackPerformance", $.Boolean); 
    function DebugOptions__cctor () {
      $thisType._trackPerformance = $thisType.ReadDebugOption("TrackPerformance");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DebugOptions__cctor
    );

    $.Property({Static:true , Public:false}, "TrackPerformance", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Scripting.Generation");
/* delegate Microsoft.Scripting.Generation.ActionRef`2 */ 

JSIL.MakeDelegate("Microsoft.Scripting.Generation.ActionRef`2", true, ["T0", "T1"], new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T0", "Microsoft.Scripting.Generation.ActionRef`2")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T1", "Microsoft.Scripting.Generation.ActionRef`2")])]));

/* class Microsoft.Scripting.Generation.CompilerHelpers */ 

(function CompilerHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.ConstructorInfo))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.CompilerHelpers_$lFilterConstructorsToPublicAndProtected$gd__7)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MemberInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.CompilerHelpers_$lFilterNonVisibleMembersIterator$gd__0)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.MethodBase))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.ArgIterator)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Reflection.MethodBase))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionUtils)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MemberInfo))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Reflection.Missing)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Scripting.Error)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.System.TypeExtensions)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Nullable$b1)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.Utils)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.DynamicNull)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm04.System.Linq.Expressions.LambdaExpression)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.DelegateHelpers)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.CallSite$b1)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm01.System.Reflection.MemberTypes)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm01.System.RuntimeMethodHandle)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm01.System.RuntimeFieldHandle)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm01.System.RuntimeTypeHandle)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm01.System.Reflection.Module)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm04.System.Linq.Expressions.DynamicExpression)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm04.System.Runtime.CompilerServices.CallSite)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ArrayUtils)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm00.System.Reflection.RuntimeReflectionExtensions)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type))) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm01.System.Reflection.InterfaceMapping)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm01.System.Reflection.EventInfo)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.MethodBase")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Reflection.MethodBase")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Int32")])]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler"), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.FieldInfo")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), ["!!0", $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.MethodBase")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MemberInfo).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MemberInfo).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm04.System.Linq.Expressions.Expression).get_Count)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm04.System.Linq.Expressions.Expression).get_Item)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo).GetEnumerator)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo).get_Current)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type).GetEnumerator)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type).get_Current)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.System.Collections.IList.get_Item)) ();
  };

  function CompilerHelpers_CanOptimizeMethod (method) {
    return (!(method.get_ContainsGenericParameters() || 
        $S00().CallStatic($thisType, "IsProtected", null, method) || 
        method.get_IsPrivate()) && $T01().IsVisible(method.get_DeclaringType()));
  };

  function CompilerHelpers_Compile$b1 (T, lambda, emitDebugSymbols) {
    var $s00 = new JSIL.MethodSignature(T, null);
    return $s00.CallVirtual("Compile", null, lambda);
  };

  function CompilerHelpers_FilterConstructorsToPublicAndProtected (ctors) {
    var $lFilterConstructorsToPublicAndProtected$gd__ = new ($T06())(-2);
    $lFilterConstructorsToPublicAndProtected$gd__.$l$g3__ctors = ctors;
    return $lFilterConstructorsToPublicAndProtected$gd__;
  };

  function CompilerHelpers_FilterNonVisibleMembers (targetType, members) {
    if ($T01().IsVisible(targetType)) {
      var result = members;
    } else {
      result = $thisType.FilterNonVisibleMembersIterator(targetType, members);
    }
    return result;
  };

  function CompilerHelpers_FilterNonVisibleMembersIterator (targetType, members) {
    var $lFilterNonVisibleMembersIterator$gd__ = new ($T08())(-2);
    $lFilterNonVisibleMembersIterator$gd__.$l$g3__targetType = targetType;
    $lFilterNonVisibleMembersIterator$gd__.$l$g3__members = members;
    return $lFilterNonVisibleMembersIterator$gd__;
  };

  function CompilerHelpers_GetArrayCtor (t) {
    return ($S01().CallStatic($T0A(), "Single$b1", [$asm01.System.Reflection.MethodInfo], $T01().GetDeclaredMethods($T0B().__Type__, "CreateArray"))).MakeGenericMethod(JSIL.Array.New($T03(), [t.GetElementType()]));
  };

  function CompilerHelpers_GetConstructors$00 (t, privateBinding) {
    return $thisType.GetConstructors(t, privateBinding, false);
  };

  function CompilerHelpers_GetConstructors$01 (t, privateBinding, includeProtected) {
    if (t.get_IsArray()) {
      var result2 = JSIL.Array.New($T00(), [$thisType.GetArrayCtor(t)]);
    } else {
      var bf = $T0D().$Flags("Instance", "Public");
      if (!(!privateBinding && !includeProtected)) {
        bf = $T0D().$Cast(bf | $T0D().NonPublic);
      }
      var ctors = $S02().CallStatic($T01(), "WithBindingFlags", null, $T01().GetDeclaredConstructors(t), bf);
      if (!(privateBinding || !includeProtected)) {
        ctors = $thisType.FilterConstructorsToPublicAndProtected(ctors);
      }
      if (!(!$T01().IsValueType(t) || !$T03().op_Inequality(t, $T0E().__Type__))) {
        var result = $S03().Construct();
        result.Add($thisType.GetStructDefaultCtor(t));
        $T0F().prototype.AddRange.call(result, $T11().Cast$b2($T10(), $T00())(ctors));
        result2 = $T0F().prototype.ToArray.call(result);
      } else {
        result2 = $T0C().$Cast($T0A().ToArray$b1($T10())(ctors));
      }
    }
    return result2;
  };

  function CompilerHelpers_GetConverter (type, fromType, toType, opMethodName) {
    var enumerator = $IM00().Call($S04().CallStatic($T01(), "WithBindingFlags", null, $T01().GetInheritedMembers(type, opMethodName, false), $T0D().$Flags("Public", "Static")), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var mi = $T09().$Cast($IM02().Call(enumerator, null));
        if (!((!$T03().op_Equality(mi.get_DeclaringType(), null) && 
              !$T01().IsVisible(mi.get_DeclaringType())) || 
            !mi.get_IsPublic() || 
            !$T03().op_Equality(mi.get_ReturnType(), toType) || !$S05().CallVirtual("IsAssignableFrom", null, (mi.GetParameters()[0]).get_ParameterType(), fromType))) {
          var result = mi;
          return result;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    result = null;
    return result;
  };

  function CompilerHelpers_GetExplicitConverter (fromType, toType) {
    return JSIL.Coalesce($thisType.GetConverter(fromType, fromType, toType, "op_Explicit"), $thisType.GetConverter(toType, fromType, toType, "op_Explicit"));
  };

  function CompilerHelpers_GetExpressionTypes (expressions) {
    $T18().RequiresNotNull(expressions, "expressions");
    var res = JSIL.Array.New($T03(), expressions.length);

    for (var i = 0; i < (res.length | 0); i = ((i + 1) | 0)) {
      $T18().RequiresNotNull(expressions[i], "expressions[i]");
      res[i] = (expressions[i]).get_Type();
    }
    return res;
  };

  function CompilerHelpers_GetImplicitConverter (fromType, toType) {
    return JSIL.Coalesce($thisType.GetConverter(fromType, fromType, toType, "op_Implicit"), $thisType.GetConverter(toType, fromType, toType, "op_Implicit"));
  };

  function CompilerHelpers_GetMissingValue (type) {
    $T18().RequiresNotNull(type, "type");
    if (type.get_IsByRef()) {
      type = type.GetElementType();
    }
    if ($T01().IsEnum(type)) {
      var result = $S06().CallStatic($T1D(), "CreateInstance", null, type);
    } else {
      switch (($T01().GetTypeCode(type)).valueOf()) {
        case 0: 
        case 2: 
        case 18: 
          result = null;
          break;

        default: 
        case 1: 
        case 17: 
          if (!(!$T01().IsSealed(type) || !$T01().IsValueType(type))) {
            result = $S06().CallStatic($T1D(), "CreateInstance", null, type);
          } else if ($T03().op_Equality(type, $T1C().__Type__)) {
            result = $T1E().Value;
          } else {
            if ($T01().IsValueType(type)) {
              throw $T1F().CantCreateDefaultTypeFor(type);
            }
            result = null;
          }
          break;

        case 3: 
          result = false;
          break;

        case 4: 
          result = "\0";
          break;

        case 5: 
          result = 0;
          break;

        case 6: 
          result = 0;
          break;

        case 7: 
          result = 0;
          break;

        case 8: 
          result = 0;
          break;

        case 9: 
          result = 0;
          break;

        case 10: 
          result = 0;
          break;

        case 11: 
          result = $T20().Create(0, 0, 0);
          break;

        case 12: 
          result = $T21().Create(0, 0, 0);
          break;

        case 13: 
          result = 0;
          break;

        case 14: 
          result = 0;
          break;

        case 15: 
          result = 0;
          break;

        case 16: 
          result = $T22().MinValue.MemberwiseClone();
          break;

      }
    }
    return result;
  };

  function CompilerHelpers_GetSiteTypes (arguments, returnType) {
    var count = ($IM04().Call(arguments, null) | 0);
    var ret = JSIL.Array.New($T03(), ((count + 1) | 0));

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      ret[i] = ($IM05().Call(arguments, null, i)).get_Type();
    }
    ret[count] = returnType;
    return ret;
  };

  function CompilerHelpers_GetStructDefaultCtor (t) {
    return ($S01().CallStatic($T0A(), "Single$b1", [$asm01.System.Reflection.MethodInfo], $T01().GetDeclaredMethods($T0B().__Type__, "CreateInstance"))).MakeGenericMethod(JSIL.Array.New($T03(), [t]));
  };

  function CompilerHelpers_GetTryConvertReturnValue (type) {
    var info = $T25().GetTypeInfo(type);
    if (!(!(info.get_IsInterface() || 
          info.get_IsClass()) && (!info.get_IsGenericType() || 
          !$T03().op_Equality(type.GetGenericTypeDefinition(), $T26().__Type__)))) {
      var res = $T27().Constant(null, type);
    } else {
      res = $T27().Constant($S06().CallStatic($T1D(), "CreateInstance", null, type));
    }
    return res;
  };

  function CompilerHelpers_GetType$02 (obj) {
    if (obj === null) {
      var result = $T28().__Type__;
    } else {
      result = JSIL.GetType(obj);
    }
    return result;
  };

  function CompilerHelpers_GetTypes (args) {
    var types = JSIL.Array.New($T03(), args.length);

    for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
      types[i] = $thisType.GetType(args[i]);
    }
    return types;
  };

  function CompilerHelpers_GetUniqueMethodName () {
    return JSIL.ConcatString("lambda_method$", $S07().CallStatic($T2A(), "Increment", null, /* ref */ new JSIL.MemberReference($thisType, "_Counter")));
  };

  function CompilerHelpers_GetVisibleType$03 (value) {
    return $S08().CallStatic($thisType, "GetVisibleType", null, $thisType.GetType(value));
  };

  function CompilerHelpers_GetVisibleType$04 (t) {

    for (; !$T01().IsVisible(t); t = $T01().GetBaseType(t)) {
    }
    return t;
  };

  function CompilerHelpers_HasTypeConverter (fromType, toType) {
    return false;
  };

  function CompilerHelpers_IsComparisonOperator (op) {
    switch (op.valueOf()) {
      case 13: 
        var result = true;
        return result;

      case 14: 
      case 17: 
      case 18: 
      case 19: 
        break;

      case 15: 
        result = true;
        return result;

      case 16: 
        result = true;
        return result;

      case 20: 
        result = true;
        return result;

      case 21: 
        result = true;
        return result;

      default: 
        if (op === $T2B().NotEqual) {
          result = true;
          return result;
        }
        break;

    }
    result = false;
    return result;
  };

  function CompilerHelpers_IsConstructor (mb) {
    if (mb.get_IsConstructor()) {
      var result = true;
    } else {
      if (mb.get_IsGenericMethod()) {
        var mi = $T09().$As(mb);
        if ($T09().op_Equality($thisType._CreateInstanceMethod, null)) {
          $T2A().CompareExchange$b1($T09())(/* ref */ new JSIL.MemberReference($thisType, "_CreateInstanceMethod"), $T0B().__Type__.GetMethod("CreateInstance"), null);
        }
        if ($T09().op_Equality(mi.GetGenericMethodDefinition(), $thisType._CreateInstanceMethod)) {
          result = true;
          return result;
        }
      }
      result = false;
    }
    return result;
  };

  function CompilerHelpers_IsProtected$05 (info) {
    return (info.get_IsFamily() || info.get_IsFamilyOrAssembly());
  };

  function CompilerHelpers_IsProtected$06 (info) {
    return (info.get_IsFamily() || info.get_IsFamilyOrAssembly());
  };

  function CompilerHelpers_IsProtected$07 (type) {
    return (($T25().GetTypeInfo(type)).get_IsNestedFamily() || ($T25().GetTypeInfo(type)).get_IsNestedFamORAssem());
  };

  function CompilerHelpers_IsStatic (mi) {
    return (mi.get_IsConstructor() || mi.get_IsStatic());
  };

  function CompilerHelpers_IsStrongBox$08 (target) {
    return $S09().CallStatic($thisType, "IsStrongBox", null, $thisType.GetType(target));
  };

  function CompilerHelpers_IsStrongBox$09 (t) {
    return ($T01().IsGenericType(t) && $T03().op_Equality(t.GetGenericTypeDefinition(), $T2D().__Type__));
  };

  function CompilerHelpers_IsVisible$0A (info) {
    return (info.get_IsPublic() && ($T03().op_Equality(info.get_DeclaringType(), null) || 
        $T01().IsVisible(info.get_DeclaringType())));
  };

  function CompilerHelpers_IsVisible$0B (info) {
    return (info.get_IsPublic() && ($T03().op_Equality(info.get_DeclaringType(), null) || 
        $T01().IsVisible(info.get_DeclaringType())));
  };

  function CompilerHelpers_LightCompile$0C (lambda) {
    return ($S0A().CallVirtual("CompileTop", null, $S0B().Construct(-1), lambda)).CreateDelegate();
  };

  function CompilerHelpers_LightCompile$0D (lambda, compilationThreshold) {
    return ($S0A().CallVirtual("CompileTop", null, $S0B().Construct(compilationThreshold), lambda)).CreateDelegate();
  };

  function CompilerHelpers_LightCompile$b1$0E (T, lambda) {
    return T.$Cast($thisType.LightCompile(lambda));
  };

  function CompilerHelpers_LightCompile$b1$0F (T, lambda, compilationThreshold) {
    return T.$Cast($thisType.LightCompile(lambda, compilationThreshold));
  };

  function CompilerHelpers_MakeCallSignatureForCallableObject (t) {
    var res = $S03().Construct();
    var enumerator = $IM06().Call($T01().GetInheritedMethods(t, "Call", false), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var method = $IM07().Call(enumerator, null);
        if (method.get_IsSpecialName()) {
          res.Add(method);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    return $T0F().prototype.ToArray.call(res);
  };

  function CompilerHelpers_MakeCallSiteDelegateType (types) {
    return $T33().MakeDelegate(types);
  };

  function CompilerHelpers_MakeCallSiteType (types) {
    return $T34().__Type__.MakeGenericType(JSIL.Array.New($T03(), [$T33().MakeDelegate(types)]));
  };

  function CompilerHelpers_MakeRepeatedArray$b1 (T, item, count) {
    var ret = JSIL.Array.New(T, count);

    for (var i = 0; i < (count | 0); i = ((i + 1) | 0)) {
      ret[i] = item;
    }
    return ret;
  };

  function CompilerHelpers_MemberEquals (self, other) {
    if ($T02().op_Equality(self, null) !== $T02().op_Equality(other, null)) {
      var result = false;
    } else if ($T02().op_Equality(self, null)) {
      result = true;
    } else if (self.get_MemberType() !== other.get_MemberType()) {
      result = false;
    } else {
      var memberType = self.get_MemberType();
      if (memberType <= $T35().Method) {
        switch (memberType.valueOf()) {
          case 1: 
            result = (($T10().$Cast(self)).get_MethodHandle().MemberwiseClone()).Equals(($T10().$Cast(other)).get_MethodHandle().MemberwiseClone());
            return result;

          case 2: 
          case 3: 
            break;

          case 4: 
            result = (($T2C().$Cast(self)).get_FieldHandle().MemberwiseClone()).Equals(($T2C().$Cast(other)).get_FieldHandle().MemberwiseClone());
            return result;

          default: 
            if (memberType === $T35().Method) {
              result = (($T09().$Cast(self)).get_MethodHandle().MemberwiseClone()).Equals(($T09().$Cast(other)).get_MethodHandle().MemberwiseClone());
              return result;
            }
            break;

        }
      } else if (memberType !== $T35().Property) {
        if ((memberType === $T35().TypeInfo) || (memberType === $T35().NestedType)) {
          result = (($T03().$Cast(self)).get_TypeHandle().MemberwiseClone()).Equals(($T03().$Cast(other)).get_TypeHandle().MemberwiseClone());
          return result;
        }
      }
      result = $T39().op_Equality(
        self.get_Module(), 
        other.get_Module()
      ) && 
      ((self.get_MetadataToken() | 0) === (other.get_MetadataToken() | 0));
    }
    return result;
  };

  function CompilerHelpers_Reduce (node) {
    var siteConstant = $T27().Constant($T3B().Create(
        node.get_DelegateType(), 
        node.get_Binder()
      ));
    var site = $T1B().Variable(siteConstant.get_Type(), "$site");
    return $S0C().CallStatic($T1B(), "Block", null, JSIL.Array.New($T3C(), [site]), JSIL.Array.New($T1B(), [$S0D().CallStatic($T1B(), "Call", null, 
          $S0E().CallStatic($T1B(), "Field", null, 
            $T1B().Assign(site, siteConstant), 
            $T01().GetDeclaredField(siteConstant.get_Type(), "Target")
          ), 
          (node.get_DelegateType()).GetMethod("Invoke"), 
          $S0F().CallStatic($T3D(), "Insert$b1", [$asm04.System.Linq.Expressions.Expression], site, node.get_Arguments())
        )]));
  };

  function CompilerHelpers_TryApplyTypeConverter (value, toType, /* ref */ result) {
    result.set(value);
    return false;
  };

  function CompilerHelpers_TryGetCallableMethod (targetType, method) {
    if (!(!$T03().op_Equality(method.get_DeclaringType(), null) && !$T01().IsVisible(method.get_DeclaringType()))) {
      var result = method;
    } else {
      var baseMethod = $T3E().GetRuntimeBaseDefinition(method);
      if (!(!$T01().IsVisible(baseMethod.get_DeclaringType()) && !$T01().IsInterface(baseMethod.get_DeclaringType()))) {
        if (baseMethod.get_IsGenericMethodDefinition()) {
          baseMethod = baseMethod.MakeGenericMethod(method.GetGenericArguments());
        }
        result = baseMethod;
      } else {
        var enumerator = $IM08().Call($T01().GetImplementedInterfaces(targetType), null);
        try {

          while ($IM01().Call(enumerator, null)) {
            var iface = $IM09().Call(enumerator, null);
            if ($S10().CallStatic($T01(), "IsPublic", null, iface)) {
              var mapping = targetType.GetInterfaceMap(iface).MemberwiseClone();

              for (var i = 0; i < (mapping.TargetMethods.length | 0); i = ((i + 1) | 0)) {
                var targetMethod = mapping.TargetMethods[i];
                if (!(!$T09().op_Inequality(targetMethod, null) || !$T36().op_Equality(
                      targetMethod.get_MethodHandle().MemberwiseClone(), 
                      method.get_MethodHandle().MemberwiseClone()
                    ))) {
                  result = mapping.InterfaceMethods[i];
                  return result;
                }
              }
            }
          }
        } finally {
          if (enumerator !== null) {
            $IM03().Call(enumerator, null);
          }
        }
        result = method;
      }
    }
    return result;
  };

  function CompilerHelpers_TryGetVisibleMember (targetType, member) {
    var method = null, property = null, evnt = null, arg_C7_1 = null;
    var visible = null;
    if ($T09().op_Inequality(method = $T09().$As(member), null)) {
      var mi = $thisType.TryGetCallableMethod(targetType, method);
      if ($S11().CallStatic($thisType, "IsVisible", null, mi)) {
        visible = mi;
      }
    } else if ($T43().op_Inequality(property = $T43().$As(member), null)) {
      mi = $thisType.TryGetCallableMethod(targetType, JSIL.Coalesce(property.GetGetMethod(), property.GetSetMethod()));
      if ($S11().CallStatic($thisType, "IsVisible", null, mi)) {
        visible = $T01().GetDeclaredProperty(
          mi.get_DeclaringType(), 
          property.get_Name()
        );
      }
    } else if ($T44().op_Inequality(evnt = $T44().$As(member), null)) {
      if ((arg_C7_1 = evnt.GetAddMethod()) === null) {
        arg_C7_1 = JSIL.Coalesce(evnt.GetRemoveMethod(), evnt.GetRaiseMethod());
      }
      mi = $thisType.TryGetCallableMethod(targetType, arg_C7_1);
      if ($S11().CallStatic($thisType, "IsVisible", null, mi)) {
        visible = $T01().GetDeclaredEvent(
          mi.get_DeclaringType(), 
          evnt.get_Name()
        );
      }
    }
    return visible;
  };

  function CompilerHelpers_TryImplicitConversion (value, to, /* ref */ result) {
    if ($thisType.TryImplicitConvert(value, to, $S12().CallStatic($T01(), "WithBindingFlags", null, $T01().GetInheritedMethods(to, "op_Implicit", false), $T0D().$Flags("Public", "Static")), /* ref */ result)) {
      var result2 = true;
    } else {

      for (var curType = $thisType.GetType(value); !$thisType.TryImplicitConvert(value, to, $S12().CallStatic($T01(), "WithBindingFlags", null, $T01().GetInheritedMethods(curType, "op_Implicit", false), $T0D().$Flags("Public", "Static")), /* ref */ result); ) {
        curType = $T01().GetBaseType(curType);
        if (!$T03().op_Inequality(curType, null)) {
          result2 = false;
          return result2;
        }
      }
      result2 = true;
    }
    return result2;
  };

  function CompilerHelpers_TryImplicitConvert (value, to, implicitConv, /* ref */ result) {
    var enumerator = $IM06().Call(implicitConv, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var mi = $IM07().Call(enumerator, null);
        if (!(($T01().IsValueType(to) !== $T01().IsValueType(mi.get_ReturnType())) || !$S05().CallVirtual("IsAssignableFrom", null, to, mi.get_ReturnType()))) {
          if (mi.get_IsStatic()) {
            result.set(mi.Invoke(null, JSIL.Array.New($T1C(), [value])));
          } else {
            result.set(mi.Invoke(value, $T3D().EmptyObjects));
          }
          var result2 = true;
          return result2;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM03().Call(enumerator, null);
      }
    }
    result.set(null);
    result2 = false;
    return result2;
  };

  function CompilerHelpers_TypesEqual (args, start, types) {

    for (var i = 0; i < (types.length | 0); i = ((i + 1) | 0)) {
      var arg = $IM0A().Call(args, null, (((start | 0) + i) | 0));
      if ($T03().op_Inequality(types[i], (
            (arg !== null)
               ? JSIL.GetType(arg)
               : null)
        )) {
        var result = false;
        return result;
      }
    }
    result = true;
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Generation.CompilerHelpers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "CanOptimizeMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      CompilerHelpers_CanOptimizeMethod
    );

    $.Method({Static:true , Public:true }, "Compile", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), $.Boolean], ["T"]), 
      CompilerHelpers_Compile$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "FilterConstructorsToPublicAndProtected", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")])]), 
      CompilerHelpers_FilterConstructorsToPublicAndProtected
    );

    $.Method({Static:true , Public:true }, "FilterNonVisibleMembers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])]), 
      CompilerHelpers_FilterNonVisibleMembers
    );

    $.Method({Static:true , Public:true }, "FilterNonVisibleMembersIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])]), 
      CompilerHelpers_FilterNonVisibleMembersIterator
    );

    $.Method({Static:true , Public:false}, "GetArrayCtor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodBase"), [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetArrayCtor
    );

    $.Method({Static:true , Public:true }, "GetConstructors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MethodBase")]), [$asm01.TypeRef("System.Type"), $.Boolean]), 
      CompilerHelpers_GetConstructors$00
    );

    $.Method({Static:true , Public:true }, "GetConstructors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MethodBase")]), [
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $.Boolean
        ]), 
      CompilerHelpers_GetConstructors$01
    );

    $.Method({Static:true , Public:false}, "GetConverter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.String
        ]), 
      CompilerHelpers_GetConverter
    );

    $.Method({Static:true , Public:true }, "GetExplicitConverter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetExplicitConverter
    );

    $.Method({Static:true , Public:true }, "GetExpressionTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]), 
      CompilerHelpers_GetExpressionTypes
    );

    $.Method({Static:true , Public:true }, "GetImplicitConverter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetImplicitConverter
    );

    $.Method({Static:true , Public:true }, "GetMissingValue", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetMissingValue
    );

    $.Method({Static:true , Public:true }, "GetSiteTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), $asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetSiteTypes
    );

    $.Method({Static:true , Public:false}, "GetStructDefaultCtor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodBase"), [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetStructDefaultCtor
    );

    $.Method({Static:true , Public:true }, "GetTryConvertReturnValue", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetTryConvertReturnValue
    );

    $.Method({Static:true , Public:true }, "GetType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.Object]), 
      CompilerHelpers_GetType$02
    );

    $.Method({Static:true , Public:true }, "GetTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$jsilcore.TypeRef("System.Array", [$.Object])]), 
      CompilerHelpers_GetTypes
    );

    $.Method({Static:true , Public:true }, "GetUniqueMethodName", 
      JSIL.MethodSignature.Return($.String), 
      CompilerHelpers_GetUniqueMethodName
    );

    $.Method({Static:true , Public:true }, "GetVisibleType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.Object]), 
      CompilerHelpers_GetVisibleType$03
    );

    $.Method({Static:true , Public:true }, "GetVisibleType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_GetVisibleType$04
    );

    $.Method({Static:true , Public:true }, "HasTypeConverter", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      CompilerHelpers_HasTypeConverter
    );

    $.Method({Static:true , Public:true }, "IsComparisonOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType")]), 
      CompilerHelpers_IsComparisonOperator
    );

    $.Method({Static:true , Public:true }, "IsConstructor", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      CompilerHelpers_IsConstructor
    );

    $.Method({Static:true , Public:true }, "IsProtected", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      CompilerHelpers_IsProtected$05
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsProtected", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.FieldInfo")]), 
      CompilerHelpers_IsProtected$06
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsProtected", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_IsProtected$07
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      CompilerHelpers_IsStatic
    );

    $.Method({Static:true , Public:true }, "IsStrongBox", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      CompilerHelpers_IsStrongBox$08
    );

    $.Method({Static:true , Public:true }, "IsStrongBox", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_IsStrongBox$09
    );

    $.Method({Static:true , Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      CompilerHelpers_IsVisible$0A
    );

    $.Method({Static:true , Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.FieldInfo")]), 
      CompilerHelpers_IsVisible$0B
    );

    $.Method({Static:true , Public:true }, "LightCompile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")]), 
      CompilerHelpers_LightCompile$0C
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "LightCompile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32]), 
      CompilerHelpers_LightCompile$0D
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "LightCompile", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"]), 
      CompilerHelpers_LightCompile$b1$0E
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "LightCompile", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), $.Int32], ["T"]), 
      CompilerHelpers_LightCompile$b1$0F
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "MakeCallSignatureForCallableObject", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MethodBase")]), [$asm01.TypeRef("System.Type")]), 
      CompilerHelpers_MakeCallSignatureForCallableObject
    );

    $.Method({Static:true , Public:true }, "MakeCallSiteDelegateType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      CompilerHelpers_MakeCallSiteDelegateType
    );

    $.Method({Static:true , Public:true }, "MakeCallSiteType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      CompilerHelpers_MakeCallSiteType
    )
      .Parameter(0, "types", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:true }, "MakeRepeatedArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), ["!!0", $.Int32], ["T"]), 
      CompilerHelpers_MakeRepeatedArray$b1
    );

    $.Method({Static:true , Public:true }, "MemberEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.MemberInfo")]), 
      CompilerHelpers_MemberEquals
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "Reduce", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.DynamicExpression")]), 
      CompilerHelpers_Reduce
    );

    $.Method({Static:true , Public:true }, "TryApplyTypeConverter", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      CompilerHelpers_TryApplyTypeConverter
    );

    $.Method({Static:true , Public:true }, "TryGetCallableMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MethodInfo")]), 
      CompilerHelpers_TryGetCallableMethod
    );

    $.Method({Static:true , Public:true }, "TryGetVisibleMember", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MemberInfo"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MemberInfo")]), 
      CompilerHelpers_TryGetVisibleMember
    );

    $.Method({Static:true , Public:true }, "TryImplicitConversion", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      CompilerHelpers_TryImplicitConversion
    );

    $.Method({Static:true , Public:false}, "TryImplicitConvert", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      CompilerHelpers_TryImplicitConvert
    );

    $.Method({Static:true , Public:true }, "TypesEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Collections.IList"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ]), 
      CompilerHelpers_TypesEqual
    );

    $.Constant({Static:true , Public:true }, "PublicStatic", 22); 
    $.Field({Static:true , Public:false}, "_CreateInstanceMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:true , Public:false}, "_Counter", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Generation.CompilerHelpers+<FilterNonVisibleMembersIterator>d__0 */ 

(function $lFilterNonVisibleMembersIterator$gd__0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MemberInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MemberInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.CompilerHelpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MemberInfo).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MemberInfo).get_Current)) ();
  };

  function $lFilterNonVisibleMembersIterator$gd__0__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lFilterNonVisibleMembersIterator$gd__0_$l$gm__Finally4 () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap3 !== null) {
      $IM00().Call(this.$l$g7__wrap3, null);
    }
  };

  function $lFilterNonVisibleMembersIterator$gd__0_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$l$g7__wrap3 = $IM01().Call(this.members, null);
                this.$l$g1__state = 1;
                $label0 = 2 /* goto IL_A4 */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_A3 */ ;
                continue $labelgroup0;

            }
            $label0 = 3 /* goto IL_BB */ ;
            continue $labelgroup0;

          case 1: /* IL_A3 */ 

            $label0 = 2 /* goto IL_A4 */ ;
            continue $labelgroup0;
          case 2: /* IL_A4 */ 
            if (!$IM02().Call(this.$l$g7__wrap3, null)) {
              this.$l$gm__Finally4();
            } else {
              this.$lmember$g5__1 = $IM03().Call(this.$l$g7__wrap3, null);
              this.$lvisible$g5__2 = $T07().TryGetVisibleMember(this.targetType, this.$lmember$g5__1);
              if ($T08().op_Inequality(this.$lvisible$g5__2, null)) {
                this.$l$g2__current = this.$lvisible$g5__2;
                this.$l$g1__state = 2;
                var result = true;
                return result;
              }
              $label0 = 1 /* goto IL_A3 */ ;
              continue $labelgroup0;
            }

            $label0 = 3 /* goto IL_BB */ ;
            continue $labelgroup0;
          case 3: /* IL_BB */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lFilterNonVisibleMembersIterator$gd__0_System_Collections_Generic_IEnumerable$lSystem_Reflection_MemberInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lFilterNonVisibleMembersIterator$gd__ = this;
    } else {
      $lFilterNonVisibleMembersIterator$gd__ = new $thisType(0);
    }
    $lFilterNonVisibleMembersIterator$gd__.targetType = this.$l$g3__targetType;
    $lFilterNonVisibleMembersIterator$gd__.members = this.$l$g3__members;
    return $lFilterNonVisibleMembersIterator$gd__;
  };

  function $lFilterNonVisibleMembersIterator$gd__0_System_Collections_Generic_IEnumerator$lSystem_Reflection_MemberInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lFilterNonVisibleMembersIterator$gd__0_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_MemberInfo$g_GetEnumerator();
  };

  function $lFilterNonVisibleMembersIterator$gd__0_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lFilterNonVisibleMembersIterator$gd__0_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lFilterNonVisibleMembersIterator$gd__0_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      default: 
        return;

    }
    try {
    } finally {
      this.$l$gm__Finally4();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Generation.CompilerHelpers+<FilterNonVisibleMembersIterator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lFilterNonVisibleMembersIterator$gd__0__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally4", 
      JSIL.MethodSignature.Void, 
      $lFilterNonVisibleMembersIterator$gd__0_$l$gm__Finally4
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lFilterNonVisibleMembersIterator$gd__0_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.MemberInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])), 
      $lFilterNonVisibleMembersIterator$gd__0_System_Collections_Generic_IEnumerable$lSystem_Reflection_MemberInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.MemberInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MemberInfo")), 
      $lFilterNonVisibleMembersIterator$gd__0_System_Collections_Generic_IEnumerator$lSystem_Reflection_MemberInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lFilterNonVisibleMembersIterator$gd__0_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lFilterNonVisibleMembersIterator$gd__0_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lFilterNonVisibleMembersIterator$gd__0_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lFilterNonVisibleMembersIterator$gd__0_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.MemberInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "targetType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g3__targetType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "members", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])); 
    $.Field({Static:false, Public:true }, "$l$g3__members", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])); 
    $.Field({Static:false, Public:true }, "$lmember$g5__1", $asm01.TypeRef("System.Reflection.MemberInfo")); 
    $.Field({Static:false, Public:true }, "$lvisible$g5__2", $asm01.TypeRef("System.Reflection.MemberInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap3", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.MemberInfo$g.Current", $asm01.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Generation.CompilerHelpers+<FilterConstructorsToPublicAndProtected>d__7 */ 

(function $lFilterConstructorsToPublicAndProtected$gd__7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.ConstructorInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.ConstructorInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.CompilerHelpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.MethodBase")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.ConstructorInfo).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.ConstructorInfo).get_Current)) ();
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_$l$gm__Finallya () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap9 !== null) {
      $IM00().Call(this.$l$g7__wrap9, null);
    }
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$l$g7__wrap9 = $IM01().Call(this.ctors, null);
                this.$l$g1__state = 1;
                $label0 = 2 /* goto IL_9D */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_9C */ ;
                continue $labelgroup0;

            }
            $label0 = 3 /* goto IL_B4 */ ;
            continue $labelgroup0;

          case 1: /* IL_9C */ 

            $label0 = 2 /* goto IL_9D */ ;
            continue $labelgroup0;
          case 2: /* IL_9D */ 
            if (!$IM02().Call(this.$l$g7__wrap9, null)) {
              this.$l$gm__Finallya();
            } else {
              this.$lctor$g5__8 = $IM03().Call(this.$l$g7__wrap9, null);
              if (!(!(this.$lctor$g5__8).get_IsPublic() && !$S00().CallStatic($T08(), "IsProtected", null, this.$lctor$g5__8))) {
                this.$l$g2__current = this.$lctor$g5__8;
                this.$l$g1__state = 2;
                var result = true;
                return result;
              }
              $label0 = 1 /* goto IL_9C */ ;
              continue $labelgroup0;
            }

            $label0 = 3 /* goto IL_B4 */ ;
            continue $labelgroup0;
          case 3: /* IL_B4 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_Generic_IEnumerable$lSystem_Reflection_ConstructorInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lFilterConstructorsToPublicAndProtected$gd__ = this;
    } else {
      $lFilterConstructorsToPublicAndProtected$gd__ = new $thisType(0);
    }
    $lFilterConstructorsToPublicAndProtected$gd__.ctors = this.$l$g3__ctors;
    return $lFilterConstructorsToPublicAndProtected$gd__;
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_Generic_IEnumerator$lSystem_Reflection_ConstructorInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_ConstructorInfo$g_GetEnumerator();
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_IEnumerator_Reset () {
    throw $S01().Construct();
  };

  function $lFilterConstructorsToPublicAndProtected$gd__7_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      default: 
        return;

    }
    try {
    } finally {
      this.$l$gm__Finallya();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Generation.CompilerHelpers+<FilterConstructorsToPublicAndProtected>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lFilterConstructorsToPublicAndProtected$gd__7__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finallya", 
      JSIL.MethodSignature.Void, 
      $lFilterConstructorsToPublicAndProtected$gd__7_$l$gm__Finallya
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lFilterConstructorsToPublicAndProtected$gd__7_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.ConstructorInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")])), 
      $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_Generic_IEnumerable$lSystem_Reflection_ConstructorInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.ConstructorInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.ConstructorInfo")), 
      $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_Generic_IEnumerator$lSystem_Reflection_ConstructorInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lFilterConstructorsToPublicAndProtected$gd__7_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lFilterConstructorsToPublicAndProtected$gd__7_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "ctors", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")])); 
    $.Field({Static:false, Public:true }, "$l$g3__ctors", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")])); 
    $.Field({Static:false, Public:true }, "$lctor$g5__8", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap9", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.ConstructorInfo$g.Current", $asm01.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Generation.ConstantCheck */ 

(function ConstantCheck$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Linq.Expressions.TypeBinaryExpression)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.System.Linq.Expressions.BinaryExpression)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.System.Linq.Expressions.ConstantExpression)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm04.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), $asm01.TypeRef("System.Object")]))) ();
  };

  function ConstantCheck_Check$00 (expression, value) {
    $T02().RequiresNotNull(expression, "expression");
    return $thisType.IsConstant(expression, value);
  };

  function ConstantCheck_Check$01 (node, value) {
    return (!(!$T04().$Is(value) || 
        !$T04().$Cast(value)) && $S00().CallVirtual("IsAssignableFrom", null, node.get_TypeOperand(), (node.get_Expression()).get_Type()));
  };

  function ConstantCheck_CheckAndAlso (node, value) {
    if ($T07().op_Inequality(node.get_Method(), null)) {
      var result = false;
    } else if (node.get_Conversion() !== null) {
      result = false;
    } else if ($T04().$Is(value)) {
      if ($T04().$Cast(value)) {
        result = $thisType.IsConstant(node.get_Left(), true) && 
        $thisType.IsConstant(node.get_Right(), true);
      } else {
        result = $thisType.IsConstant(node.get_Left(), false);
      }
    } else {
      result = false;
    }
    return result;
  };

  function ConstantCheck_CheckConstant (node, value) {
    if (value === null) {
      var result = node.get_Value() === null;
    } else {
      result = value.Object_Equals(node.get_Value());
    }
    return result;
  };

  function ConstantCheck_CheckOrElse (node, value) {
    if ($T07().op_Inequality(node.get_Method(), null)) {
      var result = false;
    } else if ($T04().$Is(value)) {
      if ($T04().$Cast(value)) {
        result = $thisType.IsConstant(node.get_Left(), true);
      } else {
        result = $thisType.IsConstant(node.get_Left(), false) && 
        $thisType.IsConstant(node.get_Right(), false);
      }
    } else {
      result = false;
    }
    return result;
  };

  function ConstantCheck_IsConstant (e, value) {
    var nodeType = e.get_NodeType();
    if (nodeType <= $T09().Constant) {
      if (nodeType === $T09().AndAlso) {
        var result = $thisType.CheckAndAlso($T06().$Cast(e), value);
        return result;
      }
      if (nodeType === $T09().Constant) {
        result = $thisType.CheckConstant($T08().$Cast(e), value);
        return result;
      }
    } else {
      if (nodeType === $T09().OrElse) {
        result = $thisType.CheckOrElse($T06().$Cast(e), value);
        return result;
      }
      if (nodeType === $T09().TypeIs) {
        result = $S01().CallStatic($thisType, "Check", null, $T03().$Cast(e), value);
        return result;
      }
    }
    result = false;
    return result;
  };

  function ConstantCheck_IsNull (e) {
    return $thisType.IsConstant(e, null);
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Generation.ConstantCheck", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Check", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Object]), 
      ConstantCheck_Check$00
    );

    $.Method({Static:true , Public:false}, "Check", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), $.Object]), 
      ConstantCheck_Check$01
    );

    $.Method({Static:true , Public:false}, "CheckAndAlso", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), $.Object]), 
      ConstantCheck_CheckAndAlso
    );

    $.Method({Static:true , Public:false}, "CheckConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ConstantExpression"), $.Object]), 
      ConstantCheck_CheckConstant
    );

    $.Method({Static:true , Public:false}, "CheckOrElse", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), $.Object]), 
      ConstantCheck_CheckOrElse
    );

    $.Method({Static:true , Public:false}, "IsConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Object]), 
      ConstantCheck_IsConstant
    );

    $.Method({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      ConstantCheck_IsNull
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Generation.DelegateHelpers */ 

(function DelegateHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Collections.Generic.ICollection$b1.Of($asm01.System.Type), $asm01.System.Type))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ListEqualityComparer$b1.Of($asm01.System.Type))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm01.System.Type))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Type, $asm01.System.Boolean))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionExtensions)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Action$b1)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Action$b2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Action$b3)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Action$b4)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Action$b5)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Action$b6)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Action$b7)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Action$b8)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.System.Action$b9)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm04.System.Action$b10)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm04.System.Action$b11)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm04.System.Action$b12)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm04.System.Action$b13)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm04.System.Action$b14)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm04.System.Action$b15)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm04.System.Action$b16)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Func$b1)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Func$b2)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Func$b3)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Func$b4)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.Func$b5)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Func$b6)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Func$b7)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.Func$b8)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Func$b9)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm04.System.Func$b10)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm04.System.Func$b11)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm04.System.Func$b12)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm04.System.Func$b13)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.System.Func$b14)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm04.System.Func$b15)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm04.System.Func$b16)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm04.System.Func$b17)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Type")]), $asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Type")])])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function DelegateHelpers_$lMakeDelegate$gb__2 (t) {
    return t.get_IsByRef();
  };

  function DelegateHelpers_MakeCustomDelegate (types) {
    var type = new JSIL.BoxedVariable(null);
    var conflict = new JSIL.BoxedVariable(null);
    var delegateTypes = null;
    if ($thisType._DelegateTypes === null) {
      $T03().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference($thisType, "_DelegateTypes"), $S00().Construct($T04().Instance), null);
    }
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T06().Enter(delegateTypes = $thisType._DelegateTypes, /* ref */ flag);
      var found = $thisType._DelegateTypes.TryGetValue($T07().$Cast(types), /* ref */ type);
    } finally {
      if (flag.get()) {
        $T06().Exit(delegateTypes);
      }
    }
    var flag2 = new JSIL.BoxedVariable(false);
    if (!(found || !$T00().op_Inequality(type.get(), null))) {
      var result = type.get();
    } else {
      type.set($thisType.MakeNewCustomDelegate(types));
      flag2.set(false);
      try {
        $T06().Enter(delegateTypes = $thisType._DelegateTypes, /* ref */ flag2);
        if (!(!$thisType._DelegateTypes.TryGetValue($T07().$Cast(types), /* ref */ conflict) || !$T00().op_Inequality(conflict.get(), null))) {
          type.set(conflict.get());
        } else {
          $thisType._DelegateTypes.set_Item($T07().$Cast(types), type.get());
        }
      } finally {
        if (flag2.get()) {
          $T06().Exit(delegateTypes);
        }
      }
      result = type.get();
    }
    return result;
  };

  function DelegateHelpers_MakeDelegate (types) {
    if ((types.length | 0) <= 17) {
      var arg_34_0 = !$S01().CallStatic($T08(), "Any$b1", [$asm01.System.Type], $T09().$Cast(types), $T0A().New($thisType, $thisType.$lMakeDelegate$gb__2, function () { return JSIL.GetMethodInfo($thisType, "$lMakeDelegate$gb__2", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Type]), true); }));
    } else {
      arg_34_0 = false;
    }
    if (arg_34_0) {
      var returnType = types[(((types.length | 0) - 1) | 0)];
      if ($T00().op_Equality(returnType, $T0B().__Type__)) {
        types = $T0C().RemoveLast$b1($T00())(types);
        switch (types.length) {
          case 0: 
            var result = $T0D().__Type__;
            return result;

          case 1: 
            result = $T0E().__Type__.MakeGenericType(types);
            return result;

          case 2: 
            result = $T0F().__Type__.MakeGenericType(types);
            return result;

          case 3: 
            result = $T10().__Type__.MakeGenericType(types);
            return result;

          case 4: 
            result = $T11().__Type__.MakeGenericType(types);
            return result;

          case 5: 
            result = $T12().__Type__.MakeGenericType(types);
            return result;

          case 6: 
            result = $T13().__Type__.MakeGenericType(types);
            return result;

          case 7: 
            result = $T14().__Type__.MakeGenericType(types);
            return result;

          case 8: 
            result = $T15().__Type__.MakeGenericType(types);
            return result;

          case 9: 
            result = $T16().__Type__.MakeGenericType(types);
            return result;

          case 10: 
            result = $T17().__Type__.MakeGenericType(types);
            return result;

          case 11: 
            result = $T18().__Type__.MakeGenericType(types);
            return result;

          case 12: 
            result = $T19().__Type__.MakeGenericType(types);
            return result;

          case 13: 
            result = $T1A().__Type__.MakeGenericType(types);
            return result;

          case 14: 
            result = $T1B().__Type__.MakeGenericType(types);
            return result;

          case 15: 
            result = $T1C().__Type__.MakeGenericType(types);
            return result;

          case 16: 
            result = $T1D().__Type__.MakeGenericType(types);
            return result;

        }
      } else {
        switch (types.length) {
          case 1: 
            result = $T1E().__Type__.MakeGenericType(types);
            return result;

          case 2: 
            result = $T1F().__Type__.MakeGenericType(types);
            return result;

          case 3: 
            result = $T20().__Type__.MakeGenericType(types);
            return result;

          case 4: 
            result = $T21().__Type__.MakeGenericType(types);
            return result;

          case 5: 
            result = $T22().__Type__.MakeGenericType(types);
            return result;

          case 6: 
            result = $T23().__Type__.MakeGenericType(types);
            return result;

          case 7: 
            result = $T24().__Type__.MakeGenericType(types);
            return result;

          case 8: 
            result = $T25().__Type__.MakeGenericType(types);
            return result;

          case 9: 
            result = $T26().__Type__.MakeGenericType(types);
            return result;

          case 10: 
            result = $T27().__Type__.MakeGenericType(types);
            return result;

          case 11: 
            result = $T28().__Type__.MakeGenericType(types);
            return result;

          case 12: 
            result = $T29().__Type__.MakeGenericType(types);
            return result;

          case 13: 
            result = $T2A().__Type__.MakeGenericType(types);
            return result;

          case 14: 
            result = $T2B().__Type__.MakeGenericType(types);
            return result;

          case 15: 
            result = $T2C().__Type__.MakeGenericType(types);
            return result;

          case 16: 
            result = $T2D().__Type__.MakeGenericType(types);
            return result;

          case 17: 
            result = $T2E().__Type__.MakeGenericType(types);
            return result;

        }
      }
      throw $T2F().get_Unreachable();
    }
    result = $thisType.MakeCustomDelegate(types);
    return result;
  };

  function DelegateHelpers_MakeNewCustomDelegate (types) {
    throw $S02().Construct("Signature not supported on this platform");
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Generation.DelegateHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "$lMakeDelegate$gb__2", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      DelegateHelpers_$lMakeDelegate$gb__2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "MakeCustomDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      DelegateHelpers_MakeCustomDelegate
    );

    $.Method({Static:true , Public:false}, "MakeDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      DelegateHelpers_MakeDelegate
    );

    $.Method({Static:true , Public:false}, "MakeNewCustomDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      DelegateHelpers_MakeNewCustomDelegate
    );

    $.Constant({Static:true , Public:false}, "MaximumArity", 17); 
    $.Field({Static:true , Public:false}, "_DelegateTypes", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("System.Type")]), $asm01.TypeRef("System.Type")])); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate3", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.Boolean]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Scripting.Interpreter");
/* struct Microsoft.Scripting.Interpreter.RuntimeLabel */ 

(function RuntimeLabel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };

  function RuntimeLabel__ctor (index, continuationStackDepth, stackDepth) {
    this.Index = (index | 0);
    this.ContinuationStackDepth = (continuationStackDepth | 0);
    this.StackDepth = (stackDepth | 0);
  };

  function RuntimeLabel_toString () {
    return $T01().Format("->{0} C({1}) S({2})", this.Index, this.ContinuationStackDepth, this.StackDepth);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Interpreter.RuntimeLabel", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      RuntimeLabel__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      RuntimeLabel_toString
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Index", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "StackDepth", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "ContinuationStackDepth", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.BranchLabel */ 

(function BranchLabel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Int32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.RuntimeLabel)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Int32")]), null))) ();
  };

  function BranchLabel__ctor () {
    this._labelIndex = -2147483648;
    this._targetIndex = -2147483648;
    this._stackDepth = -2147483648;
    this._continuationStackDepth = -2147483648;
  };

  function BranchLabel_AddBranch (instructions, branchIndex) {
    if ((this._targetIndex | 0) === -2147483648) {
      if (this._forwardBranchFixups === null) {
        this._forwardBranchFixups = $S00().Construct();
      }
      (this._forwardBranchFixups).Add(branchIndex);
    } else {
      this.FixupBranch(instructions, branchIndex);
    }
  };

  function BranchLabel_FixupBranch (instructions, branchIndex) {
    instructions.FixupBranch(branchIndex, (((this._targetIndex | 0) - (branchIndex | 0)) | 0));
  };

  function BranchLabel_get_HasRuntimeLabel () {
    return ((this._labelIndex | 0) !== -2147483648);
  };

  function BranchLabel_get_LabelIndex () {
    return this._labelIndex;
  };

  function BranchLabel_get_TargetIndex () {
    return this._targetIndex;
  };

  function BranchLabel_Mark (instructions) {
    var $temp00;
    $T03().Requires(!(((this._targetIndex | 0) !== -2147483648) || 
        ((this._stackDepth | 0) !== -2147483648)) && ((this._continuationStackDepth | 0) === -2147483648));
    this._stackDepth = (instructions.get_CurrentStackDepth() | 0);
    this._continuationStackDepth = (instructions.get_CurrentContinuationsDepth() | 0);
    this._targetIndex = (instructions.get_Count() | 0);
    if (this._forwardBranchFixups !== null) {

      for (var a$0 = this._forwardBranchFixups._items, i$0 = 0, l$0 = (this._forwardBranchFixups._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var branchIndex = a$0[i$0];
        this.FixupBranch(instructions, branchIndex);
      }
      this._forwardBranchFixups = null;
    }
  };

  function BranchLabel_set_LabelIndex (value) {
    this._labelIndex = (value | 0);
  };

  function BranchLabel_ToRuntimeLabel () {
    return new ($T04())(this._targetIndex, this._continuationStackDepth, this._stackDepth);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.BranchLabel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BranchLabel__ctor
    );

    $.Method({Static:false, Public:false}, "AddBranch", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList"), $.Int32]), 
      BranchLabel_AddBranch
    );

    $.Method({Static:false, Public:false}, "FixupBranch", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList"), $.Int32]), 
      BranchLabel_FixupBranch
    );

    $.Method({Static:false, Public:false}, "get_HasRuntimeLabel", 
      JSIL.MethodSignature.Return($.Boolean), 
      BranchLabel_get_HasRuntimeLabel
    );

    $.Method({Static:false, Public:false}, "get_LabelIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchLabel_get_LabelIndex
    );

    $.Method({Static:false, Public:false}, "get_TargetIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchLabel_get_TargetIndex
    );

    $.Method({Static:false, Public:false}, "Mark", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList")), 
      BranchLabel_Mark
    );

    $.Method({Static:false, Public:false}, "set_LabelIndex", 
      JSIL.MethodSignature.Action($.Int32), 
      BranchLabel_set_LabelIndex
    );

    $.Method({Static:false, Public:false}, "ToRuntimeLabel", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel")), 
      BranchLabel_ToRuntimeLabel
    );

    $.Constant({Static:true , Public:false}, "UnknownIndex", -2147483648); 
    $.Constant({Static:true , Public:false}, "UnknownDepth", -2147483648); 
    $.Field({Static:false, Public:false}, "_labelIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "_targetIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "_stackDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "_continuationStackDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "_forwardBranchFixups", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Int32])); 
    $.Property({Static:false, Public:false}, "LabelIndex", $.Int32);

    $.Property({Static:false, Public:false}, "HasRuntimeLabel", $.Boolean);

    $.Property({Static:false, Public:false}, "TargetIndex", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.Instruction */ 

(function Instruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };

  function Instruction__ctor () {
  };

  function Instruction_get_ConsumedContinuations () {
    return 0;
  };

  function Instruction_get_ConsumedStack () {
    return 0;
  };

  function Instruction_get_ContinuationsBalance () {
    return (((this.get_ProducedContinuations() | 0) - (this.get_ConsumedContinuations() | 0)) | 0);
  };

  function Instruction_get_InstructionName () {
    return System.String.Replace((JSIL.GetType(this)).get_Name(), "Instruction", "");
  };

  function Instruction_get_ProducedContinuations () {
    return 0;
  };

  function Instruction_get_ProducedStack () {
    return 0;
  };

  function Instruction_get_StackBalance () {
    return (((this.get_ProducedStack() | 0) - (this.get_ConsumedStack() | 0)) | 0);
  };

  function Instruction_GetDebugCookie (compiler) {
    return null;
  };

  function Instruction_ToDebugString (instructionIndex, cookie, labelIndexer, objects) {
    return this.toString();
  };

  function Instruction_toString () {
    return JSIL.ConcatString(this.get_InstructionName(), "()");
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.Instruction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Instruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedContinuations", 
      JSIL.MethodSignature.Return($.Int32), 
      Instruction_get_ConsumedContinuations
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      Instruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true }, "get_ContinuationsBalance", 
      JSIL.MethodSignature.Return($.Int32), 
      Instruction_get_ContinuationsBalance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      Instruction_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedContinuations", 
      JSIL.MethodSignature.Return($.Int32), 
      Instruction_get_ProducedContinuations
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      Instruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true }, "get_StackBalance", 
      JSIL.MethodSignature.Return($.Int32), 
      Instruction_get_StackBalance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetDebugCookie", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler")]), 
      Instruction_GetDebugCookie
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToDebugString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Object, 
          $asm01.TypeRef("System.Func`2", [$.Int32, $.Int32]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object])
        ]), 
      Instruction_ToDebugString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Instruction_toString
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedContinuations", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedContinuations", $.Int32);

    $.Property({Static:false, Public:true }, "StackBalance", $.Int32);

    $.Property({Static:false, Public:true }, "ContinuationsBalance", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ArithmeticInstruction */ 

(function ArithmeticInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function ArithmeticInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ArithmeticInstruction_get_ConsumedStack () {
    return 2;
  };

  function ArithmeticInstruction_get_ProducedStack () {
    return 1;
  };

  function ArithmeticInstruction_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = this.Calculate(i, r);
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.ArithmeticInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ArithmeticInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      ArithmeticInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      ArithmeticInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ArithmeticInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction */ 

(function AddInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction_AddDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function AddInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function AddInstruction_toString () {
    return "Add()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      AddInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      AddInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddInt32 */ 

(function AddInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function AddInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddInt32_Calculate (l, r) {
    return $T02().Int32ToObject((($T03().$Cast(l) + $T03().$Cast(r)) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddInt16 */ 

(function AddInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function AddInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddInt16_Calculate (l, r) {
    return ((($T02().$Cast(l) + $T02().$Cast(r)) + 0x8000 & 0xFFFF) - 0x8000);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddInt64 */ 

(function AddInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function AddInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddInt64_Calculate (l, r) {
    return $T02().op_Addition($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddUInt16 */ 

(function AddUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function AddUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddUInt16_Calculate (l, r) {
    return (($T02().$Cast(l) + $T02().$Cast(r)) & 0xFFFF);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddUInt32 */ 

(function AddUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function AddUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddUInt32_Calculate (l, r) {
    return (($T02().$Cast(l) + $T02().$Cast(r)) >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddUInt64 */ 

(function AddUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function AddUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddUInt64_Calculate (l, r) {
    return $T02().op_Addition($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddSingle */ 

(function AddSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function AddSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddSingle_Calculate (l, r) {
    return ($T02().$Cast(l) + $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddInstruction+AddDouble */ 

(function AddDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function AddDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddDouble_Calculate (l, r) {
    return ($T02().$Cast(l) + $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddInstruction+AddDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction */ 

(function AddOvfInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction_AddOvfDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function AddOvfInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function AddOvfInstruction_toString () {
    return "AddOvf()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      AddOvfInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      AddOvfInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfInt32 */ 

(function AddOvfInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function AddOvfInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$OverflowCheck(($T03().$Cast(l) + $T03().$Cast(r))));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfInt16 */ 

(function AddOvfInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function AddOvfInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfInt16_Calculate (l, r) {
    return $T02().$OverflowCheck(($T02().$Cast(l) + $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfInt64 */ 

(function AddOvfInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function AddOvfInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfInt64_Calculate (l, r) {
    return $T02().$OverflowCheck($T02().op_Addition($T02().$Cast(l), $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfUInt16 */ 

(function AddOvfUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function AddOvfUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfUInt16_Calculate (l, r) {
    return $T02().$OverflowCheck(($T02().$Cast(l) + $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfUInt32 */ 

(function AddOvfUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function AddOvfUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfUInt32_Calculate (l, r) {
    return $T02().$OverflowCheck(($T02().$Cast(l) + $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfUInt64 */ 

(function AddOvfUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function AddOvfUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfUInt64_Calculate (l, r) {
    return $T02().$OverflowCheck($T02().op_Addition($T02().$Cast(l), $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfSingle */ 

(function AddOvfSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function AddOvfSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfSingle_Calculate (l, r) {
    return ($T02().$Cast(l) + $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfDouble */ 

(function AddOvfDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function AddOvfDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AddOvfDouble_Calculate (l, r) {
    return ($T02().$Cast(l) + $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AddOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AddOvfInstruction+AddOvfDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AddOvfDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AddOvfDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction */ 

(function AndInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndBoolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndUInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndUInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndUInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndBooleanLifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndInt16Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndUInt16Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndInt32Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndUInt32Lifted)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndInt64Lifted)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction_AndUInt64Lifted)) ();
  };

  function AndInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInstruction_Create (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._Boolean) === null) {
          arg_DE_0 = $thisType._Boolean = new ($T04())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16) === null) {
          arg_51_0 = $thisType._Int16 = new ($T05())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16) === null) {
          arg_99_0 = $thisType._UInt16 = new ($T06())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32) === null) {
          arg_6B_0 = $thisType._Int32 = new ($T07())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32) === null) {
          arg_B0_0 = $thisType._UInt32 = new ($T08())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64) === null) {
          arg_82_0 = $thisType._Int64 = new ($T09())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64) === null) {
          arg_C7_0 = $thisType._UInt64 = new ($T0A())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0B().get_Unreachable();
  };

  function AndInstruction_CreateLifted (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._BooleanLifted) === null) {
          arg_DE_0 = $thisType._BooleanLifted = new ($T0C())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16Lifted) === null) {
          arg_51_0 = $thisType._Int16Lifted = new ($T0D())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16Lifted) === null) {
          arg_99_0 = $thisType._UInt16Lifted = new ($T0E())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32Lifted) === null) {
          arg_6B_0 = $thisType._Int32Lifted = new ($T0F())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32Lifted) === null) {
          arg_B0_0 = $thisType._UInt32Lifted = new ($T10())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64Lifted) === null) {
          arg_82_0 = $thisType._Int64Lifted = new ($T11())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64Lifted) === null) {
          arg_C7_0 = $thisType._UInt64Lifted = new ($T12())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0B().get_Unreachable();
  };

  function AndInstruction_toString () {
    return "And()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      AndInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      AndInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      AndInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Boolean", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_BooleanLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndInt32 */ 

(function AndInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function AndInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$Cast(l) & $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndInt16 */ 

(function AndInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function AndInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInt16_Calculate (l, r) {
    return ($T02().$Cast(l) & $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndInt64 */ 

(function AndInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function AndInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInt64_Calculate (l, r) {
    return $T02().op_BitwiseAnd($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndUInt16 */ 

(function AndUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function AndUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndUInt16_Calculate (l, r) {
    return ($T02().$Cast(l) & $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndUInt32 */ 

(function AndUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function AndUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndUInt32_Calculate (l, r) {
    return ($T02().$Cast(l) & $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndUInt64 */ 

(function AndUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function AndUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndUInt64_Calculate (l, r) {
    return $T02().op_BitwiseAnd($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndBoolean */ 

(function AndBoolean$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function AndBoolean__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndBoolean_Calculate (l, r) {
    return ($T02().$Cast(l) & $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndBoolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndBoolean__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndBoolean_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndInt32Lifted */ 

(function AndInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function AndInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) & $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndInt16Lifted */ 

(function AndInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function AndInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInt16Lifted_Calculate (l, r) {
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](and:int16[exp:int32](valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(l))), valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(r)))))");
    return (
      (num !== null)
         ? ((JSIL.Nullable_ValueOrDefault(num, 0) + 0x8000 & 0xFFFF) - 0x8000)
         : null)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndInt64Lifted */ 

(function AndInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };

  function AndInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) & $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndUInt16Lifted */ 

(function AndUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function AndUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndUInt16Lifted_Calculate (l, r) {
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](and:uint16[exp:int32](valueof:uint16(unbox.any:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<uint16>, ldloc:object(l))), valueof:uint16(unbox.any:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<uint16>, ldloc:object(r)))))");
    return (
      (num !== null)
         ? (JSIL.Nullable_ValueOrDefault(num, 0) & 0xFFFF)
         : null)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndUInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndUInt32Lifted */ 

(function AndUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };

  function AndUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndUInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) & $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndUInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndUInt64Lifted */ 

(function AndUInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };

  function AndUInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndUInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) & $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndUInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndUInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndUInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AndInstruction+AndBooleanLifted */ 

(function AndBooleanLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Boolean))) ();
  };

  function AndBooleanLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function AndBooleanLifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) & $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.AndInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AndInstruction+AndBooleanLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      AndBooleanLifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      AndBooleanLifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1 */ 

(function NewArrayInitInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function NewArrayInitInstruction$b1__ctor (elementCount) {
    $T01().prototype._ctor.call(this);
    this._elementCount = (elementCount | 0);
  };

  function NewArrayInitInstruction$b1_get_ConsumedStack () {
    return this._elementCount;
  };

  function NewArrayInitInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function NewArrayInitInstruction$b1_Run (frame) {
    var array = JSIL.Array.New($thisType.TElement.get(this), this._elementCount);

    for (var i = (((this._elementCount | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      array[i] = JSIL.CloneParameter($thisType.TElement.get(this), $thisType.TElement.get(this).$Cast(frame.Pop()));
    }
    $S00().CallVirtual("Push", null, frame, array);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      NewArrayInitInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewArrayInitInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewArrayInitInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NewArrayInitInstruction$b1_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_elementCount", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NewArrayInstruction`1 */ 

(function NewArrayInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function NewArrayInstruction$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NewArrayInstruction$b1_get_ConsumedStack () {
    return 1;
  };

  function NewArrayInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function NewArrayInstruction$b1_Run (frame) {
    var length = $T02().$Cast(frame.Pop());
    $S00().CallVirtual("Push", null, frame, JSIL.Array.New($thisType.TElement.get(this), length));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NewArrayInstruction`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      NewArrayInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewArrayInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewArrayInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NewArrayInstruction$b1_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction */ 

(function NewArrayBoundsInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function NewArrayBoundsInstruction__ctor (elementType, rank) {
    $T02().prototype._ctor.call(this);
    this._elementType = elementType;
    this._rank = (rank | 0);
  };

  function NewArrayBoundsInstruction_get_ConsumedStack () {
    return this._rank;
  };

  function NewArrayBoundsInstruction_get_ProducedStack () {
    return 1;
  };

  function NewArrayBoundsInstruction_Run (frame) {
    var lengths = JSIL.Array.New($T01(), this._rank);

    for (var i = (((this._rank | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      lengths[i] = $T01().$Cast(frame.Pop());
    }
    var array = (JSIL.MultidimensionalArray.New.apply(null, [this._elementType].concat(lengths)));
    $S00().CallVirtual("Push", null, frame, array);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Int32]), 
      NewArrayBoundsInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewArrayBoundsInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewArrayBoundsInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NewArrayBoundsInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_elementType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_rank", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1 */ 

(function GetArrayItemInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function GetArrayItemInstruction$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GetArrayItemInstruction$b1_get_ConsumedStack () {
    return 2;
  };

  function GetArrayItemInstruction$b1_get_InstructionName () {
    return "GetArrayItem";
  };

  function GetArrayItemInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function GetArrayItemInstruction$b1_Run (frame) {
    var index = $T02().$Cast(frame.Pop());
    var array = System.Array.Of($thisType.TElement.get(this)).$Cast(frame.Pop());
    $S00().CallVirtual("Push", null, frame, JSIL.CloneParameter($thisType.TElement.get(this), array[index]));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GetArrayItemInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      GetArrayItemInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      GetArrayItemInstruction$b1_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      GetArrayItemInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      GetArrayItemInstruction$b1_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GetArrayLengthInstruction */ 

(function GetArrayLengthInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };

  function GetArrayLengthInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GetArrayLengthInstruction_Create () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType.instance) === null) {
      arg_15_0 = $thisType.instance = new $thisType();
    }
    return arg_15_0;
  };

  function GetArrayLengthInstruction_get_ConsumedStack () {
    return 1;
  };

  function GetArrayLengthInstruction_get_InstructionName () {
    return "GetArrayLength";
  };

  function GetArrayLengthInstruction_get_ProducedStack () {
    return 1;
  };

  function GetArrayLengthInstruction_Run (frame) {
    var array = $T02().$Cast(frame.Pop());
    $S00().CallVirtual("Push", null, frame, array.length);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.GetArrayLengthInstruction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GetArrayLengthInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      GetArrayLengthInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      GetArrayLengthInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      GetArrayLengthInstruction_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      GetArrayLengthInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      GetArrayLengthInstruction_Run
    );

    $.Field({Static:true , Public:false}, "instance", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1 */ 

(function SetArrayItemInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function SetArrayItemInstruction$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SetArrayItemInstruction$b1_get_ConsumedStack () {
    return 3;
  };

  function SetArrayItemInstruction$b1_get_InstructionName () {
    return "SetArrayItem";
  };

  function SetArrayItemInstruction$b1_get_ProducedStack () {
    return 0;
  };

  function SetArrayItemInstruction$b1_Run (frame) {
    var value = JSIL.CloneParameter($thisType.TElement.get(this), $thisType.TElement.get(this).$Cast(frame.Pop()));
    var index = $T02().$Cast(frame.Pop());
    var array = System.Array.Of($thisType.TElement.get(this)).$Cast(frame.Pop());
    array[index] = JSIL.CloneParameter($thisType.TElement.get(this), value);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SetArrayItemInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      SetArrayItemInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      SetArrayItemInstruction$b1_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      SetArrayItemInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      SetArrayItemInstruction$b1_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.CallInstruction */ 

(function CallInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Reflection.MethodInfo, $asm00.Microsoft.Scripting.Interpreter.CallInstruction))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MethodInfoCallInstruction)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Reflection.TargetInvocationException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Decimal)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.System.Action$b3.Of(
        $asm01.System.Array, $asm01.System.Int32, 
        $asm01.System.Object
    ))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Action$b4.Of(
        $asm01.System.Array, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Object
    ))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Action$b5.Of(
        $asm01.System.Array, $asm01.System.Int32, 
        $asm01.System.Int32, $asm01.System.Int32, 
        $asm01.System.Object
    ))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b1)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b2)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b3)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b4)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b5)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b6)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b7)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b8)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ActionCallInstruction$b9)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b1)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b2)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b3)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b4)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b5)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b6)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b7)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b8)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b9)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.FuncCallInstruction$b10)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Type))) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Object"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction"), [$asm01.TypeRef("System.Action")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction"), [$asm01.TypeRef("System.Reflection.MethodInfo")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.String"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Type")]), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])]))) ();
  };

  function CallInstruction__ctor () {
    $T01().prototype._ctor.call(this);
  };

  function CallInstruction_ArrayItemSetter1 (array, index0, value) {
    $S01().CallVirtual("SetValue", null, array, value, index0);
  };

  function CallInstruction_ArrayItemSetter2 (array, index0, index1, value) {
    $S02().CallVirtual("SetValue", null, array, value, index0, index1);
  };

  function CallInstruction_ArrayItemSetter3 (array, index0, index1, index2, value) {
    $S03().CallVirtual("SetValue", null, array, value, index0, index1, index2);
  };

  function CallInstruction_CacheAction (method) {
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $S04().Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b1 (T0, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`1", [T0]), [$asm01.TypeRef("System.Action`1", [T0])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b2 (T0, T1, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`2", [T0, T1]), [$asm01.TypeRef("System.Action`2", [T0, T1])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b3 (T0, T1, T2, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`3", [
          T0, T1, 
          T2
        ]), [$asm01.TypeRef("System.Action`3", [
          T0, T1, 
          T2
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b4 (T0, T1, T2, T3, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`4", [
          T0, T1, 
          T2, T3
        ]), [$asm01.TypeRef("System.Action`4", [
          T0, T1, 
          T2, T3
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b5 (T0, T1, T2, T3, T4, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`5", [
          T0, T1, 
          T2, T3, 
          T4
        ]), [$asm01.TypeRef("System.Action`5", [
          T0, T1, 
          T2, T3, 
          T4
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b6 (T0, T1, T2, T3, T4, T5, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`6", [
          T0, T1, 
          T2, T3, 
          T4, T5
        ]), [$asm01.TypeRef("System.Action`6", [
          T0, T1, 
          T2, T3, 
          T4, T5
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b7 (T0, T1, T2, T3, T4, T5, T6, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`7", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6
        ]), [$asm01.TypeRef("System.Action`7", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b8 (T0, T1, T2, T3, T4, T5, T6, T7, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`8", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7
        ]), [$asm01.TypeRef("System.Action`8", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheAction$b9 (T0, T1, T2, T3, T4, T5, T6, T7, T8, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`9", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8
        ]), [$asm04.TypeRef("System.Action`9", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b1 (TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`1", [TRet]), [$asm01.TypeRef("System.Func`1", [TRet])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b2 (T0, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`2", [T0, TRet]), [$asm01.TypeRef("System.Func`2", [T0, TRet])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b3 (T0, T1, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          TRet
        ]), [$asm01.TypeRef("System.Func`3", [
          T0, T1, 
          TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b4 (T0, T1, T2, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`4", [
          T0, T1, 
          T2, TRet
        ]), [$asm01.TypeRef("System.Func`4", [
          T0, T1, 
          T2, TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b5 (T0, T1, T2, T3, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`5", [
          T0, T1, 
          T2, T3, 
          TRet
        ]), [$asm01.TypeRef("System.Func`5", [
          T0, T1, 
          T2, T3, 
          TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b6 (T0, T1, T2, T3, T4, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`6", [
          T0, T1, 
          T2, T3, 
          T4, TRet
        ]), [$asm01.TypeRef("System.Func`6", [
          T0, T1, 
          T2, T3, 
          T4, TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b7 (T0, T1, T2, T3, T4, T5, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`7", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          TRet
        ]), [$asm01.TypeRef("System.Func`7", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b8 (T0, T1, T2, T3, T4, T5, T6, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`8", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, TRet
        ]), [$asm01.TypeRef("System.Func`8", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b9 (T0, T1, T2, T3, T4, T5, T6, T7, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`9", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          TRet
        ]), [$asm01.TypeRef("System.Func`9", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_CacheFunc$b10 (T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet, method) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`10", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, TRet
        ]), [$asm04.TypeRef("System.Func`10", [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, TRet
        ])]);
    var cache = null;
    var info = $T07().GetMethodInfo(method);
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T09().Enter(cache = $thisType._cache, /* ref */ flag);
      $thisType._cache.set_Item(info, $s00.Construct(method));
    } finally {
      if (flag.get()) {
        $T09().Exit(cache);
      }
    }
    return info;
  };

  function CallInstruction_Create$00 (info) {
    return $thisType.Create(info, info.GetParameters());
  };

  function CallInstruction_Create$01 (info, parameters, $exception) {
    var res = new JSIL.BoxedVariable(null);
    var cache = null;
    var argumentCount = (parameters.length | 0);
    if (!info.get_IsStatic()) {
      argumentCount = ((argumentCount + 1) | 0);
    }
    var flag = new JSIL.BoxedVariable(false);
    var flag2 = new JSIL.BoxedVariable(false);
    if (!(!$T0B().op_Inequality(info.get_DeclaringType(), null) || 
        !(info.get_DeclaringType()).get_IsArray() || (!(info.get_Name() == "Get") && 
          !(info.get_Name() == "Set")))) {
      var result = $thisType.GetArrayAccessor(info, argumentCount);
    } else if (!(!$T07().IsDynamicMethod(info) && (info.get_IsStatic() || 
          !$T07().IsValueType(info.get_DeclaringType())))) {
      result = new ($T11())(info, argumentCount);
    } else if (argumentCount >= 10) {
      result = new ($T11())(info, argumentCount);
    } else {

      for (var i = 0; i < (parameters.length | 0); i = ((i + 1) | 0)) {
        var pi = parameters[i];
        if ((pi.get_ParameterType()).get_IsByRef()) {
          result = new ($T11())(info, argumentCount);
          return result;
        }
      }
      if ($thisType.ShouldCache(info)) {
        flag.set(false);
        try {
          $T09().Enter(cache = $thisType._cache, /* ref */ flag);
          if ($thisType._cache.TryGetValue(info, /* ref */ res)) {
            result = res.get();
            return result;
          }
        } finally {
          if (flag.get()) {
            $T09().Exit(cache);
          }
        }
      }
      try {
        if (argumentCount < 3) {
          res.set($thisType.FastCreate(info, parameters));
        } else {
          res.set($thisType.SlowCreate(info, parameters));
        }
      } catch ($exception) {
        if ($T13().$Is($exception)) {
          var tie = $exception;
          if (!$T14().$Is(tie.get_InnerException())) {
            throw tie.get_InnerException();
          }
          res.set(new ($T11())(info, argumentCount));
        } else if ($T14().$Is($exception)) {
          res.set(new ($T11())(info, argumentCount));
        } else {
          throw $exception;
        }
      }
      if ($thisType.ShouldCache(info)) {
        flag2.set(false);
        try {
          $T09().Enter(cache = $thisType._cache, /* ref */ flag2);
          $thisType._cache.set_Item(info, res.get());
        } finally {
          if (flag2.get()) {
            $T09().Exit(cache);
          }
        }
      }
      result = res.get();
    }
    return result;
  };

  function CallInstruction_FastCreate (target, pi) {
    var t = $thisType.TryGetParameterOrReturnType(target, pi, 0);
    if ($T0B().op_Equality(t, null)) {
      var result = $S05().Construct(target);
    } else if ($T07().IsEnum(t)) {
      result = $thisType.SlowCreate(target, pi);
    } else {
      switch (($T07().GetTypeCode(t)).valueOf()) {
        case 1: 
          if (!$T0B().op_Inequality(t, $T04().__Type__) || (!$thisType.IndexIsNotReturnType(0, target, pi) && 
              !$T07().IsValueType(t))) {
            result = $thisType.FastCreate$b1($T04())(target, pi);
            return result;
          }
          break;

        case 3: 
          result = $thisType.FastCreate$b1($T08())(target, pi);
          return result;

        case 4: 
          result = $thisType.FastCreate$b1($T15())(target, pi);
          return result;

        case 5: 
          result = $thisType.FastCreate$b1($T16())(target, pi);
          return result;

        case 6: 
          result = $thisType.FastCreate$b1($T17())(target, pi);
          return result;

        case 7: 
          result = $thisType.FastCreate$b1($T18())(target, pi);
          return result;

        case 8: 
          result = $thisType.FastCreate$b1($T19())(target, pi);
          return result;

        case 9: 
          result = $thisType.FastCreate$b1($T03())(target, pi);
          return result;

        case 10: 
          result = $thisType.FastCreate$b1($T1A())(target, pi);
          return result;

        case 11: 
          result = $thisType.FastCreate$b1($T1B())(target, pi);
          return result;

        case 12: 
          result = $thisType.FastCreate$b1($T1C())(target, pi);
          return result;

        case 13: 
          result = $thisType.FastCreate$b1($T1D())(target, pi);
          return result;

        case 14: 
          result = $thisType.FastCreate$b1($T1E())(target, pi);
          return result;

        case 15: 
          result = $thisType.FastCreate$b1($T1F())(target, pi);
          return result;

        case 16: 
          result = $thisType.FastCreate$b1($T20())(target, pi);
          return result;

        case 18: 
          result = $thisType.FastCreate$b1($T10())(target, pi);
          return result;

      }
      result = $thisType.SlowCreate(target, pi);
    }
    return result;
  };

  function CallInstruction_FastCreate$b1 (T0, target, pi) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`1", [T0]), [$asm01.System.Reflection.MethodInfo]);
    var $s01 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`1", [T0]), [$asm01.System.Reflection.MethodInfo]);
    var t = $thisType.TryGetParameterOrReturnType(target, pi, 1);
    if ($T0B().op_Equality(t, null)) {
      if ($T0B().op_Equality(target.get_ReturnType(), $T21().__Type__)) {
        var result = $s00.Construct(target);
      } else {
        result = $s01.Construct(target);
      }
    } else if ($T07().IsEnum(t)) {
      result = $thisType.SlowCreate(target, pi);
    } else {
      switch (($T07().GetTypeCode(t)).valueOf()) {
        case 1: 
          if (!$T0B().op_Inequality(t, $T04().__Type__) || (!$thisType.IndexIsNotReturnType(1, target, pi) && 
              !$T07().IsValueType(t))) {
            result = $thisType.FastCreate$b2(T0, $T04())(target, pi);
            return result;
          }
          break;

        case 3: 
          result = $thisType.FastCreate$b2(T0, $T08())(target, pi);
          return result;

        case 4: 
          result = $thisType.FastCreate$b2(T0, $T15())(target, pi);
          return result;

        case 5: 
          result = $thisType.FastCreate$b2(T0, $T16())(target, pi);
          return result;

        case 6: 
          result = $thisType.FastCreate$b2(T0, $T17())(target, pi);
          return result;

        case 7: 
          result = $thisType.FastCreate$b2(T0, $T18())(target, pi);
          return result;

        case 8: 
          result = $thisType.FastCreate$b2(T0, $T19())(target, pi);
          return result;

        case 9: 
          result = $thisType.FastCreate$b2(T0, $T03())(target, pi);
          return result;

        case 10: 
          result = $thisType.FastCreate$b2(T0, $T1A())(target, pi);
          return result;

        case 11: 
          result = $thisType.FastCreate$b2(T0, $T1B())(target, pi);
          return result;

        case 12: 
          result = $thisType.FastCreate$b2(T0, $T1C())(target, pi);
          return result;

        case 13: 
          result = $thisType.FastCreate$b2(T0, $T1D())(target, pi);
          return result;

        case 14: 
          result = $thisType.FastCreate$b2(T0, $T1E())(target, pi);
          return result;

        case 15: 
          result = $thisType.FastCreate$b2(T0, $T1F())(target, pi);
          return result;

        case 16: 
          result = $thisType.FastCreate$b2(T0, $T20())(target, pi);
          return result;

        case 18: 
          result = $thisType.FastCreate$b2(T0, $T10())(target, pi);
          return result;

      }
      result = $thisType.SlowCreate(target, pi);
    }
    return result;
  };

  function CallInstruction_FastCreate$b2 (T0, T1, target, pi) {
    var $s00 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ActionCallInstruction`2", [T0, T1]), [$asm01.System.Reflection.MethodInfo]);
    var $s01 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`2", [T0, T1]), [$asm01.System.Reflection.MethodInfo]);
    var $s02 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Object
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s03 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Boolean
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s04 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Char
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s05 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.SByte
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s06 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Byte
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s07 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Int16
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s08 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.UInt16
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s09 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Int32
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s0A = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.UInt32
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s0B = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Int64
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s0C = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.UInt64
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s0D = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Single
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s0E = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.Double
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s0F = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $asm01.TypeRef("System.Decimal")
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s10 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $asm01.TypeRef("System.DateTime")
        ]), [$asm01.System.Reflection.MethodInfo]);
    var $s11 = new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.FuncCallInstruction`3", [
          T0, T1, 
          $.String
        ]), [$asm01.System.Reflection.MethodInfo]);
    var t = $thisType.TryGetParameterOrReturnType(target, pi, 2);
    if ($T0B().op_Equality(t, null)) {
      if ($T0B().op_Equality(target.get_ReturnType(), $T21().__Type__)) {
        var result = $s00.Construct(target);
      } else {
        result = $s01.Construct(target);
      }
    } else if ($T07().IsEnum(t)) {
      result = $thisType.SlowCreate(target, pi);
    } else {
      switch (($T07().GetTypeCode(t)).valueOf()) {
        case 1: 
          if (!$T07().IsValueType(t)) {
            result = $s02.Construct(target);
            return result;
          }
          break;

        case 3: 
          result = $s03.Construct(target);
          return result;

        case 4: 
          result = $s04.Construct(target);
          return result;

        case 5: 
          result = $s05.Construct(target);
          return result;

        case 6: 
          result = $s06.Construct(target);
          return result;

        case 7: 
          result = $s07.Construct(target);
          return result;

        case 8: 
          result = $s08.Construct(target);
          return result;

        case 9: 
          result = $s09.Construct(target);
          return result;

        case 10: 
          result = $s0A.Construct(target);
          return result;

        case 11: 
          result = $s0B.Construct(target);
          return result;

        case 12: 
          result = $s0C.Construct(target);
          return result;

        case 13: 
          result = $s0D.Construct(target);
          return result;

        case 14: 
          result = $s0E.Construct(target);
          return result;

        case 15: 
          result = $s0F.Construct(target);
          return result;

        case 16: 
          result = $s10.Construct(target);
          return result;

        case 18: 
          result = $s11.Construct(target);
          return result;

      }
      result = $thisType.SlowCreate(target, pi);
    }
    return result;
  };

  function CallInstruction_get_ConsumedStack () {
    return this.get_ArgumentCount();
  };

  function CallInstruction_get_InstructionName () {
    return "Call";
  };

  function CallInstruction_get_ProducedStack () {
    return (
      $T0B().op_Equality((this.get_Info()).get_ReturnType(), $T21().__Type__)
         ? 0
         : 1)
    ;
  };

  function CallInstruction_GetArrayAccessor (info, argumentCount) {
    var arrayType = info.get_DeclaringType();
    var isGetter = (info.get_Name() == "Get");
    switch (arrayType.GetArrayRank()) {
      case 1: 
        var result = $thisType.Create((
            isGetter
               ? $S06().CallVirtual("GetMethod", null, arrayType, "GetValue", JSIL.Array.New($T0B(), [$T03().__Type__]))
               : $T07().GetMethodInfo($T22().New($thisType, $thisType.ArrayItemSetter1, function () { return JSIL.GetMethodInfo($thisType, "ArrayItemSetter1", new JSIL.MethodSignature(null, [
                        $asm01.System.Array, $asm01.System.Int32, 
                        $asm01.System.Object
                      ]), true); })))
        );
        break;

      case 2: 
        result = $thisType.Create((
            isGetter
               ? $S06().CallVirtual("GetMethod", null, arrayType, "GetValue", JSIL.Array.New($T0B(), [$T03().__Type__, $T03().__Type__]))
               : $T07().GetMethodInfo($T23().New($thisType, $thisType.ArrayItemSetter2, function () { return JSIL.GetMethodInfo($thisType, "ArrayItemSetter2", new JSIL.MethodSignature(null, [
                        $asm01.System.Array, $asm01.System.Int32, 
                        $asm01.System.Int32, $asm01.System.Object
                      ]), true); })))
        );
        break;

      case 3: 
        result = $thisType.Create((
            isGetter
               ? $S06().CallVirtual("GetMethod", null, arrayType, "GetValue", JSIL.Array.New($T0B(), [$T03().__Type__, $T03().__Type__, $T03().__Type__]))
               : $T07().GetMethodInfo($T24().New($thisType, $thisType.ArrayItemSetter3, function () { return JSIL.GetMethodInfo($thisType, "ArrayItemSetter3", new JSIL.MethodSignature(null, [
                        $asm01.System.Array, $asm01.System.Int32, 
                        $asm01.System.Int32, $asm01.System.Int32, 
                        $asm01.System.Object
                      ]), true); })))
        );
        break;

      default: 
        result = new ($T11())(info, argumentCount);
        break;

    }
    return result;
  };

  function CallInstruction_GetHelperType (info, arrTypes) {
    if ($T0B().op_Equality(info.get_ReturnType(), $T21().__Type__)) {
      switch (arrTypes.length) {
        case 0: 
          var t = $T0A().__Type__;
          break;

        case 1: 
          t = $T26().__Type__.MakeGenericType(arrTypes);
          break;

        case 2: 
          t = $T27().__Type__.MakeGenericType(arrTypes);
          break;

        case 3: 
          t = $T28().__Type__.MakeGenericType(arrTypes);
          break;

        case 4: 
          t = $T29().__Type__.MakeGenericType(arrTypes);
          break;

        case 5: 
          t = $T2A().__Type__.MakeGenericType(arrTypes);
          break;

        case 6: 
          t = $T2B().__Type__.MakeGenericType(arrTypes);
          break;

        case 7: 
          t = $T2C().__Type__.MakeGenericType(arrTypes);
          break;

        case 8: 
          t = $T2D().__Type__.MakeGenericType(arrTypes);
          break;

        case 9: 
          t = $T2E().__Type__.MakeGenericType(arrTypes);
          break;

        default: 
          throw $S07().Construct();

      }
    } else {
      switch (arrTypes.length) {
        case 1: 
          t = $T30().__Type__.MakeGenericType(arrTypes);
          break;

        case 2: 
          t = $T31().__Type__.MakeGenericType(arrTypes);
          break;

        case 3: 
          t = $T32().__Type__.MakeGenericType(arrTypes);
          break;

        case 4: 
          t = $T33().__Type__.MakeGenericType(arrTypes);
          break;

        case 5: 
          t = $T34().__Type__.MakeGenericType(arrTypes);
          break;

        case 6: 
          t = $T35().__Type__.MakeGenericType(arrTypes);
          break;

        case 7: 
          t = $T36().__Type__.MakeGenericType(arrTypes);
          break;

        case 8: 
          t = $T37().__Type__.MakeGenericType(arrTypes);
          break;

        case 9: 
          t = $T38().__Type__.MakeGenericType(arrTypes);
          break;

        case 10: 
          t = $T39().__Type__.MakeGenericType(arrTypes);
          break;

        default: 
          throw $S07().Construct();

      }
    }
    return t;
  };

  function CallInstruction_IndexIsNotReturnType (index, target, pi) {
    return (((pi.length | 0) !== (index | 0)) || (((pi.length | 0) === (index | 0)) && 
        !target.get_IsStatic()));
  };

  function CallInstruction_Invoke$02 (args) {
    switch (args.length) {
      case 0: 
        var result = this.Invoke();
        break;

      case 1: 
        result = $S08().CallVirtual("Invoke", null, this, args[0]);
        break;

      case 2: 
        result = this.Invoke(args[0], args[1]);
        break;

      case 3: 
        result = this.Invoke(args[0], args[1], args[2]);
        break;

      case 4: 
        result = this.Invoke(args[0], args[1], args[2], args[3]);
        break;

      case 5: 
        result = this.Invoke(
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4]
        );
        break;

      case 6: 
        result = this.Invoke(
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5]
        );
        break;

      case 7: 
        result = this.Invoke(
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5], 
          args[6]
        );
        break;

      case 8: 
        result = this.Invoke(
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5], 
          args[6], 
          args[7]
        );
        break;

      case 9: 
        result = this.Invoke(
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5], 
          args[6], 
          args[7], 
          args[8]
        );
        break;

      default: 
        throw $S07().Construct();

    }
    return result;
  };

  function CallInstruction_Invoke$03 () {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$04 (arg0) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$05 (arg0, arg1) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$06 (arg0, arg1, arg2) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$07 (arg0, arg1, arg2, arg3) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$08 (arg0, arg1, arg2, arg3, arg4) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$09 (arg0, arg1, arg2, arg3, arg4, arg5) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$0A (arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$0B (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    throw $S07().Construct();
  };

  function CallInstruction_Invoke$0C (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    throw $S07().Construct();
  };

  function CallInstruction_InvokeInstance (instance, args) {
    switch (args.length) {
      case 0: 
        var result = $S08().CallVirtual("Invoke", null, this, instance);
        break;

      case 1: 
        result = this.Invoke(instance, args[0]);
        break;

      case 2: 
        result = this.Invoke(instance, args[0], args[1]);
        break;

      case 3: 
        result = this.Invoke(instance, args[0], args[1], args[2]);
        break;

      case 4: 
        result = this.Invoke(
          instance, 
          args[0], 
          args[1], 
          args[2], 
          args[3]
        );
        break;

      case 5: 
        result = this.Invoke(
          instance, 
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4]
        );
        break;

      case 6: 
        result = this.Invoke(
          instance, 
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5]
        );
        break;

      case 7: 
        result = this.Invoke(
          instance, 
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5], 
          args[6]
        );
        break;

      case 8: 
        result = this.Invoke(
          instance, 
          args[0], 
          args[1], 
          args[2], 
          args[3], 
          args[4], 
          args[5], 
          args[6], 
          args[7]
        );
        break;

      default: 
        throw $S07().Construct();

    }
    return result;
  };

  function CallInstruction_ShouldCache (info) {
    return !$T07().IsDynamicMethod(info);
  };

  function CallInstruction_SlowCreate (info, pis) {
    var types = $S09().Construct();
    if (!info.get_IsStatic()) {
      types.Add(info.get_DeclaringType());
    }

    for (var i = 0; i < (pis.length | 0); i = ((i + 1) | 0)) {
      var pi = pis[i];
      types.Add(pi.get_ParameterType());
    }
    if ($T0B().op_Inequality(info.get_ReturnType(), $T21().__Type__)) {
      types.Add(info.get_ReturnType());
    }
    var arrTypes = $T3B().prototype.ToArray.call(types);
    return $thisType.$Cast($S0A().CallStatic($T3C(), "CreateInstance", null, $thisType.GetHelperType(info, arrTypes), JSIL.Array.New($T04(), [info])));
  };

  function CallInstruction_toString () {
    return JSIL.ConcatString("Call(", this.get_Info(), ")");
  };

  function CallInstruction_TryGetParameterOrReturnType (target, pi, index) {
    if (!target.get_IsStatic()) {
      index = (((index | 0) - 1) | 0);
      if ((index | 0) < 0) {
        var result = target.get_DeclaringType();
        return result;
      }
    }
    if ((index | 0) < (pi.length | 0)) {
      result = (pi[index]).get_ParameterType();
    } else if (!(!$T0B().op_Equality(target.get_ReturnType(), $T21().__Type__) && ((index | 0) <= (pi.length | 0)))) {
      result = null;
    } else {
      result = target.get_ReturnType();
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.CallInstruction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      CallInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "ArrayItemSetter1", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Object
        ]), 
      CallInstruction_ArrayItemSetter1
    );

    $.Method({Static:true , Public:true }, "ArrayItemSetter2", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32, $.Object
        ]), 
      CallInstruction_ArrayItemSetter2
    );

    $.Method({Static:true , Public:true }, "ArrayItemSetter3", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32, $.Int32, 
          $.Object
        ]), 
      CallInstruction_ArrayItemSetter3
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action")]), 
      CallInstruction_CacheAction
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`1", ["!!0"])], ["T0"]), 
      CallInstruction_CacheAction$b1
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`2", ["!!0", "!!1"])], ["T0", "T1"]), 
      CallInstruction_CacheAction$b2
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`3", [
            "!!0", "!!1", 
            "!!2"
          ])], ["T0", "T1", "T2"]), 
      CallInstruction_CacheAction$b3
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`4", [
            "!!0", "!!1", 
            "!!2", "!!3"
          ])], ["T0", "T1", "T2", "T3"]), 
      CallInstruction_CacheAction$b4
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`5", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ]), 
      CallInstruction_CacheAction$b5
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`6", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ]), 
      CallInstruction_CacheAction$b6
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`7", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ]), 
      CallInstruction_CacheAction$b7
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Action`8", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ]), 
      CallInstruction_CacheAction$b8
    );

    $.Method({Static:true , Public:true }, "CacheAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm04.TypeRef("System.Action`9", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ]), 
      CallInstruction_CacheAction$b9
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`1", ["!!0"])], ["TRet"]), 
      CallInstruction_CacheFunc$b1
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T0", "TRet"]), 
      CallInstruction_CacheFunc$b2
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`3", [
            "!!0", "!!1", 
            "!!2"
          ])], ["T0", "T1", "TRet"]), 
      CallInstruction_CacheFunc$b3
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`4", [
            "!!0", "!!1", 
            "!!2", "!!3"
          ])], ["T0", "T1", "T2", "TRet"]), 
      CallInstruction_CacheFunc$b4
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`5", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4"
          ])], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ]), 
      CallInstruction_CacheFunc$b5
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`6", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ]), 
      CallInstruction_CacheFunc$b6
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`7", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ]), 
      CallInstruction_CacheFunc$b7
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`8", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ]), 
      CallInstruction_CacheFunc$b8
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Func`9", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ]), 
      CallInstruction_CacheFunc$b9
    );

    $.Method({Static:true , Public:true }, "CacheFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm04.TypeRef("System.Func`10", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9"
          ])], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ]), 
      CallInstruction_CacheFunc$b10
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      CallInstruction_Create$00
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      CallInstruction_Create$01
    );

    $.Method({Static:true , Public:false}, "FastCreate", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      CallInstruction_FastCreate
    );

    $.Method({Static:true , Public:false}, "FastCreate", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])], ["T0"]), 
      CallInstruction_FastCreate$b1
    );

    $.Method({Static:true , Public:false}, "FastCreate", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])], ["T0", "T1"]), 
      CallInstruction_FastCreate$b2
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      CallInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      CallInstruction_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      CallInstruction_get_ProducedStack
    );

    $.Method({Static:true , Public:false}, "GetArrayAccessor", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo"), $.Int32]), 
      CallInstruction_GetArrayAccessor
    );

    $.Method({Static:true , Public:false}, "GetHelperType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      CallInstruction_GetHelperType
    );

    $.Method({Static:true , Public:false}, "IndexIsNotReturnType", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])
        ]), 
      CallInstruction_IndexIsNotReturnType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])]), 
      CallInstruction_Invoke$02
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      JSIL.MethodSignature.Return($.Object), 
      CallInstruction_Invoke$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      CallInstruction_Invoke$04
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      CallInstruction_Invoke$05
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object
        ]), 
      CallInstruction_Invoke$06
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      CallInstruction_Invoke$07
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      CallInstruction_Invoke$08
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      CallInstruction_Invoke$09
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      CallInstruction_Invoke$0A
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      CallInstruction_Invoke$0B
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      CallInstruction_Invoke$0C
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InvokeInstance", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])]), 
      CallInstruction_InvokeInstance
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      CallInstruction_ShouldCache
    );

    $.Method({Static:true , Public:false}, "SlowCreate", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      CallInstruction_SlowCreate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      CallInstruction_toString
    );

    $.Method({Static:true , Public:false}, "TryGetParameterOrReturnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32
        ]), 
      CallInstruction_TryGetParameterOrReturnType
    );

    $.Constant({Static:true , Public:false}, "MaxHelpers", 10); 
    $.Constant({Static:true , Public:false}, "MaxArgs", 3); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_cache", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Reflection.MethodInfo"), $.Type])); 
    function CallInstruction__cctor () {
      $thisType._cache = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CallInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MethodInfoCallInstruction */ 

(function MethodInfoCallInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.TargetInvocationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ExceptionHelpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")])]))) ();
  };

  function MethodInfoCallInstruction__ctor (target, argumentCount) {
    $T02().prototype._ctor.call(this);
    this._target = target;
    this._argumentCount = (argumentCount | 0);
  };

  function MethodInfoCallInstruction_get_ArgumentCount () {
    return this._argumentCount;
  };

  function MethodInfoCallInstruction_get_Info () {
    return this._target;
  };

  function MethodInfoCallInstruction_GetNonStaticArgs (args) {
    var newArgs = JSIL.Array.New($T04(), (((args.length | 0) - 1) | 0));

    for (var i = 0; i < (newArgs.length | 0); i = ((i + 1) | 0)) {
      newArgs[i] = args[((i + 1) | 0)];
    }
    return newArgs;
  };

  function MethodInfoCallInstruction_Invoke$00 (args) {
    return this.InvokeWorker(args);
  };

  function MethodInfoCallInstruction_Invoke$01 () {
    return this.InvokeWorker(JSIL.Array.New($T04(), 0));
  };

  function MethodInfoCallInstruction_Invoke$02 (arg0) {
    return this.InvokeWorker(JSIL.Array.New($T04(), [arg0]));
  };

  function MethodInfoCallInstruction_Invoke$03 (arg0, arg1) {
    return this.InvokeWorker(JSIL.Array.New($T04(), [arg0, arg1]));
  };

  function MethodInfoCallInstruction_InvokeInstance (instance, args, $exception) {
    if ((this._target).get_IsStatic()) {
      try {
        var result = (this._target).Invoke(null, args);
        return result;
      } catch ($exception) {
        if ($T07().$Is($exception)) {
          var e = $exception;
          throw $T08().UpdateForRethrow(e.get_InnerException());
        } else {
          throw $exception;
        }
      }
    }
    try {
      result = (this._target).Invoke(instance, args);
    } catch ($exception) {
      if ($T07().$Is($exception)) {
        var e = $exception;
        throw $T08().UpdateForRethrow(e.get_InnerException());
      } else {
        throw $exception;
      }
    }
    return result;
  };

  function MethodInfoCallInstruction_InvokeWorker (args, $exception) {
    if ((this._target).get_IsStatic()) {
      try {
        var result = (this._target).Invoke(null, args);
        return result;
      } catch ($exception) {
        if ($T07().$Is($exception)) {
          var e = $exception;
          throw $T08().UpdateForRethrow(e.get_InnerException());
        } else {
          throw $exception;
        }
      }
    }
    try {
      result = (this._target).Invoke(args[0], $thisType.GetNonStaticArgs(args));
    } catch ($exception) {
      if ($T07().$Is($exception)) {
        var e = $exception;
        throw $T08().UpdateForRethrow(e.get_InnerException());
      } else {
        throw $exception;
      }
    }
    return result;
  };

  function MethodInfoCallInstruction_Run (frame) {
    var first = (((frame.StackIndex | 0) - (this._argumentCount | 0)) | 0);
    var args = JSIL.Array.New($T04(), this._argumentCount);

    for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
      args[i] = frame.Data[((first + i) | 0)];
    }
    var ret = $S00().CallVirtual("Invoke", null, this, args);
    if ($T0A().op_Inequality((this._target).get_ReturnType(), $T0B().__Type__)) {
      frame.Data[first] = ret;
      frame.StackIndex = ((first + 1) | 0);
    } else {
      frame.StackIndex = first;
    }
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MethodInfoCallInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo"), $.Int32]), 
      MethodInfoCallInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      MethodInfoCallInstruction_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      MethodInfoCallInstruction_get_Info
    );

    $.Method({Static:true , Public:false}, "GetNonStaticArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])]), 
      MethodInfoCallInstruction_GetNonStaticArgs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])]), 
      MethodInfoCallInstruction_Invoke$00
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      JSIL.MethodSignature.Return($.Object), 
      MethodInfoCallInstruction_Invoke$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      MethodInfoCallInstruction_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MethodInfoCallInstruction_Invoke$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "InvokeInstance", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])]), 
      MethodInfoCallInstruction_InvokeInstance
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:false}, "InvokeWorker", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])]), 
      MethodInfoCallInstruction_InvokeWorker
    )
      .Parameter(0, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      MethodInfoCallInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_argumentCount", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction */ 

(function ActionCallInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction__ctor$00 (target) {
    $T01().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction__ctor$01 (target) {
    $T01().prototype._ctor.call(this);
    this._target = $T03().CreateDelegate(target, $T00().__Type__);
  };

  function ActionCallInstruction_get_ArgumentCount () {
    return 0;
  };

  function ActionCallInstruction_get_Info () {
    return $T03().GetMethodInfo(this._target);
  };

  function ActionCallInstruction_Invoke$02 () {
    this._target();
    return null;
  };

  function ActionCallInstruction_Run (frame) {
    this._target();
    frame.StackIndex = (frame.StackIndex | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Action")), 
      ActionCallInstruction__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      JSIL.MethodSignature.Return($.Object), 
      ActionCallInstruction_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`1 */ 

(function ActionCallInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b1__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b1__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b1.Of($thisType.T0.get(this)).__Type__);
  };

  function ActionCallInstruction$b1_get_ArgumentCount () {
    return 1;
  };

  function ActionCallInstruction$b1_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b1_Invoke$02 (arg0) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ));
    return null;
  };

  function ActionCallInstruction$b1_Run (frame) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)])));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`1", [$.GenericParameter("T0")])]), 
      ActionCallInstruction$b1__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b1__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b1_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b1_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      ActionCallInstruction$b1_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b1_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`1", [$.GenericParameter("T0")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`2 */ 

(function ActionCallInstruction$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b2__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b2__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b2.Of($thisType.T0.get(this), $thisType.T1.get(this)).__Type__);
  };

  function ActionCallInstruction$b2_get_ArgumentCount () {
    return 2;
  };

  function ActionCallInstruction$b2_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b2_Invoke$02 (arg0, arg1) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ));
    return null;
  };

  function ActionCallInstruction$b2_Run (frame) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)])));
    frame.StackIndex = (((frame.StackIndex | 0) - 2) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0", "T1"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`2", [$.GenericParameter("T0"), $.GenericParameter("T1")])]), 
      ActionCallInstruction$b2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b2__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b2_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b2_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ActionCallInstruction$b2_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b2_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`2", [$.GenericParameter("T0"), $.GenericParameter("T1")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`3 */ 

(function ActionCallInstruction$b3$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b3__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b3__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b3.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b3_get_ArgumentCount () {
    return 3;
  };

  function ActionCallInstruction$b3_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b3_Invoke$02 (arg0, arg1, arg2) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ));
    return null;
  };

  function ActionCallInstruction$b3_Run (frame) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)])));
    frame.StackIndex = (((frame.StackIndex | 0) - 3) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0", "T1", "T2"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`3", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2")
          ])]), 
      ActionCallInstruction$b3__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b3__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b3_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b3_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object
        ]), 
      ActionCallInstruction$b3_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b3_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`3", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`4 */ 

(function ActionCallInstruction$b4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b4__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b4__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b4.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b4_get_ArgumentCount () {
    return 4;
  };

  function ActionCallInstruction$b4_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b4_Invoke$02 (arg0, arg1, arg2, arg3) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ));
    return null;
  };

  function ActionCallInstruction$b4_Run (frame) {
    this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)])));
    frame.StackIndex = (((frame.StackIndex | 0) - 4) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0", "T1", "T2", "T3"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`4", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3")
          ])]), 
      ActionCallInstruction$b4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b4_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b4_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      ActionCallInstruction$b4_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b4_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`4", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`5 */ 

(function ActionCallInstruction$b5$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b5__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b5__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b5.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b5_get_ArgumentCount () {
    return 5;
  };

  function ActionCallInstruction$b5_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b5_Invoke$02 (arg0, arg1, arg2, arg3, arg4) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      )
    );
    return null;
  };

  function ActionCallInstruction$b5_Run (frame) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
      JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
      JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
      JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
      JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
    );
    frame.StackIndex = (((frame.StackIndex | 0) - 5) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`5", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4")
          ])]), 
      ActionCallInstruction$b5__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b5__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b5_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b5_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      ActionCallInstruction$b5_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b5_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`5", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`6 */ 

(function ActionCallInstruction$b6$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b6__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b6__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b6.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b6_get_ArgumentCount () {
    return 6;
  };

  function ActionCallInstruction$b6_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b6_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      )
    );
    return null;
  };

  function ActionCallInstruction$b6_Run (frame) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
      JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
      JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
      JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
      JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
      JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
    );
    frame.StackIndex = (((frame.StackIndex | 0) - 6) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`6", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`6", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5")
          ])]), 
      ActionCallInstruction$b6__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b6__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b6_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b6_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      ActionCallInstruction$b6_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b6_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`6", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`7 */ 

(function ActionCallInstruction$b7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b7__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b7__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b7.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.T6.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b7_get_ArgumentCount () {
    return 7;
  };

  function ActionCallInstruction$b7_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b7_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T6.get(this), (
          (arg6 !== null)
             ? $thisType.T6.get(this).$Cast(arg6)
             : (
              $thisType.T6.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T6.get(this))
                 : null)
        )
      )
    );
    return null;
  };

  function ActionCallInstruction$b7_Run (frame) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 7) | 0)])), 
      JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
      JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
      JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
      JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
      JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
      JSIL.CloneParameter($thisType.T6.get(this), $thisType.T6.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
    );
    frame.StackIndex = (((frame.StackIndex | 0) - 7) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`7", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("T6")
          ])]), 
      ActionCallInstruction$b7__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b7__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b7_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b7_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      ActionCallInstruction$b7_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b7_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`7", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("T6")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`8 */ 

(function ActionCallInstruction$b8$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b8__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b8__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Action$b8.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.T6.get(this), $thisType.T7.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b8_get_ArgumentCount () {
    return 8;
  };

  function ActionCallInstruction$b8_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b8_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T6.get(this), (
          (arg6 !== null)
             ? $thisType.T6.get(this).$Cast(arg6)
             : (
              $thisType.T6.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T6.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T7.get(this), (
          (arg7 !== null)
             ? $thisType.T7.get(this).$Cast(arg7)
             : (
              $thisType.T7.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T7.get(this))
                 : null)
        )
      )
    );
    return null;
  };

  function ActionCallInstruction$b8_Run (frame) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 8) | 0)])), 
      JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 7) | 0)])), 
      JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
      JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
      JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
      JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
      JSIL.CloneParameter($thisType.T6.get(this), $thisType.T6.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
      JSIL.CloneParameter($thisType.T7.get(this), $thisType.T7.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
    );
    frame.StackIndex = (((frame.StackIndex | 0) - 8) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`8", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Action`8", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("T6"), $.GenericParameter("T7")
          ])]), 
      ActionCallInstruction$b8__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b8__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b8_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b8_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      ActionCallInstruction$b8_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b8_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Action`8", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("T6"), $.GenericParameter("T7")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ActionCallInstruction`9 */ 

(function ActionCallInstruction$b9$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ActionCallInstruction$b9__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function ActionCallInstruction$b9__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm04.System.Action$b9.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.T6.get(this), $thisType.T7.get(this), 
          $thisType.T8.get(this)
      ).__Type__);
  };

  function ActionCallInstruction$b9_get_ArgumentCount () {
    return 9;
  };

  function ActionCallInstruction$b9_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function ActionCallInstruction$b9_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T6.get(this), (
          (arg6 !== null)
             ? $thisType.T6.get(this).$Cast(arg6)
             : (
              $thisType.T6.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T6.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T7.get(this), (
          (arg7 !== null)
             ? $thisType.T7.get(this).$Cast(arg7)
             : (
              $thisType.T7.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T7.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T8.get(this), (
          (arg8 !== null)
             ? $thisType.T8.get(this).$Cast(arg8)
             : (
              $thisType.T8.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T8.get(this))
                 : null)
        )
      )
    );
    return null;
  };

  function ActionCallInstruction$b9_Run (frame) {
    this._target(
      JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 9) | 0)])), 
      JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 8) | 0)])), 
      JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 7) | 0)])), 
      JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
      JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
      JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
      JSIL.CloneParameter($thisType.T6.get(this), $thisType.T6.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
      JSIL.CloneParameter($thisType.T7.get(this), $thisType.T7.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
      JSIL.CloneParameter($thisType.T8.get(this), $thisType.T8.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
    );
    frame.StackIndex = (((frame.StackIndex | 0) - 9) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ActionCallInstruction`9", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Action`9", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("T6"), $.GenericParameter("T7"), 
            $.GenericParameter("T8")
          ])]), 
      ActionCallInstruction$b9__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b9__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      ActionCallInstruction$b9_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ActionCallInstruction$b9_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      ActionCallInstruction$b9_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ActionCallInstruction$b9_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm04.TypeRef("System.Action`9", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("T6"), $.GenericParameter("T7"), 
          $.GenericParameter("T8")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`1 */ 

(function FuncCallInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b1__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b1__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b1.Of($thisType.TRet.get(this)).__Type__);
  };

  function FuncCallInstruction$b1_get_ArgumentCount () {
    return 0;
  };

  function FuncCallInstruction$b1_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b1_Invoke$02 () {
    return this._target();
  };

  function FuncCallInstruction$b1_Run (frame) {
    frame.Data[frame.StackIndex] = JSIL.CloneParameter($thisType.TRet.get(this), this._target());
    frame.StackIndex = (((frame.StackIndex | 0) - -1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TRet"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`1", [$.GenericParameter("TRet")])]), 
      FuncCallInstruction$b1__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b1__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b1_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b1_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      JSIL.MethodSignature.Return($.Object), 
      FuncCallInstruction$b1_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b1_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`1", [$.GenericParameter("TRet")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`2 */ 

(function FuncCallInstruction$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b2__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b2__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b2.Of($thisType.T0.get(this), $thisType.TRet.get(this)).__Type__);
  };

  function FuncCallInstruction$b2_get_ArgumentCount () {
    return 1;
  };

  function FuncCallInstruction$b2_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b2_Invoke$02 (arg0) {
    return this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ));
  };

  function FuncCallInstruction$b2_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))));
    frame.StackIndex = (frame.StackIndex | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0", "TRet"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`2", [$.GenericParameter("T0"), $.GenericParameter("TRet")])]), 
      FuncCallInstruction$b2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b2__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b2_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b2_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      FuncCallInstruction$b2_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b2_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`2", [$.GenericParameter("T0"), $.GenericParameter("TRet")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`3 */ 

(function FuncCallInstruction$b3$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b3__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b3__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b3.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b3_get_ArgumentCount () {
    return 2;
  };

  function FuncCallInstruction$b3_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b3_Invoke$02 (arg0, arg1) {
    return this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ));
  };

  function FuncCallInstruction$b3_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0", "T1", "TRet"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`3", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b3__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b3__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b3_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b3_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      FuncCallInstruction$b3_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b3_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`3", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`4 */ 

(function FuncCallInstruction$b4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b4__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b4__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b4.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b4_get_ArgumentCount () {
    return 3;
  };

  function FuncCallInstruction$b4_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b4_Invoke$02 (arg0, arg1, arg2) {
    return this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ));
  };

  function FuncCallInstruction$b4_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 3) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))));
    frame.StackIndex = (((frame.StackIndex | 0) - 2) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T0", "T1", "T2", "TRet"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`4", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b4__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b4__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b4_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b4_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object
        ]), 
      FuncCallInstruction$b4_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b4_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`4", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`5 */ 

(function FuncCallInstruction$b5$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b5__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b5__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b5.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b5_get_ArgumentCount () {
    return 4;
  };

  function FuncCallInstruction$b5_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b5_Invoke$02 (arg0, arg1, arg2, arg3) {
    return this._target(JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ));
  };

  function FuncCallInstruction$b5_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 4) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))));
    frame.StackIndex = (((frame.StackIndex | 0) - 3) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "TRet"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`5", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b5__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b5__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b5_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b5_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      FuncCallInstruction$b5_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b5_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`5", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`6 */ 

(function FuncCallInstruction$b6$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b6__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b6__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b6.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b6_get_ArgumentCount () {
    return 5;
  };

  function FuncCallInstruction$b6_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b6_Invoke$02 (arg0, arg1, arg2, arg3, arg4) {
    return this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      )
    );
  };

  function FuncCallInstruction$b6_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 5) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(
        JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
        JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
        JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
        JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
        JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
      ));
    frame.StackIndex = (((frame.StackIndex | 0) - 4) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`6", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "TRet"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`6", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b6__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b6__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b6_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b6_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      FuncCallInstruction$b6_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b6_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`6", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`7 */ 

(function FuncCallInstruction$b7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b7__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b7__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b7.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b7_get_ArgumentCount () {
    return 6;
  };

  function FuncCallInstruction$b7_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b7_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5) {
    return this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      )
    );
  };

  function FuncCallInstruction$b7_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 6) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(
        JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
        JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
        JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
        JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
        JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
        JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
      ));
    frame.StackIndex = (((frame.StackIndex | 0) - 5) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "TRet"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`7", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b7__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b7__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b7_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b7_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      FuncCallInstruction$b7_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b7_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`7", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`8 */ 

(function FuncCallInstruction$b8$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b8__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b8__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b8.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.T6.get(this), $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b8_get_ArgumentCount () {
    return 7;
  };

  function FuncCallInstruction$b8_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b8_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    return this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T6.get(this), (
          (arg6 !== null)
             ? $thisType.T6.get(this).$Cast(arg6)
             : (
              $thisType.T6.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T6.get(this))
                 : null)
        )
      )
    );
  };

  function FuncCallInstruction$b8_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 7) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(
        JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 7) | 0)])), 
        JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
        JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
        JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
        JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
        JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
        JSIL.CloneParameter($thisType.T6.get(this), $thisType.T6.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
      ));
    frame.StackIndex = (((frame.StackIndex | 0) - 6) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`8", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "TRet"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`8", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("T6"), $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b8__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b8__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b8_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b8_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      FuncCallInstruction$b8_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b8_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`8", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("T6"), $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`9 */ 

(function FuncCallInstruction$b9$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b9__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b9__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm01.System.Func$b9.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.T6.get(this), $thisType.T7.get(this), 
          $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b9_get_ArgumentCount () {
    return 8;
  };

  function FuncCallInstruction$b9_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b9_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    return this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T6.get(this), (
          (arg6 !== null)
             ? $thisType.T6.get(this).$Cast(arg6)
             : (
              $thisType.T6.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T6.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T7.get(this), (
          (arg7 !== null)
             ? $thisType.T7.get(this).$Cast(arg7)
             : (
              $thisType.T7.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T7.get(this))
                 : null)
        )
      )
    );
  };

  function FuncCallInstruction$b9_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 8) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(
        JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 8) | 0)])), 
        JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 7) | 0)])), 
        JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
        JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
        JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
        JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
        JSIL.CloneParameter($thisType.T6.get(this), $thisType.T6.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
        JSIL.CloneParameter($thisType.T7.get(this), $thisType.T7.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
      ));
    frame.StackIndex = (((frame.StackIndex | 0) - 7) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`9", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "TRet"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Func`9", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("T6"), $.GenericParameter("T7"), 
            $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b9__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b9__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b9_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b9_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      FuncCallInstruction$b9_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b9_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm01.TypeRef("System.Func`9", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("T6"), $.GenericParameter("T7"), 
          $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.FuncCallInstruction`10 */ 

(function FuncCallInstruction$b10$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function FuncCallInstruction$b10__ctor$00 (target) {
    $T00().prototype._ctor.call(this);
    this._target = target;
  };

  function FuncCallInstruction$b10__ctor$01 (target) {
    $T00().prototype._ctor.call(this);
    this._target = $T02().CreateDelegate(target, $asm04.System.Func$b10.Of(
          $thisType.T0.get(this), $thisType.T1.get(this), 
          $thisType.T2.get(this), $thisType.T3.get(this), 
          $thisType.T4.get(this), $thisType.T5.get(this), 
          $thisType.T6.get(this), $thisType.T7.get(this), 
          $thisType.T8.get(this), $thisType.TRet.get(this)
      ).__Type__);
  };

  function FuncCallInstruction$b10_get_ArgumentCount () {
    return 9;
  };

  function FuncCallInstruction$b10_get_Info () {
    return $T02().GetMethodInfo(this._target);
  };

  function FuncCallInstruction$b10_Invoke$02 (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    return this._target(
      JSIL.CloneParameter($thisType.T0.get(this), (
          (arg0 !== null)
             ? $thisType.T0.get(this).$Cast(arg0)
             : (
              $thisType.T0.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T0.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T1.get(this), (
          (arg1 !== null)
             ? $thisType.T1.get(this).$Cast(arg1)
             : (
              $thisType.T1.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T1.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T2.get(this), (
          (arg2 !== null)
             ? $thisType.T2.get(this).$Cast(arg2)
             : (
              $thisType.T2.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T2.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T3.get(this), (
          (arg3 !== null)
             ? $thisType.T3.get(this).$Cast(arg3)
             : (
              $thisType.T3.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T3.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T4.get(this), (
          (arg4 !== null)
             ? $thisType.T4.get(this).$Cast(arg4)
             : (
              $thisType.T4.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T4.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T5.get(this), (
          (arg5 !== null)
             ? $thisType.T5.get(this).$Cast(arg5)
             : (
              $thisType.T5.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T5.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T6.get(this), (
          (arg6 !== null)
             ? $thisType.T6.get(this).$Cast(arg6)
             : (
              $thisType.T6.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T6.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T7.get(this), (
          (arg7 !== null)
             ? $thisType.T7.get(this).$Cast(arg7)
             : (
              $thisType.T7.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T7.get(this))
                 : null)
        )
      ), 
      JSIL.CloneParameter($thisType.T8.get(this), (
          (arg8 !== null)
             ? $thisType.T8.get(this).$Cast(arg8)
             : (
              $thisType.T8.get(this).IsValueType
                 ? JSIL.CreateInstanceOfType($thisType.T8.get(this))
                 : null)
        )
      )
    );
  };

  function FuncCallInstruction$b10_Run (frame) {
    frame.Data[(((frame.StackIndex | 0) - 9) | 0)] = JSIL.CloneParameter($thisType.TRet.get(this), this._target(
        JSIL.CloneParameter($thisType.T0.get(this), $thisType.T0.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 9) | 0)])), 
        JSIL.CloneParameter($thisType.T1.get(this), $thisType.T1.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 8) | 0)])), 
        JSIL.CloneParameter($thisType.T2.get(this), $thisType.T2.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 7) | 0)])), 
        JSIL.CloneParameter($thisType.T3.get(this), $thisType.T3.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 6) | 0)])), 
        JSIL.CloneParameter($thisType.T4.get(this), $thisType.T4.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 5) | 0)])), 
        JSIL.CloneParameter($thisType.T5.get(this), $thisType.T5.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 4) | 0)])), 
        JSIL.CloneParameter($thisType.T6.get(this), $thisType.T6.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 3) | 0)])), 
        JSIL.CloneParameter($thisType.T7.get(this), $thisType.T7.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 2) | 0)])), 
        JSIL.CloneParameter($thisType.T8.get(this), $thisType.T8.get(this).$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]))
      ));
    frame.StackIndex = (((frame.StackIndex | 0) - 8) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.CallInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.FuncCallInstruction`10", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "T0", "T1", "T2", "T3", 
        "T4", "T5", "T6", "T7", 
        "T8", "TRet"
      ], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Func`10", [
            $.GenericParameter("T0"), $.GenericParameter("T1"), 
            $.GenericParameter("T2"), $.GenericParameter("T3"), 
            $.GenericParameter("T4"), $.GenericParameter("T5"), 
            $.GenericParameter("T6"), $.GenericParameter("T7"), 
            $.GenericParameter("T8"), $.GenericParameter("TRet")
          ])]), 
      FuncCallInstruction$b10__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b10__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ArgumentCount", 
      JSIL.MethodSignature.Return($.Int32), 
      FuncCallInstruction$b10_get_ArgumentCount
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      FuncCallInstruction$b10_get_Info
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ]), 
      FuncCallInstruction$b10_Invoke$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      FuncCallInstruction$b10_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm04.TypeRef("System.Func`10", [
          $.GenericParameter("T0"), $.GenericParameter("T1"), 
          $.GenericParameter("T2"), $.GenericParameter("T3"), 
          $.GenericParameter("T4"), $.GenericParameter("T5"), 
          $.GenericParameter("T6"), $.GenericParameter("T7"), 
          $.GenericParameter("T8"), $.GenericParameter("TRet")
        ])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Info", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ArgumentCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ComparisonInstruction */ 

(function ComparisonInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function ComparisonInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ComparisonInstruction_Calculate (l, r) {
    if (!((l !== null) && (r !== null))) {
      var result = this.DoNullComparison(l, r);
    } else {
      result = this.DoCalculate(l, r);
    }
    return result;
  };

  function ComparisonInstruction_get_LiftedToNull () {
    return this.ComparisonInstruction$LiftedToNull$value;
  };

  function ComparisonInstruction_set_LiftedToNull (value) {
    this.ComparisonInstruction$LiftedToNull$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ComparisonInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ComparisonInstruction__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ComparisonInstruction_Calculate
    );

    $.Method({Static:false, Public:false}, "get_LiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ComparisonInstruction_get_LiftedToNull
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_LiftedToNull", 
      JSIL.MethodSignature.Action($.Boolean), 
      ComparisonInstruction_set_LiftedToNull
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ComparisonInstruction$LiftedToNull$value", $.Boolean)
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "LiftedToNull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.PushValueInstruction */ 

(function PushValueInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function PushValueInstruction__ctor (value) {
    $T01().prototype._ctor.call(this);
    this.value = value;
  };

  function PushValueInstruction_get_ConsumedStack () {
    return 0;
  };

  function PushValueInstruction_get_ProducedStack () {
    return 1;
  };

  function PushValueInstruction_Run (frame) {
    $S00().CallVirtual("Push", null, frame, this.value);
    return 1;
  };

  function PushValueInstruction_toString () {
    return JSIL.ConcatString("Push(", this.value, ")");
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.PushValueInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object), 
      PushValueInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      PushValueInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      PushValueInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      PushValueInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      PushValueInstruction_toString
    );

    $.Field({Static:false, Public:false}, "value", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OffsetInstruction */ 

(function OffsetInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };

  function OffsetInstruction__ctor () {
    this._offset = -2147483648;
    $T00().prototype._ctor.call(this);
  };

  function OffsetInstruction_Fixup (offset) {
    var arg_36_0 = null;
    this._offset = (offset | 0);
    var cache = this.get_Cache();
    if (!((cache === null) || 
        ((offset | 0) < 0) || ((offset | 0) >= (cache.length | 0)))) {
      if ((arg_36_0 = cache[offset]) === null) {
        cache[offset] = this;
        arg_36_0 = this;
      }
      var result = arg_36_0;
    } else {
      result = this;
    }
    return result;
  };

  function OffsetInstruction_get_Offset () {
    return this._offset;
  };

  function OffsetInstruction_ToDebugString (instructionIndex, cookie, labelIndexer, objects) {
    return JSIL.ConcatString(this.toString(), (
      ((this._offset | 0) !== -2147483648)
         ? JSIL.ConcatString(" -> ", ((((instructionIndex | 0) + (this._offset | 0)) | 0)).toString())
         : "")
    );
  };

  function OffsetInstruction_toString () {
    return JSIL.ConcatString(this.get_InstructionName(), (
      ((this._offset | 0) === -2147483648)
         ? "(?)"
         : JSIL.ConcatString("(", this._offset, ")"))
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.OffsetInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      OffsetInstruction__ctor
    );

    $.Method({Static:false, Public:true }, "Fixup", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      OffsetInstruction_Fixup
    );

    $.Method({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32), 
      OffsetInstruction_get_Offset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToDebugString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Object, 
          $asm01.TypeRef("System.Func`2", [$.Int32, $.Int32]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object])
        ]), 
      OffsetInstruction_ToDebugString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      OffsetInstruction_toString
    );

    $.Constant({Static:true , Public:false}, "Unknown", -2147483648); 
    $.Constant({Static:true , Public:false}, "CacheSize", 32); 
    $.Field({Static:false, Public:false}, "_offset", $.Int32); 
    $.Property({Static:false, Public:true }, "Offset", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.BranchFalseInstruction */ 

(function BranchFalseInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OffsetInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function BranchFalseInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BranchFalseInstruction_get_Cache () {
    if ($thisType._cache === null) {
      $thisType._cache = JSIL.Array.New($T01(), 32);
    }
    return $thisType._cache;
  };

  function BranchFalseInstruction_get_ConsumedStack () {
    return 1;
  };

  function BranchFalseInstruction_Run (frame) {
    if (!$T03().$Cast(frame.Pop())) {
      var result = (this._offset | 0);
    } else {
      result = 1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OffsetInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.BranchFalseInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BranchFalseInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Cache", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])), 
      BranchFalseInstruction_get_Cache
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchFalseInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      BranchFalseInstruction_Run
    );

    $.Field({Static:true , Public:false}, "_cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.BranchTrueInstruction */ 

(function BranchTrueInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OffsetInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function BranchTrueInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BranchTrueInstruction_get_Cache () {
    if ($thisType._cache === null) {
      $thisType._cache = JSIL.Array.New($T01(), 32);
    }
    return $thisType._cache;
  };

  function BranchTrueInstruction_get_ConsumedStack () {
    return 1;
  };

  function BranchTrueInstruction_Run (frame) {
    if ($T03().$Cast(frame.Pop())) {
      var result = (this._offset | 0);
    } else {
      result = 1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OffsetInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.BranchTrueInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BranchTrueInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Cache", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])), 
      BranchTrueInstruction_get_Cache
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchTrueInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      BranchTrueInstruction_Run
    );

    $.Field({Static:true , Public:false}, "_cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.BranchNullInstruction */ 

(function BranchNullInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OffsetInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function BranchNullInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BranchNullInstruction_get_Cache () {
    if ($thisType._cache === null) {
      $thisType._cache = JSIL.Array.New($T01(), 32);
    }
    return $thisType._cache;
  };

  function BranchNullInstruction_get_ConsumedStack () {
    return 1;
  };

  function BranchNullInstruction_Run (frame) {
    if (frame.Pop() === null) {
      var result = (this._offset | 0);
    } else {
      result = 1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OffsetInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.BranchNullInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BranchNullInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Cache", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])), 
      BranchNullInstruction_get_Cache
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchNullInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      BranchNullInstruction_Run
    );

    $.Field({Static:true , Public:false}, "_cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.CoalescingBranchInstruction */ 

(function CoalescingBranchInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OffsetInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function CoalescingBranchInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function CoalescingBranchInstruction_get_Cache () {
    if ($thisType._cache === null) {
      $thisType._cache = JSIL.Array.New($T01(), 32);
    }
    return $thisType._cache;
  };

  function CoalescingBranchInstruction_get_ConsumedStack () {
    return 1;
  };

  function CoalescingBranchInstruction_get_ProducedStack () {
    return 1;
  };

  function CoalescingBranchInstruction_Run (frame) {
    if (frame.Peek() !== null) {
      var result = (this._offset | 0);
    } else {
      result = 1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OffsetInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.CoalescingBranchInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      CoalescingBranchInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Cache", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])), 
      CoalescingBranchInstruction_get_Cache
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      CoalescingBranchInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      CoalescingBranchInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      CoalescingBranchInstruction_Run
    );

    $.Field({Static:true , Public:false}, "_cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.BranchInstruction */ 

(function BranchInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OffsetInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function BranchInstruction__ctor$00 () {
    $thisType.prototype._ctor.call(this, false, false);
  };

  function BranchInstruction__ctor$01 (hasResult, hasValue) {
    $T01().prototype._ctor.call(this);
    this._hasResult = hasResult;
    this._hasValue = hasValue;
  };

  function BranchInstruction_get_Cache () {
    var arg_65_0 = null;
    if ($thisType._caches === null) {
      $thisType._caches = JSIL.Array.New($T02(), [JSIL.Array.New($T02(), 2), JSIL.Array.New($T02(), 2)]);
    }
    if ((arg_65_0 = $thisType._caches[this.get_ConsumedStack()][this.get_ProducedStack()]) === null) {
      arg_65_0 = $thisType._caches[this.ConsumedStack][this.ProducedStack] = JSIL.Array.New($T03(), 32);
    }
    return arg_65_0;
  };

  function BranchInstruction_get_ConsumedStack () {
    return (
      this._hasValue
         ? 1
         : 0)
    ;
  };

  function BranchInstruction_get_ProducedStack () {
    return (
      this._hasResult
         ? 1
         : 0)
    ;
  };

  function BranchInstruction_Run (frame) {
    return this._offset;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OffsetInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.BranchInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BranchInstruction__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean]), 
      BranchInstruction__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Cache", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])), 
      BranchInstruction_get_Cache
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      BranchInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      BranchInstruction_Run
    );

    $.Field({Static:true , Public:false}, "_caches", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasResult", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Cache", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.IndexedBranchInstruction */ 

(function IndexedBranchInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };

  function IndexedBranchInstruction__ctor (labelIndex) {
    $T01().prototype._ctor.call(this);
    this._labelIndex = (labelIndex | 0);
  };

  function IndexedBranchInstruction_GetLabel (frame) {
    return frame.Interpreter._labels[this._labelIndex];
  };

  function IndexedBranchInstruction_ToDebugString (instructionIndex, cookie, labelIndexer, objects) {
    var targetIndex = (labelIndexer(this._labelIndex) | 0);
    return JSIL.ConcatString(this.toString(), (
      (targetIndex !== -2147483648)
         ? JSIL.ConcatString(" -> ", (targetIndex).toString())
         : "")
    );
  };

  function IndexedBranchInstruction_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T03(), [this.get_InstructionName(), "[", this._labelIndex, "]"]));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.IndexedBranchInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      IndexedBranchInstruction__ctor
    );

    $.Method({Static:false, Public:true }, "GetLabel", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      IndexedBranchInstruction_GetLabel
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToDebugString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Object, 
          $asm01.TypeRef("System.Func`2", [$.Int32, $.Int32]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object])
        ]), 
      IndexedBranchInstruction_ToDebugString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      IndexedBranchInstruction_toString
    );

    $.Constant({Static:true , Public:false}, "CacheSize", 32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_labelIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GotoInstruction */ 

(function GotoInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IndexedBranchInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };

  function GotoInstruction__ctor (targetIndex, hasResult, hasValue) {
    $T02().prototype._ctor.call(this, targetIndex);
    this._hasResult = hasResult;
    this._hasValue = hasValue;
  };

  function GotoInstruction_Create (labelIndex, hasResult, hasValue) {
    var arg_41_0 = null;
    if ((labelIndex | 0) < 32) {
      var index = (Math.imul(4, labelIndex) | ((
          hasResult
             ? 2
             : 0)
         | 0)) | ((
        hasValue
           ? 1
           : 0)
       | 0);
      if ((arg_41_0 = $thisType.Cache[index]) === null) {
        arg_41_0 = $thisType.Cache[index] = new $thisType(labelIndex, hasResult, hasValue);
      }
      var result = arg_41_0;
    } else {
      result = new $thisType(labelIndex, hasResult, hasValue);
    }
    return result;
  };

  function GotoInstruction_get_ConsumedContinuations () {
    return 0;
  };

  function GotoInstruction_get_ConsumedStack () {
    return (
      this._hasValue
         ? 1
         : 0)
    ;
  };

  function GotoInstruction_get_ProducedContinuations () {
    return 0;
  };

  function GotoInstruction_get_ProducedStack () {
    return (
      this._hasResult
         ? 1
         : 0)
    ;
  };

  function GotoInstruction_Run (frame) {
    $T04().AbortThreadIfRequested(frame, this._labelIndex);
    return frame.Goto(this._labelIndex, (
        this._hasValue
           ? frame.Pop()
           : $T04().NoValue)
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.IndexedBranchInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GotoInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Boolean
        ]), 
      GotoInstruction__ctor
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Boolean, 
          $.Boolean
        ]), 
      GotoInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedContinuations", 
      JSIL.MethodSignature.Return($.Int32), 
      GotoInstruction_get_ConsumedContinuations
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      GotoInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedContinuations", 
      JSIL.MethodSignature.Return($.Int32), 
      GotoInstruction_get_ProducedContinuations
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      GotoInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      GotoInstruction_Run
    );

    $.Constant({Static:true , Public:false}, "Variants", 4); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Cache", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 128);
      }); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasResult", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
    function GotoInstruction__cctor () {
      $thisType.Cache = JSIL.Array.New($thisType, 128);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GotoInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedContinuations", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedContinuations", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction */ 

(function EnterTryFinallyInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IndexedBranchInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function EnterTryFinallyInstruction__ctor (targetIndex) {
    $T01().prototype._ctor.call(this, targetIndex);
  };

  function EnterTryFinallyInstruction_Create (labelIndex) {
    var arg_29_0 = null;
    if ((labelIndex | 0) < 32) {
      if ((arg_29_0 = $thisType.Cache[labelIndex]) === null) {
        arg_29_0 = $thisType.Cache[labelIndex] = new $thisType(labelIndex);
      }
      var result = arg_29_0;
    } else {
      result = new $thisType(labelIndex);
    }
    return result;
  };

  function EnterTryFinallyInstruction_get_ProducedContinuations () {
    return 1;
  };

  function EnterTryFinallyInstruction_Run (frame) {
    frame.PushContinuation(this._labelIndex);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.IndexedBranchInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      EnterTryFinallyInstruction__ctor
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.Int32]), 
      EnterTryFinallyInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedContinuations", 
      JSIL.MethodSignature.Return($.Int32), 
      EnterTryFinallyInstruction_get_ProducedContinuations
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      EnterTryFinallyInstruction_Run
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Cache", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 32);
      }); 
    function EnterTryFinallyInstruction__cctor () {
      $thisType.Cache = JSIL.Array.New($thisType, 32);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EnterTryFinallyInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedContinuations", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EnterFinallyInstruction */ 

(function EnterFinallyInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function EnterFinallyInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EnterFinallyInstruction_get_ConsumedContinuations () {
    return 1;
  };

  function EnterFinallyInstruction_get_ProducedStack () {
    return 2;
  };

  function EnterFinallyInstruction_Run (frame) {
    frame.PushPendingContinuation();
    frame.RemoveContinuation();
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.EnterFinallyInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      EnterFinallyInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedContinuations", 
      JSIL.MethodSignature.Return($.Int32), 
      EnterFinallyInstruction_get_ConsumedContinuations
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      EnterFinallyInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      EnterFinallyInstruction_Run
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    function EnterFinallyInstruction__cctor () {
      $thisType.Instance = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EnterFinallyInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedContinuations", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LeaveFinallyInstruction */ 

(function LeaveFinallyInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function LeaveFinallyInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LeaveFinallyInstruction_get_ConsumedStack () {
    return 2;
  };

  function LeaveFinallyInstruction_Run (frame) {
    frame.PopPendingContinuation();
    return frame.YieldToPendingContinuation();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LeaveFinallyInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      LeaveFinallyInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LeaveFinallyInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LeaveFinallyInstruction_Run
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    function LeaveFinallyInstruction__cctor () {
      $thisType.Instance = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LeaveFinallyInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction */ 

(function EnterExceptionHandlerInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function EnterExceptionHandlerInstruction__ctor (hasValue) {
    $T01().prototype._ctor.call(this);
    this._hasValue = hasValue;
  };

  function EnterExceptionHandlerInstruction_get_ConsumedStack () {
    return (
      this._hasValue
         ? 1
         : 0)
    ;
  };

  function EnterExceptionHandlerInstruction_get_ProducedStack () {
    return 1;
  };

  function EnterExceptionHandlerInstruction_Run (frame) {
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      EnterExceptionHandlerInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      EnterExceptionHandlerInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      EnterExceptionHandlerInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      EnterExceptionHandlerInstruction_Run
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Void", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NonVoid", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
    function EnterExceptionHandlerInstruction__cctor () {
      $thisType.Void = new $thisType(false);
      $thisType.NonVoid = new $thisType(true);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EnterExceptionHandlerInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction */ 

(function LeaveExceptionHandlerInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IndexedBranchInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };

  function LeaveExceptionHandlerInstruction__ctor (labelIndex, hasValue) {
    $T02().prototype._ctor.call(this, labelIndex);
    this._hasValue = hasValue;
  };

  function LeaveExceptionHandlerInstruction_Create (labelIndex, hasValue) {
    var arg_37_0 = null;
    if ((labelIndex | 0) < 32) {
      var index = Math.imul(2, labelIndex) | ((
        hasValue
           ? 1
           : 0)
       | 0);
      if ((arg_37_0 = $thisType.Cache[index]) === null) {
        arg_37_0 = $thisType.Cache[index] = new $thisType(labelIndex, hasValue);
      }
      var result = arg_37_0;
    } else {
      result = new $thisType(labelIndex, hasValue);
    }
    return result;
  };

  function LeaveExceptionHandlerInstruction_get_ConsumedStack () {
    return (
      this._hasValue
         ? 1
         : 0)
    ;
  };

  function LeaveExceptionHandlerInstruction_get_ProducedStack () {
    return (
      this._hasValue
         ? 1
         : 0)
    ;
  };

  function LeaveExceptionHandlerInstruction_Run (frame) {
    $T04().AbortThreadIfRequested(frame, this._labelIndex);
    return (((this.GetLabel(frame).Index | 0) - (frame.InstructionIndex | 0)) | 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.IndexedBranchInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      LeaveExceptionHandlerInstruction__ctor
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Boolean]), 
      LeaveExceptionHandlerInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LeaveExceptionHandlerInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LeaveExceptionHandlerInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LeaveExceptionHandlerInstruction_Run
    );

    $.Field({Static:true , Public:false}, "Cache", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 64);
      }); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
    function LeaveExceptionHandlerInstruction__cctor () {
      $thisType.Cache = JSIL.Array.New($thisType, 64);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LeaveExceptionHandlerInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LeaveFaultInstruction */ 

(function LeaveFaultInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };

  function LeaveFaultInstruction__ctor (hasValue) {
    $T01().prototype._ctor.call(this);
    this._hasValue = hasValue;
  };

  function LeaveFaultInstruction_get_ConsumedStack () {
    return 1;
  };

  function LeaveFaultInstruction_get_ProducedStack () {
    return (
      this._hasValue
         ? 1
         : 0)
    ;
  };

  function LeaveFaultInstruction_Run (frame) {
    var handler = new JSIL.BoxedVariable(null);
    var exception = frame.Pop();
    return (frame.Interpreter).GotoHandler(frame, exception, /* ref */ handler);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LeaveFaultInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      LeaveFaultInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LeaveFaultInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LeaveFaultInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LeaveFaultInstruction_Run
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NonVoid", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Void", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
    function LeaveFaultInstruction__cctor () {
      $thisType.NonVoid = new $thisType(true);
      $thisType.Void = new $thisType(false);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LeaveFaultInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ThrowInstruction */ 

(function ThrowInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };

  function ThrowInstruction__ctor (hasResult, isRethrow) {
    $T01().prototype._ctor.call(this);
    this._hasResult = hasResult;
    this._rethrow = isRethrow;
  };

  function ThrowInstruction_get_ConsumedStack () {
    return 1;
  };

  function ThrowInstruction_get_ProducedStack () {
    return (
      this._hasResult
         ? 1
         : 0)
    ;
  };

  function ThrowInstruction_Run (frame) {
    var handler = new JSIL.BoxedVariable(null);
    var ex = $T04().$Cast(frame.Pop());
    if (this._rethrow) {
      return (frame.Interpreter).GotoHandler(frame, ex, /* ref */ handler);
    }
    throw ex;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.ThrowInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean]), 
      ThrowInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      ThrowInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      ThrowInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ThrowInstruction_Run
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Throw", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "VoidThrow", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Rethrow", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "VoidRethrow", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasResult", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_rethrow", $.Boolean); 
    function ThrowInstruction__cctor () {
      $thisType.Throw = new $thisType(true, false);
      $thisType.VoidThrow = new $thisType(false, false);
      $thisType.Rethrow = new $thisType(true, true);
      $thisType.VoidRethrow = new $thisType(false, true);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ThrowInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SwitchInstruction */ 

(function SwitchInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function SwitchInstruction__ctor (cases) {
    $T01().prototype._ctor.call(this);
    this._cases = cases;
  };

  function SwitchInstruction_get_ConsumedStack () {
    return 1;
  };

  function SwitchInstruction_get_ProducedStack () {
    return 0;
  };

  function SwitchInstruction_Run (frame) {
    var target = new JSIL.BoxedVariable(0);
    return (
      (this._cases).TryGetValue($T03().$Cast(frame.Pop()), /* ref */ target)
         ? target.get()
         : 1)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.SwitchInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32])), 
      SwitchInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      SwitchInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      SwitchInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      SwitchInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_cases", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32])); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EnterLoopInstruction */ 

(function EnterLoopInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Linq.Expressions.LoopExpression)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariables)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoopCompiler)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CompiledLoopInstruction)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Threading.ThreadPool)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Threading.WaitCallback)) ();
  };

  function EnterLoopInstruction__ctor (loop, locals, compilationThreshold, instructionIndex) {
    $T03().prototype._ctor.call(this);
    this._loop = loop;
    this._variables = locals.CopyLocals();
    this._closureVariables = locals.get_ClosureVariables();
    this._compilationThreshold = (compilationThreshold | 0);
    this._instructionIndex = (instructionIndex | 0);
  };

  function EnterLoopInstruction_Compile (frameObj) {
    var flag = new JSIL.BoxedVariable(false);
    if (!this.get_Compiled()) {
      flag.set(false);
      try {
        $T06().Enter(this, /* ref */ flag);
        if (!this.get_Compiled()) {
          var frame = $T07().$Cast(frameObj);
          var compiler = new ($T08())(this._loop, (frame.Interpreter).get_LabelMapping(), this._variables, this._closureVariables, this._instructionIndex, this._loopEnd);
          var instructions = (frame.Interpreter).get_Instructions().Instructions;
          $T0B().Exchange$b1($T03())(/* ref */ new JSIL.ArrayElementReference(instructions, this._instructionIndex), new ($T0C())(compiler.CreateDelegate()));
          this._loop = null;
          this._variables = null;
          this._closureVariables = null;
        }
      } finally {
        if (flag.get()) {
          $T06().Exit(this);
        }
      }
    }
  };

  function EnterLoopInstruction_FinishLoop (loopEnd) {
    this._loopEnd = (loopEnd | 0);
  };

  function EnterLoopInstruction_get_Compiled () {
    return (this._loop === null);
  };

  function EnterLoopInstruction_Run (frame) {
    var $temp00;
    if ((($temp00 = (this._compilationThreshold | 0), 
        this._compilationThreshold = (((this._compilationThreshold | 0) - 1) | 0), 
        $temp00) | 0) === 0) {
      if ((frame.Interpreter).get_CompileSynchronously()) {
        this.Compile(frame);
      } else {
        $T0D().QueueUserWorkItem($T0E().New(this, $thisType.prototype.Compile, function () { return JSIL.GetMethodInfo($thisType, "Compile", JSIL.MethodSignature.Action($.Object), false); }), frame);
      }
    }
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.EnterLoopInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.LoopExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables"), 
          $.Int32, $.Int32
        ]), 
      EnterLoopInstruction__ctor
    );

    $.Method({Static:false, Public:false}, "Compile", 
      JSIL.MethodSignature.Action($.Object), 
      EnterLoopInstruction_Compile
    );

    $.Method({Static:false, Public:false}, "FinishLoop", 
      JSIL.MethodSignature.Action($.Int32), 
      EnterLoopInstruction_FinishLoop
    );

    $.Method({Static:false, Public:false}, "get_Compiled", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnterLoopInstruction_get_Compiled
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      EnterLoopInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instructionIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "_variables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])); 
    $.Field({Static:false, Public:false}, "_closureVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])); 
    $.Field({Static:false, Public:false}, "_loop", $asm04.TypeRef("System.Linq.Expressions.LoopExpression")); 
    $.Field({Static:false, Public:false}, "_loopEnd", $.Int32); 
    $.Field({Static:false, Public:false}, "_compilationThreshold", $.Int32); 
    $.Property({Static:false, Public:false}, "Compiled", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.CompiledLoopInstruction */ 

(function CompiledLoopInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Func$b4.Of(
        System.Array.Of($asm01.System.Object), System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)), 
        $asm00.Microsoft.Scripting.Interpreter.InterpretedFrame, $asm01.System.Int32
    ))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function CompiledLoopInstruction__ctor (compiledLoop) {
    $T01().prototype._ctor.call(this);
    this._compiledLoop = compiledLoop;
  };

  function CompiledLoopInstruction_Run (frame) {
    return this._compiledLoop(frame.Data, frame.Closure, frame);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.CompiledLoopInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Func`4", [
            $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])]), 
            $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $.Int32
          ])), 
      CompiledLoopInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      CompiledLoopInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_compiledLoop", $asm01.TypeRef("System.Func`4", [
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])]), 
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $.Int32
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction */ 

(function DivInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivUInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivUInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivInt64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivUInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivSingle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction_DivDouble)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function DivInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T03())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T04())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T05())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T06())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T07())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T08())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T09())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0A())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0B().get_Unreachable();

    }
    return result;
  };

  function DivInstruction_get_ConsumedStack () {
    return 2;
  };

  function DivInstruction_get_ProducedStack () {
    return 1;
  };

  function DivInstruction_toString () {
    return "Div()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      DivInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      DivInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      DivInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      DivInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivInt32 */ 

(function DivInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function DivInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivInt32_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = $T03().Int32ToObject((($T04().$Cast(i) / $T04().$Cast(r)) | 0));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivInt16 */ 

(function DivInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function DivInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivInt16_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = ((($T03().$Cast(i) / $T03().$Cast(r)) + 0x8000 & 0xFFFF) - 0x8000);
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivInt64 */ 

(function DivInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function DivInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivInt64_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = $T03().op_Division($T03().$Cast(i), $T03().$Cast(r));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivInt64__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivInt64_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivUInt16 */ 

(function DivUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function DivUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivUInt16_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = (($T03().$Cast(i) / $T03().$Cast(r)) & 0xFFFF);
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivUInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivUInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivUInt32 */ 

(function DivUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function DivUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivUInt32_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = (($T03().$Cast(i) / $T03().$Cast(r)) >>> 0);
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivUInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivUInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivUInt64 */ 

(function DivUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function DivUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivUInt64_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = $T03().op_Division($T03().$Cast(i), $T03().$Cast(r));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivUInt64__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivUInt64_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivSingle */ 

(function DivSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function DivSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivSingle_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = +(($T03().$Cast(i) / $T03().$Cast(r)));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivSingle__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivSingle_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DivInstruction+DivDouble */ 

(function DivDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function DivDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DivDouble_Run (frame) {
    var i = frame.Data[(((frame.StackIndex | 0) - 2) | 0)];
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 2) | 0)] = +(($T03().$Cast(i) / $T03().$Cast(r)));
    frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.DivInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.DivInstruction+DivDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DivDouble__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DivDouble_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction */ 

(function EqualInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ComparisonInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Enum)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualReference)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualBoolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualChar)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualSByte)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualByte)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualInt16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualInt32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualInt64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualSingle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction_EqualDouble)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function EqualInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualInstruction_Create (type) {
    var arg_1A9_0 = null, arg_72_0 = null, arg_C0_0 = null, arg_8C_0 = null, arg_A6_0 = null, arg_DA_0 = null, arg_128_0 = null, arg_F4_0 = null, arg_142_0 = null, arg_10E_0 = null, arg_159_0 = null, arg_170_0 = null, arg_187_0 = null;
    switch (($T03().GetTypeCode((
            $T03().IsEnum(type)
               ? $T04().GetUnderlyingType(type)
               : type)
        )).valueOf()) {
      case 1: 
        if (!$T03().IsValueType(type)) {
          if ((arg_1A9_0 = $thisType._Reference) === null) {
            arg_1A9_0 = $thisType._Reference = new ($T05())();
          }
          var result = arg_1A9_0;
          return result;
        }
        throw $S00().Construct();

      case 3: 
        if ((arg_72_0 = $thisType._Boolean) === null) {
          arg_72_0 = $thisType._Boolean = new ($T07())();
        }
        result = arg_72_0;
        return result;

      case 4: 
        if ((arg_C0_0 = $thisType._Char) === null) {
          arg_C0_0 = $thisType._Char = new ($T08())();
        }
        result = arg_C0_0;
        return result;

      case 5: 
        if ((arg_8C_0 = $thisType._SByte) === null) {
          arg_8C_0 = $thisType._SByte = new ($T09())();
        }
        result = arg_8C_0;
        return result;

      case 6: 
        if ((arg_A6_0 = $thisType._Byte) === null) {
          arg_A6_0 = $thisType._Byte = new ($T0A())();
        }
        result = arg_A6_0;
        return result;

      case 7: 
        if ((arg_DA_0 = $thisType._Int16) === null) {
          arg_DA_0 = $thisType._Int16 = new ($T0B())();
        }
        result = arg_DA_0;
        return result;

      case 8: 
        if ((arg_128_0 = $thisType._UInt16) === null) {
          arg_128_0 = $thisType._UInt16 = new ($T0B())();
        }
        result = arg_128_0;
        return result;

      case 9: 
        if ((arg_F4_0 = $thisType._Int32) === null) {
          arg_F4_0 = $thisType._Int32 = new ($T0C())();
        }
        result = arg_F4_0;
        return result;

      case 10: 
        if ((arg_142_0 = $thisType._UInt32) === null) {
          arg_142_0 = $thisType._UInt32 = new ($T0C())();
        }
        result = arg_142_0;
        return result;

      case 11: 
        if ((arg_10E_0 = $thisType._Int64) === null) {
          arg_10E_0 = $thisType._Int64 = new ($T0D())();
        }
        result = arg_10E_0;
        return result;

      case 12: 
        if ((arg_159_0 = $thisType._UInt64) === null) {
          arg_159_0 = $thisType._UInt64 = new ($T0D())();
        }
        result = arg_159_0;
        return result;

      case 13: 
        if ((arg_170_0 = $thisType._Single) === null) {
          arg_170_0 = $thisType._Single = new ($T0E())();
        }
        result = arg_170_0;
        return result;

      case 14: 
        if ((arg_187_0 = $thisType._Double) === null) {
          arg_187_0 = $thisType._Double = new ($T0F())();
        }
        result = arg_187_0;
        return result;

    }
    throw $S00().Construct();
  };

  function EqualInstruction_CreateLifted (type) {
    var arg_76_0 = null, arg_E5_0 = null, arg_9B_0 = null, arg_C0_0 = null, arg_10D_0 = null, arg_185_0 = null, arg_135_0 = null, arg_1AD_0 = null, arg_15D_0 = null, arg_1D2_0 = null, arg_1F7_0 = null, arg_21C_0 = null;
    switch (($T03().GetTypeCode((
            $T03().IsEnum(type)
               ? $T04().GetUnderlyingType(type)
               : type)
        )).valueOf()) {
      case 3: 
        if ((arg_76_0 = $thisType._BooleanLifted) === null) {
          arg_76_0 = $thisType._BooleanLifted = (new ($T07())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        var result = arg_76_0;
        break;

      case 4: 
        if ((arg_E5_0 = $thisType._CharLifted) === null) {
          arg_E5_0 = $thisType._CharLifted = (new ($T08())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_E5_0;
        break;

      case 5: 
        if ((arg_9B_0 = $thisType._SByteLifted) === null) {
          arg_9B_0 = $thisType._SByteLifted = (new ($T09())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_9B_0;
        break;

      case 6: 
        if ((arg_C0_0 = $thisType._ByteLifted) === null) {
          arg_C0_0 = $thisType._ByteLifted = (new ($T0A())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_C0_0;
        break;

      case 7: 
        if ((arg_10D_0 = $thisType._Int16Lifted) === null) {
          arg_10D_0 = $thisType._Int16Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_10D_0;
        break;

      case 8: 
        if ((arg_185_0 = $thisType._UInt16Lifted) === null) {
          arg_185_0 = $thisType._UInt16Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_185_0;
        break;

      case 9: 
        if ((arg_135_0 = $thisType._Int32Lifted) === null) {
          arg_135_0 = $thisType._Int32Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_135_0;
        break;

      case 10: 
        if ((arg_1AD_0 = $thisType._UInt32Lifted) === null) {
          arg_1AD_0 = $thisType._UInt32Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1AD_0;
        break;

      case 11: 
        if ((arg_15D_0 = $thisType._Int64Lifted) === null) {
          arg_15D_0 = $thisType._Int64Lifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_15D_0;
        break;

      case 12: 
        if ((arg_1D2_0 = $thisType._UInt64Lifted) === null) {
          arg_1D2_0 = $thisType._UInt64Lifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1D2_0;
        break;

      case 13: 
        if ((arg_1F7_0 = $thisType._SingleLifted) === null) {
          arg_1F7_0 = $thisType._SingleLifted = (new ($T0E())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1F7_0;
        break;

      case 14: 
        if ((arg_21C_0 = $thisType._DoubleLifted) === null) {
          arg_21C_0 = $thisType._DoubleLifted = (new ($T0F())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_21C_0;
        break;

      default: 
        throw $T10().get_Unreachable();

    }
    return result;
  };

  function EqualInstruction_DoNullComparison (l, r) {
    return (
      this.ComparisonInstruction$LiftedToNull$value
         ? null
         : (l === r))
    ;
  };

  function EqualInstruction_toString () {
    return "Equal()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ComparisonInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      EqualInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      EqualInstruction_CreateLifted
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoNullComparison", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualInstruction_DoNullComparison
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      EqualInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Reference", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Boolean", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Char", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Byte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_BooleanLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_CharLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualBoolean */ 

(function EqualBoolean$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function EqualBoolean__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualBoolean_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualBoolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualBoolean__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualBoolean_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualSByte */ 

(function EqualSByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };

  function EqualSByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualSByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualSByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualSByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualSByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualInt16 */ 

(function EqualInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function EqualInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualChar */ 

(function EqualChar$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function EqualChar__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualChar_DoCalculate (l, r) {
    return ((($T02().$Cast(l)).charCodeAt(0) | 0) === (($T02().$Cast(r)).charCodeAt(0) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualChar", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualChar__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualChar_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualInt32 */ 

(function EqualInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function EqualInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualInt64 */ 

(function EqualInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function EqualInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualInt64_DoCalculate (l, r) {
    return $T02().op_Equality($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualByte */ 

(function EqualByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function EqualByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualUInt16 */ 

(function EqualUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function EqualUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualUInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualUInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualUInt32 */ 

(function EqualUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function EqualUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualUInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualUInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualUInt64 */ 

(function EqualUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function EqualUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualUInt64_DoCalculate (l, r) {
    return $T02().op_Equality($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualUInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualSingle */ 

(function EqualSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function EqualSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualSingle_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualSingle_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualDouble */ 

(function EqualDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function EqualDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualDouble_DoCalculate (l, r) {
    return ($T02().$Cast(l) === $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualDouble_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.EqualInstruction+EqualReference */ 

(function EqualReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function EqualReference__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EqualReference_Calculate (l, r) {
    return (l === r);
  };

  function EqualReference_DoCalculate (l, r) {
    throw $T02().get_Unreachable();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.EqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.EqualInstruction+EqualReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      EqualReference__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualReference_Calculate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      EqualReference_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction */ 

(function LoadStaticFieldInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")]))) ();
  };

  function LoadStaticFieldInstruction__ctor (field) {
    $T01().prototype._ctor.call(this);
    this._field = field;
  };

  function LoadStaticFieldInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadStaticFieldInstruction_Run (frame) {
    $S00().CallVirtual("Push", null, frame, $S01().CallVirtual("GetValue", null, this._field, null));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.FieldInfo")), 
      LoadStaticFieldInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadStaticFieldInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadStaticFieldInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadFieldInstruction */ 

(function LoadFieldInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")]))) ();
  };

  function LoadFieldInstruction__ctor (field) {
    $T01().prototype._ctor.call(this);
    this._field = field;
  };

  function LoadFieldInstruction_get_ConsumedStack () {
    return 1;
  };

  function LoadFieldInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadFieldInstruction_Run (frame) {
    $S00().CallVirtual("Push", null, frame, $S01().CallVirtual("GetValue", null, this._field, frame.Pop()));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadFieldInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.FieldInfo")), 
      LoadFieldInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadFieldInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadFieldInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadFieldInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.StoreFieldInstruction */ 

(function StoreFieldInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function StoreFieldInstruction__ctor (field) {
    $T01().prototype._ctor.call(this);
    this._field = field;
  };

  function StoreFieldInstruction_get_ConsumedStack () {
    return 2;
  };

  function StoreFieldInstruction_get_ProducedStack () {
    return 0;
  };

  function StoreFieldInstruction_Run (frame) {
    var value = frame.Pop();
    var self = frame.Pop();
    (this._field).SetValue(self, value);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.StoreFieldInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.FieldInfo")), 
      StoreFieldInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreFieldInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreFieldInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      StoreFieldInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction */ 

(function StoreStaticFieldInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function StoreStaticFieldInstruction__ctor (field) {
    $T01().prototype._ctor.call(this);
    this._field = field;
  };

  function StoreStaticFieldInstruction_get_ConsumedStack () {
    return 1;
  };

  function StoreStaticFieldInstruction_get_ProducedStack () {
    return 0;
  };

  function StoreStaticFieldInstruction_Run (frame) {
    var value = frame.Pop();
    (this._field).SetValue(null, value);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.FieldInfo")), 
      StoreStaticFieldInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreStaticFieldInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreStaticFieldInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      StoreStaticFieldInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction */ 

(function GreaterThanInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ComparisonInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanChar)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanSByte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanByte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanUInt16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanUInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanInt64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanUInt64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanSingle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction_GreaterThanDouble)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function GreaterThanInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanInstruction_Create (type) {
    var arg_89_0 = null, arg_55_0 = null, arg_6F_0 = null, arg_A3_0 = null, arg_EE_0 = null, arg_BD_0 = null, arg_105_0 = null, arg_D7_0 = null, arg_11C_0 = null, arg_133_0 = null, arg_14A_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_89_0 = $thisType._Char) === null) {
          arg_89_0 = $thisType._Char = new ($T04())();
        }
        var result = arg_89_0;
        break;

      case 5: 
        if ((arg_55_0 = $thisType._SByte) === null) {
          arg_55_0 = $thisType._SByte = new ($T05())();
        }
        result = arg_55_0;
        break;

      case 6: 
        if ((arg_6F_0 = $thisType._Byte) === null) {
          arg_6F_0 = $thisType._Byte = new ($T06())();
        }
        result = arg_6F_0;
        break;

      case 7: 
        if ((arg_A3_0 = $thisType._Int16) === null) {
          arg_A3_0 = $thisType._Int16 = new ($T07())();
        }
        result = arg_A3_0;
        break;

      case 8: 
        if ((arg_EE_0 = $thisType._UInt16) === null) {
          arg_EE_0 = $thisType._UInt16 = new ($T08())();
        }
        result = arg_EE_0;
        break;

      case 9: 
        if ((arg_BD_0 = $thisType._Int32) === null) {
          arg_BD_0 = $thisType._Int32 = new ($T09())();
        }
        result = arg_BD_0;
        break;

      case 10: 
        if ((arg_105_0 = $thisType._UInt32) === null) {
          arg_105_0 = $thisType._UInt32 = new ($T0A())();
        }
        result = arg_105_0;
        break;

      case 11: 
        if ((arg_D7_0 = $thisType._Int64) === null) {
          arg_D7_0 = $thisType._Int64 = new ($T0B())();
        }
        result = arg_D7_0;
        break;

      case 12: 
        if ((arg_11C_0 = $thisType._UInt64) === null) {
          arg_11C_0 = $thisType._UInt64 = new ($T0C())();
        }
        result = arg_11C_0;
        break;

      case 13: 
        if ((arg_133_0 = $thisType._Single) === null) {
          arg_133_0 = $thisType._Single = new ($T0D())();
        }
        result = arg_133_0;
        break;

      case 14: 
        if ((arg_14A_0 = $thisType._Double) === null) {
          arg_14A_0 = $thisType._Double = new ($T0E())();
        }
        result = arg_14A_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function GreaterThanInstruction_CreateLifted (type) {
    var arg_AB_0 = null, arg_61_0 = null, arg_86_0 = null, arg_D0_0 = null, arg_148_0 = null, arg_F8_0 = null, arg_170_0 = null, arg_120_0 = null, arg_195_0 = null, arg_1BA_0 = null, arg_1DF_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_AB_0 = $thisType._CharLifted) === null) {
          arg_AB_0 = $thisType._CharLifted = (new ($T04())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        var result = arg_AB_0;
        break;

      case 5: 
        if ((arg_61_0 = $thisType._SByteLifted) === null) {
          arg_61_0 = $thisType._SByteLifted = (new ($T05())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_61_0;
        break;

      case 6: 
        if ((arg_86_0 = $thisType._ByteLifted) === null) {
          arg_86_0 = $thisType._ByteLifted = (new ($T06())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_86_0;
        break;

      case 7: 
        if ((arg_D0_0 = $thisType._Int16Lifted) === null) {
          arg_D0_0 = $thisType._Int16Lifted = (new ($T07())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_D0_0;
        break;

      case 8: 
        if ((arg_148_0 = $thisType._UInt16Lifted) === null) {
          arg_148_0 = $thisType._UInt16Lifted = (new ($T08())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_148_0;
        break;

      case 9: 
        if ((arg_F8_0 = $thisType._Int32Lifted) === null) {
          arg_F8_0 = $thisType._Int32Lifted = (new ($T09())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_F8_0;
        break;

      case 10: 
        if ((arg_170_0 = $thisType._UInt32Lifted) === null) {
          arg_170_0 = $thisType._UInt32Lifted = (new ($T0A())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_170_0;
        break;

      case 11: 
        if ((arg_120_0 = $thisType._Int64Lifted) === null) {
          arg_120_0 = $thisType._Int64Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_120_0;
        break;

      case 12: 
        if ((arg_195_0 = $thisType._UInt64Lifted) === null) {
          arg_195_0 = $thisType._UInt64Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_195_0;
        break;

      case 13: 
        if ((arg_1BA_0 = $thisType._SingleLifted) === null) {
          arg_1BA_0 = $thisType._SingleLifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1BA_0;
        break;

      case 14: 
        if ((arg_1DF_0 = $thisType._DoubleLifted) === null) {
          arg_1DF_0 = $thisType._DoubleLifted = (new ($T0E())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1DF_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function GreaterThanInstruction_DoNullComparison (l, r) {
    return (
      this.ComparisonInstruction$LiftedToNull$value
         ? null
         : false)
    ;
  };

  function GreaterThanInstruction_toString () {
    return "GreaterThan()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ComparisonInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      GreaterThanInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      GreaterThanInstruction_CreateLifted
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoNullComparison", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanInstruction_DoNullComparison
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      GreaterThanInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_SByte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Char", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Byte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_CharLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanSByte */ 

(function GreaterThanSByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };

  function GreaterThanSByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanSByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanSByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanSByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanSByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanInt16 */ 

(function GreaterThanInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function GreaterThanInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanChar */ 

(function GreaterThanChar$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function GreaterThanChar__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanChar_DoCalculate (l, r) {
    return ((($T02().$Cast(l)).charCodeAt(0) | 0) > (($T02().$Cast(r)).charCodeAt(0) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanChar", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanChar__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanChar_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanInt32 */ 

(function GreaterThanInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function GreaterThanInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanInt64 */ 

(function GreaterThanInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function GreaterThanInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanInt64_DoCalculate (l, r) {
    return $T02().op_GreaterThan($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanByte */ 

(function GreaterThanByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function GreaterThanByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanUInt16 */ 

(function GreaterThanUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function GreaterThanUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanUInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanUInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanUInt32 */ 

(function GreaterThanUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function GreaterThanUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanUInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanUInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanUInt64 */ 

(function GreaterThanUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function GreaterThanUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanUInt64_DoCalculate (l, r) {
    return $T02().op_GreaterThan($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanUInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanSingle */ 

(function GreaterThanSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function GreaterThanSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanSingle_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanSingle_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanDouble */ 

(function GreaterThanDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function GreaterThanDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanDouble_DoCalculate (l, r) {
    return ($T02().$Cast(l) > $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanInstruction+GreaterThanDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanDouble_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction */ 

(function GreaterThanOrEqualInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ComparisonInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualChar)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualSByte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualByte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualUInt16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualUInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualInt64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualUInt64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualSingle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction_GreaterThanOrEqualDouble)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function GreaterThanOrEqualInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualInstruction_Create (type) {
    var arg_89_0 = null, arg_55_0 = null, arg_6F_0 = null, arg_A3_0 = null, arg_EE_0 = null, arg_BD_0 = null, arg_105_0 = null, arg_D7_0 = null, arg_11C_0 = null, arg_133_0 = null, arg_14A_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_89_0 = $thisType._Char) === null) {
          arg_89_0 = $thisType._Char = new ($T04())();
        }
        var result = arg_89_0;
        break;

      case 5: 
        if ((arg_55_0 = $thisType._SByte) === null) {
          arg_55_0 = $thisType._SByte = new ($T05())();
        }
        result = arg_55_0;
        break;

      case 6: 
        if ((arg_6F_0 = $thisType._Byte) === null) {
          arg_6F_0 = $thisType._Byte = new ($T06())();
        }
        result = arg_6F_0;
        break;

      case 7: 
        if ((arg_A3_0 = $thisType._Int16) === null) {
          arg_A3_0 = $thisType._Int16 = new ($T07())();
        }
        result = arg_A3_0;
        break;

      case 8: 
        if ((arg_EE_0 = $thisType._UInt16) === null) {
          arg_EE_0 = $thisType._UInt16 = new ($T08())();
        }
        result = arg_EE_0;
        break;

      case 9: 
        if ((arg_BD_0 = $thisType._Int32) === null) {
          arg_BD_0 = $thisType._Int32 = new ($T09())();
        }
        result = arg_BD_0;
        break;

      case 10: 
        if ((arg_105_0 = $thisType._UInt32) === null) {
          arg_105_0 = $thisType._UInt32 = new ($T0A())();
        }
        result = arg_105_0;
        break;

      case 11: 
        if ((arg_D7_0 = $thisType._Int64) === null) {
          arg_D7_0 = $thisType._Int64 = new ($T0B())();
        }
        result = arg_D7_0;
        break;

      case 12: 
        if ((arg_11C_0 = $thisType._UInt64) === null) {
          arg_11C_0 = $thisType._UInt64 = new ($T0C())();
        }
        result = arg_11C_0;
        break;

      case 13: 
        if ((arg_133_0 = $thisType._Single) === null) {
          arg_133_0 = $thisType._Single = new ($T0D())();
        }
        result = arg_133_0;
        break;

      case 14: 
        if ((arg_14A_0 = $thisType._Double) === null) {
          arg_14A_0 = $thisType._Double = new ($T0E())();
        }
        result = arg_14A_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function GreaterThanOrEqualInstruction_CreateLifted (type) {
    var arg_AB_0 = null, arg_61_0 = null, arg_86_0 = null, arg_D0_0 = null, arg_148_0 = null, arg_F8_0 = null, arg_170_0 = null, arg_120_0 = null, arg_195_0 = null, arg_1BA_0 = null, arg_1DF_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_AB_0 = $thisType._CharLifted) === null) {
          arg_AB_0 = $thisType._CharLifted = (new ($T04())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        var result = arg_AB_0;
        break;

      case 5: 
        if ((arg_61_0 = $thisType._SByteLifted) === null) {
          arg_61_0 = $thisType._SByteLifted = (new ($T05())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_61_0;
        break;

      case 6: 
        if ((arg_86_0 = $thisType._ByteLifted) === null) {
          arg_86_0 = $thisType._ByteLifted = (new ($T06())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_86_0;
        break;

      case 7: 
        if ((arg_D0_0 = $thisType._Int16Lifted) === null) {
          arg_D0_0 = $thisType._Int16Lifted = (new ($T07())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_D0_0;
        break;

      case 8: 
        if ((arg_148_0 = $thisType._UInt16Lifted) === null) {
          arg_148_0 = $thisType._UInt16Lifted = (new ($T08())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_148_0;
        break;

      case 9: 
        if ((arg_F8_0 = $thisType._Int32Lifted) === null) {
          arg_F8_0 = $thisType._Int32Lifted = (new ($T09())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_F8_0;
        break;

      case 10: 
        if ((arg_170_0 = $thisType._UInt32Lifted) === null) {
          arg_170_0 = $thisType._UInt32Lifted = (new ($T0A())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_170_0;
        break;

      case 11: 
        if ((arg_120_0 = $thisType._Int64Lifted) === null) {
          arg_120_0 = $thisType._Int64Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_120_0;
        break;

      case 12: 
        if ((arg_195_0 = $thisType._UInt64Lifted) === null) {
          arg_195_0 = $thisType._UInt64Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_195_0;
        break;

      case 13: 
        if ((arg_1BA_0 = $thisType._SingleLifted) === null) {
          arg_1BA_0 = $thisType._SingleLifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1BA_0;
        break;

      case 14: 
        if ((arg_1DF_0 = $thisType._DoubleLifted) === null) {
          arg_1DF_0 = $thisType._DoubleLifted = (new ($T0E())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1DF_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function GreaterThanOrEqualInstruction_DoNullComparison (l, r) {
    return (
      this.ComparisonInstruction$LiftedToNull$value
         ? null
         : false)
    ;
  };

  function GreaterThanOrEqualInstruction_toString () {
    return "GreaterThanOrEqual()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ComparisonInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      GreaterThanOrEqualInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      GreaterThanOrEqualInstruction_CreateLifted
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoNullComparison", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualInstruction_DoNullComparison
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      GreaterThanOrEqualInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_SByte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Char", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Byte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_CharLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualSByte */ 

(function GreaterThanOrEqualSByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };

  function GreaterThanOrEqualSByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualSByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualSByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualSByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualSByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualInt16 */ 

(function GreaterThanOrEqualInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function GreaterThanOrEqualInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualChar */ 

(function GreaterThanOrEqualChar$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function GreaterThanOrEqualChar__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualChar_DoCalculate (l, r) {
    return ((($T02().$Cast(l)).charCodeAt(0) | 0) >= (($T02().$Cast(r)).charCodeAt(0) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualChar", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualChar__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualChar_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualInt32 */ 

(function GreaterThanOrEqualInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function GreaterThanOrEqualInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualInt64 */ 

(function GreaterThanOrEqualInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function GreaterThanOrEqualInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualInt64_DoCalculate (l, r) {
    return $T02().op_GreaterThanOrEqual($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualByte */ 

(function GreaterThanOrEqualByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function GreaterThanOrEqualByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualUInt16 */ 

(function GreaterThanOrEqualUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function GreaterThanOrEqualUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualUInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualUInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualUInt32 */ 

(function GreaterThanOrEqualUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function GreaterThanOrEqualUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualUInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualUInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualUInt64 */ 

(function GreaterThanOrEqualUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function GreaterThanOrEqualUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualUInt64_DoCalculate (l, r) {
    return $T02().op_GreaterThanOrEqual($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualUInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualSingle */ 

(function GreaterThanOrEqualSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function GreaterThanOrEqualSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualSingle_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualSingle_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualDouble */ 

(function GreaterThanOrEqualDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function GreaterThanOrEqualDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GreaterThanOrEqualDouble_DoCalculate (l, r) {
    return ($T02().$Cast(l) >= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction+GreaterThanOrEqualDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GreaterThanOrEqualDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      GreaterThanOrEqualDouble_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Scripting.Interpreter.IInstructionProvider */ 

JSIL.MakeInterface(
  "Microsoft.Scripting.Interpreter.IInstructionProvider", true, [], function ($) {
    $.Method({}, "AddInstructions", JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler")));
  }, []);

/* class Microsoft.Scripting.Interpreter.InstructionFactory */ 

(function InstructionFactory$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm00.Microsoft.Scripting.Interpreter.InstructionFactory))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Boolean))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.SByte))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Int16))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.UInt16))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Int32))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.UInt32))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Int64))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.UInt64))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Single))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Double))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Char))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.String))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionFactory")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")]))) ();
  };

  function InstructionFactory__ctor () {
  };

  function InstructionFactory_GetFactory (type) {
    var factory = new JSIL.BoxedVariable(null);
    var factories = null;
    if ($thisType._factories === null) {
      $thisType._factories = ($S00().Construct()).__Initialize__([[$T02().__Type__, $T03().Factory], [$T04().__Type__, $T05().Factory], [$T06().__Type__, $T07().Factory], [$T08().__Type__, $T09().Factory], [$T0A().__Type__, $T0B().Factory], [$T0C().__Type__, $T0D().Factory], [$T0E().__Type__, $T0F().Factory], [$T10().__Type__, $T11().Factory], [$T12().__Type__, $T13().Factory], [$T14().__Type__, $T15().Factory], [$T16().__Type__, $T17().Factory], [$T18().__Type__, $T19().Factory], [$T1A().__Type__, $T1B().Factory], [$T1C().__Type__, $T1D().Factory]]);
    }
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T1E().Enter(factories = $thisType._factories, /* ref */ flag);
      if (!$thisType._factories.TryGetValue(type, /* ref */ factory)) {
        factory.set($thisType.$Cast($S01().CallVirtual("GetValue", null, $T20().GetDeclaredField($T21().__Type__.MakeGenericType(JSIL.Array.New($T00(), [type])), "Factory"), null)));
        $thisType._factories.set_Item(type, factory.get());
      }
    } finally {
      if (flag.get()) {
        $T1E().Exit(factories);
      }
    }
    return factory;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      InstructionFactory__ctor
    );

    $.Method({Static:true , Public:false}, "GetFactory", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Type")]), 
      InstructionFactory_GetFactory
    );

    $.Field({Static:true , Public:false}, "_factories", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $.Type])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InstructionFactory`1 */ 

(function InstructionFactory$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Type)) ();
  };

  function InstructionFactory$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function InstructionFactory$b1_DefaultValue () {
    var arg_19_0 = null;
    if ((arg_19_0 = this._defaultValue) === null) {
      arg_19_0 = this._defaultValue = new ($asm00.Microsoft.Scripting.Interpreter.DefaultValueInstruction$b1.Of($thisType.T.get(this))) ();
    }
    return arg_19_0;
  };

  function InstructionFactory$b1_GetArrayItem () {
    var arg_19_0 = null;
    if ((arg_19_0 = this._getArrayItem) === null) {
      arg_19_0 = this._getArrayItem = new ($asm00.Microsoft.Scripting.Interpreter.GetArrayItemInstruction$b1.Of($thisType.T.get(this))) ();
    }
    return arg_19_0;
  };

  function InstructionFactory$b1_NewArray () {
    var arg_19_0 = null;
    if ((arg_19_0 = this._newArray) === null) {
      arg_19_0 = this._newArray = new ($asm00.Microsoft.Scripting.Interpreter.NewArrayInstruction$b1.Of($thisType.T.get(this))) ();
    }
    return arg_19_0;
  };

  function InstructionFactory$b1_NewArrayInit (elementCount) {
    return new ($asm00.Microsoft.Scripting.Interpreter.NewArrayInitInstruction$b1.Of($thisType.T.get(this))) (elementCount);
  };

  function InstructionFactory$b1_SetArrayItem () {
    var arg_19_0 = null;
    if ((arg_19_0 = this._setArrayItem) === null) {
      arg_19_0 = this._setArrayItem = new ($asm00.Microsoft.Scripting.Interpreter.SetArrayItemInstruction$b1.Of($thisType.T.get(this))) ();
    }
    return arg_19_0;
  };

  function InstructionFactory$b1_TypeAs () {
    var arg_19_0 = null;
    if ((arg_19_0 = this._typeAs) === null) {
      arg_19_0 = this._typeAs = new ($asm00.Microsoft.Scripting.Interpreter.TypeAsInstruction$b1.Of($thisType.T.get(this))) ();
    }
    return arg_19_0;
  };

  function InstructionFactory$b1_TypeIs () {
    var arg_19_0 = null;
    if ((arg_19_0 = this._typeIs) === null) {
      arg_19_0 = this._typeIs = new ($asm00.Microsoft.Scripting.Interpreter.TypeIsInstruction$b1.Of($thisType.T.get(this))) ();
    }
    return arg_19_0;
  };

  function InstructionFactory$b1_WrapToNullable (elementType) {
    var arg_1A_0 = null;
    if ((arg_1A_0 = this._nullableWrap) === null) {
      arg_1A_0 = this._nullableWrap = new ($asm00.Microsoft.Scripting.Interpreter.WrapToNullableInstruction$b1.Of($thisType.T.get(this))) (elementType);
    }
    return arg_1A_0;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionFactory"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionFactory`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      InstructionFactory$b1__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DefaultValue", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionFactory$b1_DefaultValue
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetArrayItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionFactory$b1_GetArrayItem
    );

    $.Method({Static:false, Public:false, Virtual:true }, "NewArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionFactory$b1_NewArray
    );

    $.Method({Static:false, Public:false, Virtual:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionFactory$b1_NewArrayInit
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SetArrayItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionFactory$b1_SetArrayItem
    );

    $.Method({Static:false, Public:false, Virtual:true }, "TypeAs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionFactory$b1_TypeAs
    );

    $.Method({Static:false, Public:false, Virtual:true }, "TypeIs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionFactory$b1_TypeIs
    );

    $.Method({Static:false, Public:false, Virtual:true }, "WrapToNullable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      InstructionFactory$b1_WrapToNullable
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Factory", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionFactory")); 
    $.Field({Static:false, Public:false}, "_getArrayItem", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false}, "_setArrayItem", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false}, "_typeIs", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false}, "_defaultValue", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false}, "_newArray", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false}, "_typeAs", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:false, Public:false}, "_nullableWrap", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    function InstructionFactory$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).Factory = new ($thisType.Of($thisType.T.get(this))) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      InstructionFactory$b1__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Scripting.Interpreter.InstructionArray */ 

(function InstructionArray$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.RuntimeLabel))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object)))) ();
  };

  function InstructionArray__ctor (maxStackDepth, maxContinuationDepth, instructions, objects, labels, debugCookies) {
    this.MaxStackDepth = (maxStackDepth | 0);
    this.MaxContinuationDepth = (maxContinuationDepth | 0);
    this.Instructions = instructions;
    this.DebugCookies = debugCookies;
    this.Objects = objects;
    this.Labels = labels;
  };

  function InstructionArray_get_Length () {
    return this.Instructions.length;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionArray", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel")]), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Object])])
        ]), 
      InstructionArray__ctor
    );

    $.Method({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32), 
      InstructionArray_get_Length
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "MaxStackDepth", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "MaxContinuationDepth", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Instructions", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Objects", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Labels", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "DebugCookies", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Object])])); 
    $.Property({Static:false, Public:false}, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm00.Microsoft.Scripting.Interpreter.InstructionArray_DebugView.__Type__]; });

})();

/* class Microsoft.Scripting.Interpreter.InstructionArray+DebugView */ 

(function DebugView$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionArray)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList_DebugView)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };

  function DebugView__ctor (array) {
    this._array = array;
  };

  function DebugView_$lget_A0$gb__0 (index) {
    return this._array.Labels[index].Index;
  };

  function DebugView_get_A0 () {
    return $T02().GetInstructionViews($T03().$Cast(this._array.Instructions), $T04().$Cast(this._array.Objects), $T05().New(this, $thisType.prototype.$lget_A0$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$lget_A0$gb__0", new JSIL.MethodSignature($asm01.System.Int32, [$asm01.System.Int32]), false); }), this._array.DebugCookies);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionArray+DebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray")), 
      DebugView__ctor
    );

    $.Method({Static:false, Public:false}, "$lget_A0$gb__0", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      DebugView_$lget_A0$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_A0", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView")])), 
      DebugView_get_A0
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_array", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray")); 
    $.Property({Static:false, Public:true }, "A0", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InstructionList */ 

(function InstructionList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Reflection.FieldInfo, $asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.RuntimeLabel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.RuntimeLabel))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchLabel)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddOvfInstruction)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AddInstruction)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AndInstruction)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AssignLocalInstruction)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OffsetInstruction)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchInstruction)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchFalseInstruction)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchNullInstruction)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchTrueInstruction)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CoalescingBranchInstruction)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CreateDelegateInstruction)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DivInstruction)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DupInstruction)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EnterFinallyInstruction)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EqualInstruction)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.TypeUtils)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Object))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GetArrayLengthInstruction)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GotoInstruction)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanInstruction)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.GreaterThanOrEqualInstruction)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.PushValueInstruction)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_ImmutableValue)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_MutableValue)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LeaveFaultInstruction)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LeaveFinallyInstruction)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadObjectInstruction)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Object))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadLocalInstruction)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NewInstruction)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NumericConvertInstruction_Checked)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NumericConvertInstruction_Unchecked)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.PopInstruction)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ThrowInstruction)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.StoreFieldInstruction)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.StoreLocalInstruction)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SwitchInstruction)) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.TypeEqualsInstruction)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadFieldInstruction)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_ImmutableBox)) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_Reference)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction)) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.BranchLabel))) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_Parameter)) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_ParameterBox)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IBoxableInstruction)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionArray)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Reflection.FieldInfo"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchInstruction"), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchInstruction"), [$asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Boolean")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Boolean")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Object")]), null))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IBoxableInstruction.BoxIfIndexMatches)) ();
  };

  function InstructionList__ctor () {
    this._instructions = $S01().Construct();
    this._debugCookies = null;
  };

  function InstructionList_AssignLocalBoxed (index) {
    var arg_4B_0 = null;
    if ($thisType._assignLocalBoxed === null) {
      $thisType._assignLocalBoxed = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._assignLocalBoxed.length | 0)) {
      if ((arg_4B_0 = $thisType._assignLocalBoxed[index]) === null) {
        arg_4B_0 = $thisType._assignLocalBoxed[index] = new ($T06())(index);
      }
      var result = arg_4B_0;
    } else {
      result = new ($T06())(index);
    }
    return result;
  };

  function InstructionList_BuildRuntimeLabels () {
    var $temp00;
    if ((this._runtimeLabelCount | 0) === 0) {
      var result2 = $thisType.EmptyRuntimeLabels;
    } else {
      var result = JSIL.Array.New($T01(), (((this._runtimeLabelCount | 0) + 1) | 0));

      for (var a$0 = this._labels._items, i$0 = 0, l$0 = (this._labels._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var label = a$0[i$0];
        if (label.get_HasRuntimeLabel()) {
          result[label.LabelIndex] = label.ToRuntimeLabel();
        }
      }
      result[(((result.length | 0) - 1) | 0)] = new ($T01())(2147483647, 0, 0);
      result2 = result;
    }
    return result2;
  };

  function InstructionList_Emit (instruction) {
    (this._instructions).Add(instruction);
    this.UpdateStackDepth(instruction);
  };

  function InstructionList_EmitAdd (type, checked) {
    if (checked) {
      this.Emit($T0B().Create(type));
    } else {
      this.Emit($T0C().Create(type));
    }
  };

  function InstructionList_EmitAnd (type, lifted) {
    this.Emit((
        lifted
           ? $T0D().CreateLifted(type)
           : $T0D().Create(type))
    );
  };

  function InstructionList_EmitAssignLocal (index) {
    var arg_4C_1 = null;
    if ($thisType._assignLocal === null) {
      $thisType._assignLocal = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._assignLocal.length | 0)) {
      if ((arg_4C_1 = $thisType._assignLocal[index]) === null) {
        arg_4C_1 = $thisType._assignLocal[index] = new ($T0E())(index);
      }
      this.Emit(arg_4C_1);
    } else {
      this.Emit(new ($T0E())(index));
    }
  };

  function InstructionList_EmitAssignLocalBoxed (index) {
    this.Emit($thisType.AssignLocalBoxed(index));
  };

  function InstructionList_EmitAssignLocalToClosure (index) {
    var arg_4C_1 = null;
    if ($thisType._assignLocalToClosure === null) {
      $thisType._assignLocalToClosure = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._assignLocalToClosure.length | 0)) {
      if ((arg_4C_1 = $thisType._assignLocalToClosure[index]) === null) {
        arg_4C_1 = $thisType._assignLocalToClosure[index] = new ($T0F())(index);
      }
      this.Emit(arg_4C_1);
    } else {
      this.Emit(new ($T0F())(index));
    }
  };

  function InstructionList_EmitBranch$00 (instruction, label) {
    this.Emit(instruction);
    label.AddBranch(this, (((this.get_Count() | 0) - 1) | 0));
  };

  function InstructionList_EmitBranch$01 (label) {
    this.EmitBranch($S02().Construct(), label);
  };

  function InstructionList_EmitBranch$02 (label, hasResult, hasValue) {
    this.EmitBranch($S03().Construct(hasResult, hasValue), label);
  };

  function InstructionList_EmitBranchFalse (elseLabel) {
    this.EmitBranch(new ($T12())(), elseLabel);
  };

  function InstructionList_EmitBranchNull (elseLabel) {
    this.EmitBranch(new ($T13())(), elseLabel);
  };

  function InstructionList_EmitBranchTrue (elseLabel) {
    this.EmitBranch(new ($T14())(), elseLabel);
  };

  function InstructionList_EmitCoalescingBranch (leftNotNull) {
    this.EmitBranch(new ($T15())(), leftNotNull);
  };

  function InstructionList_EmitCreateDelegate (creator) {
    this.Emit(new ($T17())(creator));
  };

  function InstructionList_EmitDefaultValue (type) {
    this.Emit(($T18().GetFactory(type)).DefaultValue());
  };

  function InstructionList_EmitDiv (type) {
    this.Emit($T19().Create(type));
  };

  function InstructionList_EmitDup () {
    this.Emit($T1A().Instance);
  };

  function InstructionList_EmitEnterExceptionHandlerNonVoid () {
    this.Emit($T1B().NonVoid);
  };

  function InstructionList_EmitEnterExceptionHandlerVoid () {
    this.Emit($T1B().Void);
  };

  function InstructionList_EmitEnterFinally () {
    this.Emit($T1C().Instance);
  };

  function InstructionList_EmitEnterTryFinally (finallyStartLabel) {
    this.Emit($T1D().Create(this.EnsureLabelIndex(finallyStartLabel)));
  };

  function InstructionList_EmitEqual (type, liftedResult) {
    this.Emit((
        liftedResult
           ? $T1E().CreateLifted($T1F().GetNonNullableType(type))
           : $T1E().Create($T1F().GetNonNullableType(type)))
    );
  };

  function InstructionList_EmitExclusiveOr (type, lifted) {
    this.Emit((
        lifted
           ? $T20().CreateLifted(type)
           : $T20().Create(type))
    );
  };

  function InstructionList_EmitGetArrayItem (arrayType) {
    var elementType = arrayType.GetElementType();
    if (!(!$T21().IsClass(elementType) && !$T21().IsInterface(elementType))) {
      this.Emit($T22().Factory.GetArrayItem());
    } else {
      this.Emit(($T18().GetFactory(elementType)).GetArrayItem());
    }
  };

  function InstructionList_EmitGetArrayLength (arrayType) {
    this.Emit($T23().Create());
  };

  function InstructionList_EmitGoto (label, hasResult, hasValue) {
    this.Emit($T24().Create(this.EnsureLabelIndex(label), hasResult, hasValue));
  };

  function InstructionList_EmitGreaterThan (type, liftedResult) {
    this.Emit((
        liftedResult
           ? $T25().CreateLifted($T1F().GetNonNullableType(type))
           : $T25().Create($T1F().GetNonNullableType(type)))
    );
  };

  function InstructionList_EmitGreaterThanOrEqual (type, liftedResult) {
    this.Emit((
        liftedResult
           ? $T26().CreateLifted($T1F().GetNonNullableType(type))
           : $T26().Create($T1F().GetNonNullableType(type)))
    );
  };

  function InstructionList_EmitIncrement (type) {
    this.Emit(new ($T27())(1));
    this.EmitAdd(type, false);
  };

  function InstructionList_EmitInitializeLocal (index, type) {
    var value = $T29().GetPrimitiveDefaultValue(type);
    if (value !== null) {
      this.Emit(new ($T2A())(index, value));
    } else if ($T21().IsValueType(type)) {
      this.Emit(new ($T2B())(index, type));
    } else {
      this.Emit($thisType.InitReference(index));
    }
  };

  function InstructionList_EmitInitializeParameter (index) {
    this.Emit($thisType.Parameter(index));
  };

  function InstructionList_EmitLeaveExceptionHandler (hasValue, tryExpressionEndLabel) {
    this.Emit($T2C().Create(this.EnsureLabelIndex(tryExpressionEndLabel), hasValue));
  };

  function InstructionList_EmitLeaveFault (hasValue) {
    this.Emit((
        hasValue
           ? $T2D().NonVoid
           : $T2D().Void)
    );
  };

  function InstructionList_EmitLeaveFinally () {
    this.Emit($T2E().Instance);
  };

  function InstructionList_EmitLessThan (type, liftedResult) {
    this.Emit((
        liftedResult
           ? $T2F().CreateLifted($T1F().GetNonNullableType(type))
           : $T2F().Create($T1F().GetNonNullableType(type)))
    );
  };

  function InstructionList_EmitLessThanOrEqual (type, liftedResult) {
    this.Emit((
        liftedResult
           ? $T30().CreateLifted($T1F().GetNonNullableType(type))
           : $T30().Create($T1F().GetNonNullableType(type)))
    );
  };

  function InstructionList_EmitLoad$03 (value) {
    this.EmitLoad(value, null);
  };

  function InstructionList_EmitLoad$04 (value) {
    var arg_25_1 = null, arg_4A_1 = null;
    if (value) {
      if ((arg_25_1 = $thisType._true) === null) {
        arg_25_1 = $thisType._true = new ($T31())(value);
      }
      this.Emit(arg_25_1);
    } else {
      if ((arg_4A_1 = $thisType._false) === null) {
        arg_4A_1 = $thisType._false = new ($T31())(value);
      }
      this.Emit(arg_4A_1);
    }
  };

  function InstructionList_EmitLoad$05 (value, type) {
    var arg_23_1 = null, arg_DB_1 = null, arg_178_1 = null;
    if (value === null) {
      if ((arg_23_1 = $thisType._null) === null) {
        arg_23_1 = $thisType._null = new ($T31())(null);
      }
      this.Emit(arg_23_1);
    } else {
      if (!(!$T09().op_Equality(type, null) && !$T21().IsValueType(type))) {
        if ($T0A().$Is(value)) {
          $S04().CallVirtual("EmitLoad", null, this, $T0A().$Cast(value));
          return;
        }
        if ($T03().$Is(value)) {
          var i = $T03().$Cast(value);
          if (!((i < -100) || (i > 100))) {
            if ($thisType._ints === null) {
              $thisType._ints = JSIL.Array.New($T04(), 201);
            }
            i = ((i - -100) | 0);
            if ((arg_DB_1 = $thisType._ints[i]) === null) {
              arg_DB_1 = $thisType._ints[i] = new ($T31())(value);
            }
            this.Emit(arg_DB_1);
            return;
          }
        }
      }
      if (this._objects === null) {
        this._objects = $S05().Construct();
        if ($thisType._loadObjectCached === null) {
          $thisType._loadObjectCached = JSIL.Array.New($T04(), 256);
        }
      }
      if (((this._objects).get_Count() | 0) < ($thisType._loadObjectCached.length | 0)) {
        var index = ((this._objects).get_Count() >>> 0);
        (this._objects).Add(value);
        if ((arg_178_1 = $thisType._loadObjectCached[index]) === null) {
          arg_178_1 = $thisType._loadObjectCached[index] = new ($T34())(index);
        }
        this.Emit(arg_178_1);
      } else {
        this.Emit(new ($T31())(value));
      }
    }
  };

  function InstructionList_EmitLoadField (field) {
    this.Emit(this.GetLoadField(field));
  };

  function InstructionList_EmitLoadLocal (index) {
    var arg_4C_1 = null;
    if ($thisType._loadLocal === null) {
      $thisType._loadLocal = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._loadLocal.length | 0)) {
      if ((arg_4C_1 = $thisType._loadLocal[index]) === null) {
        arg_4C_1 = $thisType._loadLocal[index] = new ($T36())(index);
      }
      this.Emit(arg_4C_1);
    } else {
      this.Emit(new ($T36())(index));
    }
  };

  function InstructionList_EmitLoadLocalBoxed (index) {
    this.Emit($thisType.LoadLocalBoxed(index));
  };

  function InstructionList_EmitLoadLocalFromClosure (index) {
    var arg_4C_1 = null;
    if ($thisType._loadLocalFromClosure === null) {
      $thisType._loadLocalFromClosure = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._loadLocalFromClosure.length | 0)) {
      if ((arg_4C_1 = $thisType._loadLocalFromClosure[index]) === null) {
        arg_4C_1 = $thisType._loadLocalFromClosure[index] = new ($T37())(index);
      }
      this.Emit(arg_4C_1);
    } else {
      this.Emit(new ($T37())(index));
    }
  };

  function InstructionList_EmitLoadLocalFromClosureBoxed (index) {
    var arg_4C_1 = null;
    if ($thisType._loadLocalFromClosureBoxed === null) {
      $thisType._loadLocalFromClosureBoxed = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._loadLocalFromClosureBoxed.length | 0)) {
      if ((arg_4C_1 = $thisType._loadLocalFromClosureBoxed[index]) === null) {
        arg_4C_1 = $thisType._loadLocalFromClosureBoxed[index] = new ($T38())(index);
      }
      this.Emit(arg_4C_1);
    } else {
      this.Emit(new ($T38())(index));
    }
  };

  function InstructionList_EmitMod (type) {
    this.Emit($T39().Create(type));
  };

  function InstructionList_EmitMul (type, checked) {
    if (checked) {
      this.Emit($T3A().Create(type));
    } else {
      this.Emit($T3B().Create(type));
    }
  };

  function InstructionList_EmitNegate (type, checked, lifted) {
    if (checked) {
      this.Emit((
          lifted
             ? $T3C().CreateLifted(type)
             : $T3C().Create(type))
      );
    } else {
      this.Emit((
          lifted
             ? $T3D().CreateLifted(type)
             : $T3D().Create(type))
      );
    }
  };

  function InstructionList_EmitNew (constructorInfo) {
    this.Emit(new ($T3F())(constructorInfo));
  };

  function InstructionList_EmitNewArray (elementType) {
    this.Emit(($T18().GetFactory(elementType)).NewArray());
  };

  function InstructionList_EmitNewArrayBounds (elementType, rank) {
    this.Emit(new ($T40())(elementType, rank));
  };

  function InstructionList_EmitNewArrayInit (elementType, elementCount) {
    this.Emit(($T18().GetFactory(elementType)).NewArrayInit(elementCount));
  };

  function InstructionList_EmitNewRuntimeVariables (count) {
    this.Emit(new ($T41())(count));
  };

  function InstructionList_EmitNot (type, lifted) {
    this.Emit((
        lifted
           ? $T42().CreateLifted(type)
           : $T42().Create(type))
    );
  };

  function InstructionList_EmitNotEqual (type, liftedResult) {
    this.Emit((
        liftedResult
           ? $T43().CreateLifted($T1F().GetNonNullableType(type))
           : $T43().Create($T1F().GetNonNullableType(type)))
    );
  };

  function InstructionList_EmitNumericConvertChecked (from, to) {
    this.Emit(new ($T45())(from, to));
  };

  function InstructionList_EmitNumericConvertUnchecked (from, to) {
    this.Emit(new ($T46())(from, to));
  };

  function InstructionList_EmitOr (type, lifted) {
    this.Emit((
        lifted
           ? $T47().CreateLifted(type)
           : $T47().Create(type))
    );
  };

  function InstructionList_EmitPop () {
    this.Emit($T48().Instance);
  };

  function InstructionList_EmitRethrow () {
    this.Emit($T49().Rethrow);
  };

  function InstructionList_EmitRethrowVoid () {
    this.Emit($T49().VoidRethrow);
  };

  function InstructionList_EmitSetArrayItem (arrayType) {
    var elementType = arrayType.GetElementType();
    if (!(!$T21().IsClass(elementType) && !$T21().IsInterface(elementType))) {
      this.Emit($T22().Factory.SetArrayItem());
    } else {
      this.Emit(($T18().GetFactory(elementType)).SetArrayItem());
    }
  };

  function InstructionList_EmitShl (type, lifted) {
    this.Emit((
        lifted
           ? $T4A().CreateLifted(type)
           : $T4A().Create(type))
    );
  };

  function InstructionList_EmitShr (type, lifted) {
    this.Emit((
        lifted
           ? $T4B().CreateLifted(type)
           : $T4B().Create(type))
    );
  };

  function InstructionList_EmitStore (value) {
    this.Emit(new ($T27())(value));
  };

  function InstructionList_EmitStoreField (field) {
    if (field.get_IsStatic()) {
      this.Emit(new ($T4C())(field));
    } else {
      this.Emit(new ($T4D())(field));
    }
  };

  function InstructionList_EmitStoreLocal (index) {
    var arg_4C_1 = null;
    if ($thisType._storeLocal === null) {
      $thisType._storeLocal = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._storeLocal.length | 0)) {
      if ((arg_4C_1 = $thisType._storeLocal[index]) === null) {
        arg_4C_1 = $thisType._storeLocal[index] = new ($T4E())(index);
      }
      this.Emit(arg_4C_1);
    } else {
      this.Emit(new ($T4E())(index));
    }
  };

  function InstructionList_EmitStoreLocalBoxed (index) {
    this.Emit($thisType.StoreLocalBoxed(index));
  };

  function InstructionList_EmitStoreLocalToClosure (index) {
    this.EmitAssignLocalToClosure(index);
    this.EmitPop();
  };

  function InstructionList_EmitSub (type, checked) {
    if (checked) {
      this.Emit($T4F().Create(type));
    } else {
      this.Emit($T50().Create(type));
    }
  };

  function InstructionList_EmitSwitch (cases) {
    this.Emit(new ($T52())(cases));
  };

  function InstructionList_EmitThrow () {
    this.Emit($T49().Throw);
  };

  function InstructionList_EmitThrowVoid () {
    this.Emit($T49().VoidThrow);
  };

  function InstructionList_EmitTypeAs (type) {
    this.Emit(($T18().GetFactory(type)).TypeAs());
  };

  function InstructionList_EmitTypeEquals () {
    this.Emit($T53().Instance);
  };

  function InstructionList_EmitTypeIs (type) {
    this.Emit(($T18().GetFactory(type)).TypeIs());
  };

  function InstructionList_EmitWrap (elementType) {
    this.Emit(($T18().GetFactory(elementType)).WrapToNullable(elementType));
  };

  function InstructionList_EnsureLabelIndex (label) {
    if (label.get_HasRuntimeLabel()) {
      var labelIndex = (label.get_LabelIndex() | 0);
    } else {
      label.set_LabelIndex(this._runtimeLabelCount);
      this._runtimeLabelCount = (((this._runtimeLabelCount | 0) + 1) | 0);
      labelIndex = (label.get_LabelIndex() | 0);
    }
    return labelIndex;
  };

  function InstructionList_FixupBranch (branchIndex, offset) {
    (this._instructions).set_Item(branchIndex, ($T10().$Cast((this._instructions).get_Item(branchIndex))).Fixup(offset));
  };

  function InstructionList_get_Count () {
    return (this._instructions).get_Count();
  };

  function InstructionList_get_CurrentContinuationsDepth () {
    return this._currentContinuationsDepth;
  };

  function InstructionList_get_CurrentStackDepth () {
    return this._currentStackDepth;
  };

  function InstructionList_get_MaxStackDepth () {
    return this._maxStackDepth;
  };

  function InstructionList_GetInstruction (index) {
    return (this._instructions).get_Item(index);
  };

  function InstructionList_GetLoadField (field) {
    var instruction = new JSIL.BoxedVariable(null);
    var loadFields = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T54().Enter(loadFields = $thisType._loadFields, /* ref */ flag);
      if (!$thisType._loadFields.TryGetValue(field, /* ref */ instruction)) {
        if (field.get_IsStatic()) {
          instruction.set(new ($T55())(field));
        } else {
          instruction.set(new ($T56())(field));
        }
        $thisType._loadFields.Add(field, instruction.get());
      }
      var result = instruction.get();
    } finally {
      if (flag.get()) {
        $T54().Exit(loadFields);
      }
    }
    return result;
  };

  function InstructionList_InitImmutableRefBox (index) {
    var arg_4C_0 = null;
    if ($thisType._initImmutableRefBox === null) {
      $thisType._initImmutableRefBox = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._initImmutableRefBox.length | 0)) {
      if ((arg_4C_0 = $thisType._initImmutableRefBox[index]) === null) {
        arg_4C_0 = $thisType._initImmutableRefBox[index] = new ($T57())(index, null);
      }
      var result = arg_4C_0;
    } else {
      result = new ($T57())(index, null);
    }
    return result;
  };

  function InstructionList_InitReference (index) {
    var arg_4B_0 = null;
    if ($thisType._initReference === null) {
      $thisType._initReference = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._initReference.length | 0)) {
      if ((arg_4B_0 = $thisType._initReference[index]) === null) {
        arg_4B_0 = $thisType._initReference[index] = new ($T58())(index);
      }
      var result = arg_4B_0;
    } else {
      result = new ($T58())(index);
    }
    return result;
  };

  function InstructionList_LoadLocalBoxed (index) {
    var arg_4B_0 = null;
    if ($thisType._loadLocalBoxed === null) {
      $thisType._loadLocalBoxed = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._loadLocalBoxed.length | 0)) {
      if ((arg_4B_0 = $thisType._loadLocalBoxed[index]) === null) {
        arg_4B_0 = $thisType._loadLocalBoxed[index] = new ($T59())(index);
      }
      var result = arg_4B_0;
    } else {
      result = new ($T59())(index);
    }
    return result;
  };

  function InstructionList_MakeLabel () {
    if (this._labels === null) {
      this._labels = $S06().Construct();
    }
    var label = new ($T08())();
    (this._labels).Add(label);
    return label;
  };

  function InstructionList_MarkLabel (label) {
    label.Mark(this);
  };

  function InstructionList_MarkRuntimeLabel () {
    var handlerLabel = this.MakeLabel();
    this.MarkLabel(handlerLabel);
    return this.EnsureLabelIndex(handlerLabel);
  };

  function InstructionList_Parameter (index) {
    var arg_4B_0 = null;
    if ($thisType._parameter === null) {
      $thisType._parameter = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._parameter.length | 0)) {
      if ((arg_4B_0 = $thisType._parameter[index]) === null) {
        arg_4B_0 = $thisType._parameter[index] = new ($T5B())(index);
      }
      var result = arg_4B_0;
    } else {
      result = new ($T5B())(index);
    }
    return result;
  };

  function InstructionList_ParameterBox (index) {
    var arg_4B_0 = null;
    if ($thisType._parameterBox === null) {
      $thisType._parameterBox = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._parameterBox.length | 0)) {
      if ((arg_4B_0 = $thisType._parameterBox[index]) === null) {
        arg_4B_0 = $thisType._parameterBox[index] = new ($T5C())(index);
      }
      var result = arg_4B_0;
    } else {
      result = new ($T5C())(index);
    }
    return result;
  };

  function InstructionList_SetDebugCookie (cookie) {
  };

  function InstructionList_StoreLocalBoxed (index) {
    var arg_4B_0 = null;
    if ($thisType._storeLocalBoxed === null) {
      $thisType._storeLocalBoxed = JSIL.Array.New($T04(), 64);
    }
    if ((index | 0) < ($thisType._storeLocalBoxed.length | 0)) {
      if ((arg_4B_0 = $thisType._storeLocalBoxed[index]) === null) {
        arg_4B_0 = $thisType._storeLocalBoxed[index] = new ($T5D())(index);
      }
      var result = arg_4B_0;
    } else {
      result = new ($T5D())(index);
    }
    return result;
  };

  function InstructionList_SwitchToBoxed (index, instructionIndex) {
    var instruction = $T5E().$As((this._instructions).get_Item(instructionIndex));
    if (instruction !== null) {
      var newInstruction = $IM00().Call(instruction, null, index);
      if (newInstruction !== null) {
        (this._instructions).set_Item(instructionIndex, newInstruction);
      }
    }
  };

  function InstructionList_ToArray () {
    return new ($T5F())(this._maxStackDepth, this._maxContinuationDepth, $T02().prototype.ToArray.call(this._instructions), (
        (this._objects !== null)
           ? $T32().prototype.ToArray.call(this._objects)
           : null)
      , this.BuildRuntimeLabels(), this._debugCookies);
  };

  function InstructionList_UpdateStackDepth (instruction) {
    this._currentStackDepth = (((this._currentStackDepth | 0) - (instruction.get_ConsumedStack() | 0)) | 0);
    this._currentStackDepth = (((this._currentStackDepth | 0) + (instruction.get_ProducedStack() | 0)) | 0);
    if ((this._currentStackDepth | 0) > (this._maxStackDepth | 0)) {
      this._maxStackDepth = (this._currentStackDepth | 0);
    }
    this._currentContinuationsDepth = (((this._currentContinuationsDepth | 0) - (instruction.get_ConsumedContinuations() | 0)) | 0);
    this._currentContinuationsDepth = (((this._currentContinuationsDepth | 0) + (instruction.get_ProducedContinuations() | 0)) | 0);
    if ((this._currentContinuationsDepth | 0) > (this._maxContinuationDepth | 0)) {
      this._maxContinuationDepth = (this._currentContinuationsDepth | 0);
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InstructionList__ctor
    );

    $.Method({Static:true , Public:false}, "AssignLocalBoxed", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_AssignLocalBoxed
    );

    $.Method({Static:false, Public:false}, "BuildRuntimeLabels", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel")])), 
      InstructionList_BuildRuntimeLabels
    );

    $.Method({Static:false, Public:true }, "Emit", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionList_Emit
    );

    $.Method({Static:false, Public:true }, "EmitAdd", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitAdd
    );

    $.Method({Static:false, Public:true }, "EmitAnd", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitAnd
    );

    $.Method({Static:false, Public:true }, "EmitAssignLocal", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitAssignLocal
    );

    $.Method({Static:false, Public:true }, "EmitAssignLocalBoxed", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitAssignLocalBoxed
    );

    $.Method({Static:false, Public:true }, "EmitAssignLocalToClosure", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitAssignLocalToClosure
    );

    $.Method({Static:false, Public:false}, "EmitBranch", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.OffsetInstruction"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), 
      InstructionList_EmitBranch$00
    );

    $.Method({Static:false, Public:true }, "EmitBranch", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_EmitBranch$01
    );

    $.Method({Static:false, Public:true }, "EmitBranch", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel"), $.Boolean, 
          $.Boolean
        ]), 
      InstructionList_EmitBranch$02
    );

    $.Method({Static:false, Public:true }, "EmitBranchFalse", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_EmitBranchFalse
    );

    $.Method({Static:false, Public:true }, "EmitBranchNull", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_EmitBranchNull
    );

    $.Method({Static:false, Public:true }, "EmitBranchTrue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_EmitBranchTrue
    );

    $.Method({Static:false, Public:true }, "EmitCoalescingBranch", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_EmitCoalescingBranch
    );

    $.Method({Static:false, Public:false}, "EmitCreateDelegate", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator")), 
      InstructionList_EmitCreateDelegate
    );

    $.Method({Static:false, Public:true }, "EmitDefaultValue", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitDefaultValue
    );

    $.Method({Static:false, Public:true }, "EmitDiv", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitDiv
    );

    $.Method({Static:false, Public:true }, "EmitDup", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitDup
    );

    $.Method({Static:false, Public:true }, "EmitEnterExceptionHandlerNonVoid", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitEnterExceptionHandlerNonVoid
    );

    $.Method({Static:false, Public:true }, "EmitEnterExceptionHandlerVoid", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitEnterExceptionHandlerVoid
    );

    $.Method({Static:false, Public:true }, "EmitEnterFinally", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitEnterFinally
    );

    $.Method({Static:false, Public:true }, "EmitEnterTryFinally", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_EmitEnterTryFinally
    );

    $.Method({Static:false, Public:true }, "EmitEqual", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitEqual
    );

    $.Method({Static:false, Public:true }, "EmitExclusiveOr", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitExclusiveOr
    );

    $.Method({Static:false, Public:true }, "EmitGetArrayItem", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitGetArrayItem
    );

    $.Method({Static:false, Public:true }, "EmitGetArrayLength", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitGetArrayLength
    );

    $.Method({Static:false, Public:true }, "EmitGoto", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel"), $.Boolean, 
          $.Boolean
        ]), 
      InstructionList_EmitGoto
    );

    $.Method({Static:false, Public:true }, "EmitGreaterThan", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitGreaterThan
    );

    $.Method({Static:false, Public:true }, "EmitGreaterThanOrEqual", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitGreaterThanOrEqual
    );

    $.Method({Static:false, Public:true }, "EmitIncrement", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitIncrement
    );

    $.Method({Static:false, Public:true }, "EmitInitializeLocal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("System.Type")]), 
      InstructionList_EmitInitializeLocal
    );

    $.Method({Static:false, Public:false}, "EmitInitializeParameter", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitInitializeParameter
    );

    $.Method({Static:false, Public:true }, "EmitLeaveExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), 
      InstructionList_EmitLeaveExceptionHandler
    );

    $.Method({Static:false, Public:true }, "EmitLeaveFault", 
      JSIL.MethodSignature.Action($.Boolean), 
      InstructionList_EmitLeaveFault
    );

    $.Method({Static:false, Public:true }, "EmitLeaveFinally", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitLeaveFinally
    );

    $.Method({Static:false, Public:true }, "EmitLessThan", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitLessThan
    );

    $.Method({Static:false, Public:true }, "EmitLessThanOrEqual", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitLessThanOrEqual
    );

    $.Method({Static:false, Public:true }, "EmitLoad", 
      JSIL.MethodSignature.Action($.Object), 
      InstructionList_EmitLoad$03
    );

    $.Method({Static:false, Public:true }, "EmitLoad", 
      JSIL.MethodSignature.Action($.Boolean), 
      InstructionList_EmitLoad$04
    );

    $.Method({Static:false, Public:true }, "EmitLoad", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Type")]), 
      InstructionList_EmitLoad$05
    );

    $.Method({Static:false, Public:true }, "EmitLoadField", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.FieldInfo")), 
      InstructionList_EmitLoadField
    );

    $.Method({Static:false, Public:true }, "EmitLoadLocal", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitLoadLocal
    );

    $.Method({Static:false, Public:true }, "EmitLoadLocalBoxed", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitLoadLocalBoxed
    );

    $.Method({Static:false, Public:true }, "EmitLoadLocalFromClosure", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitLoadLocalFromClosure
    );

    $.Method({Static:false, Public:true }, "EmitLoadLocalFromClosureBoxed", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitLoadLocalFromClosureBoxed
    );

    $.Method({Static:false, Public:true }, "EmitMod", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitMod
    );

    $.Method({Static:false, Public:true }, "EmitMul", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitMul
    );

    $.Method({Static:false, Public:true }, "EmitNegate", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $.Boolean
        ]), 
      InstructionList_EmitNegate
    );

    $.Method({Static:false, Public:true }, "EmitNew", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.ConstructorInfo")), 
      InstructionList_EmitNew
    );

    $.Method({Static:false, Public:true }, "EmitNewArray", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitNewArray
    );

    $.Method({Static:false, Public:true }, "EmitNewArrayBounds", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Int32]), 
      InstructionList_EmitNewArrayBounds
    );

    $.Method({Static:false, Public:true }, "EmitNewArrayInit", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Int32]), 
      InstructionList_EmitNewArrayInit
    );

    $.Method({Static:false, Public:true }, "EmitNewRuntimeVariables", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitNewRuntimeVariables
    );

    $.Method({Static:false, Public:true }, "EmitNot", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitNot
    );

    $.Method({Static:false, Public:true }, "EmitNotEqual", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitNotEqual
    );

    $.Method({Static:false, Public:true }, "EmitNumericConvertChecked", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TypeCode"), $asm01.TypeRef("System.TypeCode")]), 
      InstructionList_EmitNumericConvertChecked
    );

    $.Method({Static:false, Public:true }, "EmitNumericConvertUnchecked", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TypeCode"), $asm01.TypeRef("System.TypeCode")]), 
      InstructionList_EmitNumericConvertUnchecked
    );

    $.Method({Static:false, Public:true }, "EmitOr", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitOr
    );

    $.Method({Static:false, Public:true }, "EmitPop", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitPop
    );

    $.Method({Static:false, Public:true }, "EmitRethrow", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitRethrow
    );

    $.Method({Static:false, Public:true }, "EmitRethrowVoid", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitRethrowVoid
    );

    $.Method({Static:false, Public:true }, "EmitSetArrayItem", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitSetArrayItem
    );

    $.Method({Static:false, Public:true }, "EmitShl", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitShl
    );

    $.Method({Static:false, Public:true }, "EmitShr", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitShr
    );

    $.Method({Static:false, Public:true }, "EmitStore", 
      JSIL.MethodSignature.Action($.Object), 
      InstructionList_EmitStore
    );

    $.Method({Static:false, Public:true }, "EmitStoreField", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.FieldInfo")), 
      InstructionList_EmitStoreField
    );

    $.Method({Static:false, Public:true }, "EmitStoreLocal", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitStoreLocal
    );

    $.Method({Static:false, Public:true }, "EmitStoreLocalBoxed", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitStoreLocalBoxed
    );

    $.Method({Static:false, Public:true }, "EmitStoreLocalToClosure", 
      JSIL.MethodSignature.Action($.Int32), 
      InstructionList_EmitStoreLocalToClosure
    );

    $.Method({Static:false, Public:true }, "EmitSub", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.Boolean]), 
      InstructionList_EmitSub
    );

    $.Method({Static:false, Public:true }, "EmitSwitch", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32])), 
      InstructionList_EmitSwitch
    );

    $.Method({Static:false, Public:true }, "EmitThrow", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitThrow
    );

    $.Method({Static:false, Public:true }, "EmitThrowVoid", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitThrowVoid
    );

    $.Method({Static:false, Public:true }, "EmitTypeAs", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitTypeAs
    );

    $.Method({Static:false, Public:true }, "EmitTypeEquals", 
      JSIL.MethodSignature.Void, 
      InstructionList_EmitTypeEquals
    );

    $.Method({Static:false, Public:true }, "EmitTypeIs", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitTypeIs
    );

    $.Method({Static:false, Public:true }, "EmitWrap", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      InstructionList_EmitWrap
    );

    $.Method({Static:false, Public:false}, "EnsureLabelIndex", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), 
      InstructionList_EnsureLabelIndex
    );

    $.Method({Static:false, Public:false}, "FixupBranch", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      InstructionList_FixupBranch
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      InstructionList_get_Count
    );

    $.Method({Static:false, Public:true }, "get_CurrentContinuationsDepth", 
      JSIL.MethodSignature.Return($.Int32), 
      InstructionList_get_CurrentContinuationsDepth
    );

    $.Method({Static:false, Public:true }, "get_CurrentStackDepth", 
      JSIL.MethodSignature.Return($.Int32), 
      InstructionList_get_CurrentStackDepth
    );

    $.Method({Static:false, Public:true }, "get_MaxStackDepth", 
      JSIL.MethodSignature.Return($.Int32), 
      InstructionList_get_MaxStackDepth
    );

    $.Method({Static:false, Public:false}, "GetInstruction", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_GetInstruction
    );

    $.Method({Static:false, Public:false}, "GetLoadField", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Reflection.FieldInfo")]), 
      InstructionList_GetLoadField
    );

    $.Method({Static:true , Public:false}, "InitImmutableRefBox", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_InitImmutableRefBox
    );

    $.Method({Static:true , Public:false}, "InitReference", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_InitReference
    );

    $.Method({Static:true , Public:false}, "LoadLocalBoxed", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_LoadLocalBoxed
    );

    $.Method({Static:false, Public:true }, "MakeLabel", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_MakeLabel
    );

    $.Method({Static:false, Public:true }, "MarkLabel", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")), 
      InstructionList_MarkLabel
    );

    $.Method({Static:false, Public:true }, "MarkRuntimeLabel", 
      JSIL.MethodSignature.Return($.Int32), 
      InstructionList_MarkRuntimeLabel
    );

    $.Method({Static:true , Public:false}, "Parameter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_Parameter
    );

    $.Method({Static:true , Public:false}, "ParameterBox", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_ParameterBox
    );

    $.Method({Static:false, Public:true }, "SetDebugCookie", 
      JSIL.MethodSignature.Action($.Object), 
      InstructionList_SetDebugCookie
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:false}, "StoreLocalBoxed", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      InstructionList_StoreLocalBoxed
    );

    $.Method({Static:false, Public:false}, "SwitchToBoxed", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      InstructionList_SwitchToBoxed
    );

    $.Method({Static:false, Public:true }, "ToArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray")), 
      InstructionList_ToArray
    );

    $.Method({Static:false, Public:false}, "UpdateStackDepth", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")), 
      InstructionList_UpdateStackDepth
    );

    $.Constant({Static:true , Public:false}, "PushIntMinCachedValue", -100); 
    $.Constant({Static:true , Public:false}, "PushIntMaxCachedValue", 100); 
    $.Constant({Static:true , Public:false}, "CachedObjectCount", 256); 
    $.Constant({Static:true , Public:false}, "LocalInstrCacheSize", 64); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_instructions", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:false, Public:false}, "_objects", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "_currentStackDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "_maxStackDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "_currentContinuationsDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "_maxContinuationDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "_runtimeLabelCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_labels", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")])); 
    $.Field({Static:false, Public:false}, "_debugCookies", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Object])])); 
    $.Field({Static:true , Public:false}, "_null", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_true", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_false", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ints", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_loadObjectCached", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_loadLocal", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_loadLocalBoxed", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_loadLocalFromClosure", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_loadLocalFromClosureBoxed", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_assignLocal", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_storeLocal", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_assignLocalBoxed", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_storeLocalBoxed", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_assignLocalToClosure", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_initReference", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_initImmutableRefBox", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_parameterBox", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false}, "_parameter", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_loadFields", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Reflection.FieldInfo"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyRuntimeLabels", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel")])); 
    function InstructionList__cctor () {
      $thisType._loadFields = $S00().Construct();
      $thisType.EmptyRuntimeLabels = JSIL.Array.New($T01(), [new ($T01())(2147483647, 0, 0)]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      InstructionList__cctor
    );

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentStackDepth", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentContinuationsDepth", $.Int32);

    $.Property({Static:false, Public:true }, "MaxStackDepth", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm00.Microsoft.Scripting.Interpreter.InstructionList_DebugView.__Type__]; });

})();

/* class Microsoft.Scripting.Interpreter.InstructionList+DebugView */ 

(function DebugView$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchLabel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.BranchLabel))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object)))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.InstructionList_DebugView_InstructionView))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object)))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object)))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList_DebugView_InstructionView)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object)).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm00.Microsoft.Scripting.Interpreter.Instruction).get_Count)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Int32, $asm01.System.Object)).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm00.Microsoft.Scripting.Interpreter.Instruction).get_Item)) ();
  };

  function DebugView__ctor (list) {
    this._list = list;
  };

  function DebugView_$lget_A0$gb__1 (index) {
    return ((this._list._labels).get_Item(index)).get_TargetIndex();
  };

  function DebugView_get_A0 () {
    return $thisType.GetInstructionViews(this._list._instructions, this._list._objects, $T04().New(this, $thisType.prototype.$lget_A0$gb__1, function () { return JSIL.GetMethodInfo($thisType, "$lget_A0$gb__1", new JSIL.MethodSignature($asm01.System.Int32, [$asm01.System.Int32]), false); }), this._list._debugCookies);
  };

  function DebugView_GetInstructionViews (instructions, objects, labelIndexer, debugCookies) {
    var result = $S00().Construct();
    var index = 0;
    var stackDepth = 0;
    var continuationsDepth = 0;
    var cookieEnumerator = $IM00().Call((
        (debugCookies !== null)
           ? debugCookies
           : JSIL.Array.New($T0B(), 0))
      , null);
    var hasCookie = $IM01().Call(cookieEnumerator, null);

    for (var i = 0; i < ($IM02().Call(instructions, null) | 0); i = ((i + 1) | 0)) {
      var cookie = null;

    $loop1: 
      while (true) {
        if (hasCookie) {
          var current = $IM03().Call(cookieEnumerator, null).MemberwiseClone();
          var arg_71_0 = (current.get_Key() | 0) === i;
        } else {
          arg_71_0 = false;
        }
        if (!arg_71_0) {
          break $loop1;
        }
        current = $IM03().Call(cookieEnumerator, null).MemberwiseClone();
        cookie = current.get_Value();
        hasCookie = $IM01().Call(cookieEnumerator, null);
      }
      var stackDiff = (($IM04().Call(instructions, null, i)).get_StackBalance() | 0);
      var contDiff = (($IM04().Call(instructions, null, i)).get_ContinuationsBalance() | 0);
      var name = ($IM04().Call(instructions, null, i)).ToDebugString(i, cookie, labelIndexer, objects);
      result.Add(new ($T12())($IM04().Call(instructions, null, i), name, i, stackDepth, continuationsDepth));
      index = ((index + 1) | 0);
      stackDepth = ((stackDepth + stackDiff) | 0);
      continuationsDepth = ((continuationsDepth + contDiff) | 0);
    }
    return $T08().prototype.ToArray.call(result);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionList+DebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList")), 
      DebugView__ctor
    );

    $.Method({Static:false, Public:false}, "$lget_A0$gb__1", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      DebugView_$lget_A0$gb__1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_A0", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView")])), 
      DebugView_get_A0
    );

    $.Method({Static:true , Public:false}, "GetInstructionViews", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView")]), [
          $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object]), 
          $asm01.TypeRef("System.Func`2", [$.Int32, $.Int32]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Object])])
        ]), 
      DebugView_GetInstructionViews
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList")); 
    $.Property({Static:false, Public:true }, "A0", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView */ 

(function InstructionView$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function InstructionView__ctor (instruction, name, index, stackDepth, continuationsDepth) {
    this._instruction = instruction;
    this._name = name;
    this._index = (index | 0);
    this._stackDepth = (stackDepth | 0);
    this._continuationsDepth = (continuationsDepth | 0);
  };

  function InstructionView_GetDisplayType () {
    return (((this._instruction).get_ContinuationsBalance()).toString() + "/" + ((this._instruction).get_StackBalance()).toString());
  };

  function InstructionView_GetName () {
    return ((this._index).toString() + (
      ((this._continuationsDepth | 0) === 0)
         ? ""
         : (" C(" + (this._continuationsDepth).toString() + ")"))
     + (
      ((this._stackDepth | 0) === 0)
         ? ""
         : (" S(" + (this._stackDepth).toString() + ")"))
    );
  };

  function InstructionView_GetValue () {
    return this._name;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Interpreter.InstructionList+DebugView+InstructionView", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      InstructionView__ctor
    );

    $.Method({Static:false, Public:false}, "GetDisplayType", 
      JSIL.MethodSignature.Return($.String), 
      InstructionView_GetDisplayType
    );

    $.Method({Static:false, Public:false}, "GetName", 
      JSIL.MethodSignature.Return($.String), 
      InstructionView_GetName
    );

    $.Method({Static:false, Public:false}, "GetValue", 
      JSIL.MethodSignature.Return($.String), 
      InstructionView_GetValue
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_stackDepth", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_continuationsDepth", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_instruction", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{GetValue(),nq}"]; });

})();

/* class Microsoft.Scripting.Interpreter.LabelInfo */ 

(function LabelInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Linq.Expressions.LabelTarget)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Collections.Generic.HashSet$b1.Of($asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelScopeKind)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Func$b2.Of($asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo, $asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };

  function LabelInfo__ctor (node) {
    this._references = $S00().Construct();
    this._node = node;
  };

  function LabelInfo_$lValidateJump$gb__0 (b) {
    return b.Parent;
  };

  function LabelInfo_AddDefinition (scope) {
    if (this._definitions === null) {
      this._definitions = scope;
    } else {
      var set = $T03().$As(this._definitions);
      if (set === null) {
        set = this._definitions = ($S01().Construct()).__Initialize__([[$T02().$Cast(this._definitions)]]);
      }
      set.Add(scope);
    }
  };

  function LabelInfo_CommonNode$b1 (T, first, second, parent) {
    var $s00 = new JSIL.MethodSignature($asm01.System.Boolean, [T, T]);
    var $s01 = new JSIL.ConstructorSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [T]), [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [T])]);
    var cmp = $asm01.System.Collections.Generic.EqualityComparer$b1.Of(T).get_Default();
    if ($s00.CallVirtual("Equals", null, cmp, JSIL.CloneParameter(T, first), JSIL.CloneParameter(T, second))) {
      var result = JSIL.CloneParameter(T, first);
    } else {
      var set = $s01.Construct(cmp);

      for (var t = JSIL.CloneParameter(T, first); t !== null; t = JSIL.CloneParameter(T, parent(JSIL.CloneParameter(T, t)))) {
        set.Add(JSIL.CloneParameter(T, t));
      }

      for (t = JSIL.CloneParameter(T, second); t !== null; t = JSIL.CloneParameter(T, parent(JSIL.CloneParameter(T, t)))) {
        if (set.Contains(JSIL.CloneParameter(T, t))) {
          result = JSIL.CloneParameter(T, t);
          return result;
        }
      }
      result = (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
      ;
    }
    return result;
  };

  function LabelInfo_Define (block) {
    var $temp00;

    for (var i = block; i !== null; i = i.Parent) {
      if (i.ContainsTarget(this._node)) {
        throw $S02().Construct($T06().Format("Label target already defined: {0}", (this._node).get_Name()));
      }
    }
    this.AddDefinition(block);
    block.AddLabelInfo(this._node, this);
    if (!(!this.get_HasDefinitions() || this.get_HasMultipleDefinitions())) {

      for (var a$0 = this._references._items, i$0 = 0, l$0 = (this._references._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var r = a$0[i$0];
        this.ValidateJump(r);
      }
    } else {
      if (this._acrossBlockJump) {
        throw $S02().Construct("Ambiguous jump");
      }
      this._label = null;
    }
  };

  function LabelInfo_DefinedIn (scope) {
    if (this._definitions === scope) {
      var result = true;
    } else {
      var definitions = $T03().$As(this._definitions);
      result = (definitions !== null) && 
      definitions.Contains(scope);
    }
    return result;
  };

  function LabelInfo_EnsureLabel (compiler) {
    if (this._label === null) {
      this._label = (compiler.get_Instructions()).MakeLabel();
    }
  };

  function LabelInfo_FirstDefinition () {
    var scope = $T02().$As(this._definitions);
    if (scope !== null) {
      var result = scope;
    } else {
      result = $S03().CallStatic($T0A(), "First$b1", [$asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo], $T03().$Cast(this._definitions));
    }
    return result;
  };

  function LabelInfo_get_HasDefinitions () {
    return (this._definitions !== null);
  };

  function LabelInfo_get_HasMultipleDefinitions () {
    return $T03().$Is(this._definitions);
  };

  function LabelInfo_GetLabel (compiler) {
    this.EnsureLabel(compiler);
    return this._label;
  };

  function LabelInfo_Reference (block) {
    (this._references).Add(block);
    if (this.get_HasDefinitions()) {
      this.ValidateJump(block);
    }
  };

  function LabelInfo_ValidateFinish () {
    if (!((((this._references).get_Count() | 0) <= 0) || this.get_HasDefinitions())) {
      throw $S02().Construct("label target undefined");
    }
  };

  function LabelInfo_ValidateJump (reference) {

  $loop0: 
    for (var i = reference; i !== null; i = i.Parent) {
      if (this.DefinedIn(i)) {
        return;
      }
      if (i.Kind === $T0B().Filter) {
        break $loop0;
      }
    }
    this._acrossBlockJump = true;
    if (this.get_HasMultipleDefinitions()) {
      throw $S02().Construct($T06().Format("Ambiguous jump {0}", (this._node).get_Name()));
    }
    var def = this.FirstDefinition();
    var common = $thisType.CommonNode$b1($T02())(def, reference, $T0C().New($thisType, $thisType.$lValidateJump$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$lValidateJump$gb__0", new JSIL.MethodSignature($asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo, [$asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo]), true); }));

    for (i = reference; i !== common; i = i.Parent) {
      if (i.Kind === $T0B().Filter) {
        throw $S02().Construct("Control cannot leave filter test");
      }
    }

    for (i = def; i !== common; ) {
      if (!i.get_CanJumpInto()) {
        if (i.Kind === $T0B().Expression) {
          throw $S02().Construct("Control cannot enter an expression");
        }
        throw $S02().Construct("Control cannot enter try");
      } else {
        i = i.Parent;
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LabelInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.LabelTarget")), 
      LabelInfo__ctor
    );

    $.Method({Static:true , Public:false}, "$lValidateJump$gb__0", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")]), 
      LabelInfo_$lValidateJump$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "AddDefinition", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")), 
      LabelInfo_AddDefinition
    );

    $.Method({Static:true , Public:false}, "CommonNode", 
      new JSIL.MethodSignature("!!0", [
          "!!0", "!!0", 
          $asm01.TypeRef("System.Func`2", ["!!0", "!!0"])
        ], ["T"]), 
      LabelInfo_CommonNode$b1
    );

    $.Method({Static:false, Public:false}, "Define", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")), 
      LabelInfo_Define
    );

    $.Method({Static:false, Public:false}, "DefinedIn", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")]), 
      LabelInfo_DefinedIn
    );

    $.Method({Static:false, Public:false}, "EnsureLabel", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler")), 
      LabelInfo_EnsureLabel
    );

    $.Method({Static:false, Public:false}, "FirstDefinition", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")), 
      LabelInfo_FirstDefinition
    );

    $.Method({Static:false, Public:false}, "get_HasDefinitions", 
      JSIL.MethodSignature.Return($.Boolean), 
      LabelInfo_get_HasDefinitions
    );

    $.Method({Static:false, Public:false}, "get_HasMultipleDefinitions", 
      JSIL.MethodSignature.Return($.Boolean), 
      LabelInfo_get_HasMultipleDefinitions
    );

    $.Method({Static:false, Public:false}, "GetLabel", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler")]), 
      LabelInfo_GetLabel
    );

    $.Method({Static:false, Public:false}, "Reference", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")), 
      LabelInfo_Reference
    );

    $.Method({Static:false, Public:false}, "ValidateFinish", 
      JSIL.MethodSignature.Void, 
      LabelInfo_ValidateFinish
    );

    $.Method({Static:false, Public:false}, "ValidateJump", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")), 
      LabelInfo_ValidateJump
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm04.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Field({Static:false, Public:false}, "_label", $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")); 
    $.Field({Static:false, Public:false}, "_definitions", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")])); 
    $.Field({Static:false, Public:false}, "_acrossBlockJump", $.Boolean); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1", $asm01.TypeRef("System.Func`2", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "HasDefinitions", $.Boolean);

    $.Property({Static:false, Public:false}, "HasMultipleDefinitions", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Scripting.Interpreter.LabelScopeKind */ 

JSIL.MakeEnum(
  "Microsoft.Scripting.Interpreter.LabelScopeKind", true, {
    Statement: 0, 
    Block: 1, 
    Switch: 2, 
    Lambda: 3, 
    Try: 4, 
    Catch: 5, 
    Finally: 6, 
    Filter: 7, 
    Expression: 8
  }, false
);

/* class Microsoft.Scripting.Interpreter.LabelScopeInfo */ 

(function LabelScopeInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelScopeKind)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.LabelTarget)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.LabelInfo))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo")]), null))) ();
  };

  function LabelScopeInfo__ctor (parent, kind) {
    this.Parent = parent;
    this.Kind = kind;
  };

  function LabelScopeInfo_AddLabelInfo (target, info) {
    if (this.Labels === null) {
      this.Labels = $S00().Construct();
    }
    $T03().prototype.set_Item.call(this.Labels, target, info);
  };

  function LabelScopeInfo_ContainsTarget (target) {
    return ((this.Labels !== null) && $T03().prototype.ContainsKey.call(this.Labels, target));
  };

  function LabelScopeInfo_get_CanJumpInto () {
    switch ((this.Kind).valueOf()) {
      case 0: 
      case 1: 
      case 2: 
      case 3: 
        var result = true;
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function LabelScopeInfo_TryGetLabelInfo (target, /* ref */ info) {
    if (this.Labels === null) {
      info.set(null);
      var result = false;
    } else {
      result = $T03().prototype.TryGetValue.call(this.Labels, target, /* ref */ info);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LabelScopeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeKind")]), 
      LabelScopeInfo__ctor
    );

    $.Method({Static:false, Public:false}, "AddLabelInfo", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo")]), 
      LabelScopeInfo_AddLabelInfo
    );

    $.Method({Static:false, Public:false}, "ContainsTarget", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.LabelTarget")]), 
      LabelScopeInfo_ContainsTarget
    );

    $.Method({Static:false, Public:false}, "get_CanJumpInto", 
      JSIL.MethodSignature.Return($.Boolean), 
      LabelScopeInfo_get_CanJumpInto
    );

    $.Method({Static:false, Public:false}, "TryGetLabelInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo")])]), 
      LabelScopeInfo_TryGetLabelInfo
    );

    $.Field({Static:false, Public:false}, "Labels", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Kind", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeKind")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type); 
    $.Property({Static:false, Public:false}, "CanJumpInto", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction */ 

(function LessThanInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ComparisonInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanChar)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanSByte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanByte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanUInt16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanUInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanInt64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanUInt64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanSingle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction_LessThanDouble)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function LessThanInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanInstruction_Create (type) {
    var arg_89_0 = null, arg_55_0 = null, arg_6F_0 = null, arg_A3_0 = null, arg_EE_0 = null, arg_BD_0 = null, arg_105_0 = null, arg_D7_0 = null, arg_11C_0 = null, arg_133_0 = null, arg_14A_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_89_0 = $thisType._Char) === null) {
          arg_89_0 = $thisType._Char = new ($T04())();
        }
        var result = arg_89_0;
        break;

      case 5: 
        if ((arg_55_0 = $thisType._SByte) === null) {
          arg_55_0 = $thisType._SByte = new ($T05())();
        }
        result = arg_55_0;
        break;

      case 6: 
        if ((arg_6F_0 = $thisType._Byte) === null) {
          arg_6F_0 = $thisType._Byte = new ($T06())();
        }
        result = arg_6F_0;
        break;

      case 7: 
        if ((arg_A3_0 = $thisType._Int16) === null) {
          arg_A3_0 = $thisType._Int16 = new ($T07())();
        }
        result = arg_A3_0;
        break;

      case 8: 
        if ((arg_EE_0 = $thisType._UInt16) === null) {
          arg_EE_0 = $thisType._UInt16 = new ($T08())();
        }
        result = arg_EE_0;
        break;

      case 9: 
        if ((arg_BD_0 = $thisType._Int32) === null) {
          arg_BD_0 = $thisType._Int32 = new ($T09())();
        }
        result = arg_BD_0;
        break;

      case 10: 
        if ((arg_105_0 = $thisType._UInt32) === null) {
          arg_105_0 = $thisType._UInt32 = new ($T0A())();
        }
        result = arg_105_0;
        break;

      case 11: 
        if ((arg_D7_0 = $thisType._Int64) === null) {
          arg_D7_0 = $thisType._Int64 = new ($T0B())();
        }
        result = arg_D7_0;
        break;

      case 12: 
        if ((arg_11C_0 = $thisType._UInt64) === null) {
          arg_11C_0 = $thisType._UInt64 = new ($T0C())();
        }
        result = arg_11C_0;
        break;

      case 13: 
        if ((arg_133_0 = $thisType._Single) === null) {
          arg_133_0 = $thisType._Single = new ($T0D())();
        }
        result = arg_133_0;
        break;

      case 14: 
        if ((arg_14A_0 = $thisType._Double) === null) {
          arg_14A_0 = $thisType._Double = new ($T0E())();
        }
        result = arg_14A_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function LessThanInstruction_CreateLifted (type) {
    var arg_AB_0 = null, arg_61_0 = null, arg_86_0 = null, arg_D0_0 = null, arg_148_0 = null, arg_F8_0 = null, arg_170_0 = null, arg_120_0 = null, arg_195_0 = null, arg_1BA_0 = null, arg_1DF_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_AB_0 = $thisType._CharLifted) === null) {
          arg_AB_0 = $thisType._CharLifted = (new ($T04())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        var result = arg_AB_0;
        break;

      case 5: 
        if ((arg_61_0 = $thisType._SByteLifted) === null) {
          arg_61_0 = $thisType._SByteLifted = (new ($T05())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_61_0;
        break;

      case 6: 
        if ((arg_86_0 = $thisType._ByteLifted) === null) {
          arg_86_0 = $thisType._ByteLifted = (new ($T06())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_86_0;
        break;

      case 7: 
        if ((arg_D0_0 = $thisType._Int16Lifted) === null) {
          arg_D0_0 = $thisType._Int16Lifted = (new ($T07())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_D0_0;
        break;

      case 8: 
        if ((arg_148_0 = $thisType._UInt16Lifted) === null) {
          arg_148_0 = $thisType._UInt16Lifted = (new ($T08())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_148_0;
        break;

      case 9: 
        if ((arg_F8_0 = $thisType._Int32Lifted) === null) {
          arg_F8_0 = $thisType._Int32Lifted = (new ($T09())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_F8_0;
        break;

      case 10: 
        if ((arg_170_0 = $thisType._UInt32Lifted) === null) {
          arg_170_0 = $thisType._UInt32Lifted = (new ($T0A())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_170_0;
        break;

      case 11: 
        if ((arg_120_0 = $thisType._Int64Lifted) === null) {
          arg_120_0 = $thisType._Int64Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_120_0;
        break;

      case 12: 
        if ((arg_195_0 = $thisType._UInt64Lifted) === null) {
          arg_195_0 = $thisType._UInt64Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_195_0;
        break;

      case 13: 
        if ((arg_1BA_0 = $thisType._SingleLifted) === null) {
          arg_1BA_0 = $thisType._SingleLifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1BA_0;
        break;

      case 14: 
        if ((arg_1DF_0 = $thisType._DoubleLifted) === null) {
          arg_1DF_0 = $thisType._DoubleLifted = (new ($T0E())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1DF_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function LessThanInstruction_DoNullComparison (l, r) {
    return (
      this.ComparisonInstruction$LiftedToNull$value
         ? null
         : false)
    ;
  };

  function LessThanInstruction_toString () {
    return "LessThan()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ComparisonInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      LessThanInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      LessThanInstruction_CreateLifted
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoNullComparison", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanInstruction_DoNullComparison
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LessThanInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_SByte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Char", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Byte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_CharLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanSByte */ 

(function LessThanSByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };

  function LessThanSByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanSByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanSByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanSByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanSByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanInt16 */ 

(function LessThanInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function LessThanInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanChar */ 

(function LessThanChar$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function LessThanChar__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanChar_DoCalculate (l, r) {
    return ((($T02().$Cast(l)).charCodeAt(0) | 0) < (($T02().$Cast(r)).charCodeAt(0) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanChar", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanChar__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanChar_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanInt32 */ 

(function LessThanInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function LessThanInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanInt64 */ 

(function LessThanInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function LessThanInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanInt64_DoCalculate (l, r) {
    return $T02().op_LessThan($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanByte */ 

(function LessThanByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function LessThanByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanUInt16 */ 

(function LessThanUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function LessThanUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanUInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanUInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanUInt32 */ 

(function LessThanUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function LessThanUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanUInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanUInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanUInt64 */ 

(function LessThanUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function LessThanUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanUInt64_DoCalculate (l, r) {
    return $T02().op_LessThan($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanUInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanSingle */ 

(function LessThanSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function LessThanSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanSingle_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanSingle_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanDouble */ 

(function LessThanDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function LessThanDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanDouble_DoCalculate (l, r) {
    return ($T02().$Cast(l) < $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanInstruction+LessThanDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanDouble_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction */ 

(function LessThanOrEqualInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ComparisonInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualChar)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualSByte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualByte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualUInt16)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualInt32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualUInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualInt64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualUInt64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualSingle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction_LessThanOrEqualDouble)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function LessThanOrEqualInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualInstruction_Create (type) {
    var arg_89_0 = null, arg_55_0 = null, arg_6F_0 = null, arg_A3_0 = null, arg_EE_0 = null, arg_BD_0 = null, arg_105_0 = null, arg_D7_0 = null, arg_11C_0 = null, arg_133_0 = null, arg_14A_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_89_0 = $thisType._Char) === null) {
          arg_89_0 = $thisType._Char = new ($T04())();
        }
        var result = arg_89_0;
        break;

      case 5: 
        if ((arg_55_0 = $thisType._SByte) === null) {
          arg_55_0 = $thisType._SByte = new ($T05())();
        }
        result = arg_55_0;
        break;

      case 6: 
        if ((arg_6F_0 = $thisType._Byte) === null) {
          arg_6F_0 = $thisType._Byte = new ($T06())();
        }
        result = arg_6F_0;
        break;

      case 7: 
        if ((arg_A3_0 = $thisType._Int16) === null) {
          arg_A3_0 = $thisType._Int16 = new ($T07())();
        }
        result = arg_A3_0;
        break;

      case 8: 
        if ((arg_EE_0 = $thisType._UInt16) === null) {
          arg_EE_0 = $thisType._UInt16 = new ($T08())();
        }
        result = arg_EE_0;
        break;

      case 9: 
        if ((arg_BD_0 = $thisType._Int32) === null) {
          arg_BD_0 = $thisType._Int32 = new ($T09())();
        }
        result = arg_BD_0;
        break;

      case 10: 
        if ((arg_105_0 = $thisType._UInt32) === null) {
          arg_105_0 = $thisType._UInt32 = new ($T0A())();
        }
        result = arg_105_0;
        break;

      case 11: 
        if ((arg_D7_0 = $thisType._Int64) === null) {
          arg_D7_0 = $thisType._Int64 = new ($T0B())();
        }
        result = arg_D7_0;
        break;

      case 12: 
        if ((arg_11C_0 = $thisType._UInt64) === null) {
          arg_11C_0 = $thisType._UInt64 = new ($T0C())();
        }
        result = arg_11C_0;
        break;

      case 13: 
        if ((arg_133_0 = $thisType._Single) === null) {
          arg_133_0 = $thisType._Single = new ($T0D())();
        }
        result = arg_133_0;
        break;

      case 14: 
        if ((arg_14A_0 = $thisType._Double) === null) {
          arg_14A_0 = $thisType._Double = new ($T0E())();
        }
        result = arg_14A_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function LessThanOrEqualInstruction_CreateLifted (type) {
    var arg_AB_0 = null, arg_61_0 = null, arg_86_0 = null, arg_D0_0 = null, arg_148_0 = null, arg_F8_0 = null, arg_170_0 = null, arg_120_0 = null, arg_195_0 = null, arg_1BA_0 = null, arg_1DF_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 4: 
        if ((arg_AB_0 = $thisType._CharLifted) === null) {
          arg_AB_0 = $thisType._CharLifted = (new ($T04())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        var result = arg_AB_0;
        break;

      case 5: 
        if ((arg_61_0 = $thisType._SByteLifted) === null) {
          arg_61_0 = $thisType._SByteLifted = (new ($T05())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_61_0;
        break;

      case 6: 
        if ((arg_86_0 = $thisType._ByteLifted) === null) {
          arg_86_0 = $thisType._ByteLifted = (new ($T06())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_86_0;
        break;

      case 7: 
        if ((arg_D0_0 = $thisType._Int16Lifted) === null) {
          arg_D0_0 = $thisType._Int16Lifted = (new ($T07())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_D0_0;
        break;

      case 8: 
        if ((arg_148_0 = $thisType._UInt16Lifted) === null) {
          arg_148_0 = $thisType._UInt16Lifted = (new ($T08())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_148_0;
        break;

      case 9: 
        if ((arg_F8_0 = $thisType._Int32Lifted) === null) {
          arg_F8_0 = $thisType._Int32Lifted = (new ($T09())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_F8_0;
        break;

      case 10: 
        if ((arg_170_0 = $thisType._UInt32Lifted) === null) {
          arg_170_0 = $thisType._UInt32Lifted = (new ($T0A())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_170_0;
        break;

      case 11: 
        if ((arg_120_0 = $thisType._Int64Lifted) === null) {
          arg_120_0 = $thisType._Int64Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_120_0;
        break;

      case 12: 
        if ((arg_195_0 = $thisType._UInt64Lifted) === null) {
          arg_195_0 = $thisType._UInt64Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_195_0;
        break;

      case 13: 
        if ((arg_1BA_0 = $thisType._SingleLifted) === null) {
          arg_1BA_0 = $thisType._SingleLifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1BA_0;
        break;

      case 14: 
        if ((arg_1DF_0 = $thisType._DoubleLifted) === null) {
          arg_1DF_0 = $thisType._DoubleLifted = (new ($T0E())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1DF_0;
        break;

      default: 
        throw $T0F().get_Unreachable();

    }
    return result;
  };

  function LessThanOrEqualInstruction_DoNullComparison (l, r) {
    return (
      this.ComparisonInstruction$LiftedToNull$value
         ? null
         : false)
    ;
  };

  function LessThanOrEqualInstruction_toString () {
    return "LessThanOrEqual()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ComparisonInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      LessThanOrEqualInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      LessThanOrEqualInstruction_CreateLifted
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoNullComparison", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualInstruction_DoNullComparison
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LessThanOrEqualInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_SByte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Char", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Byte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_CharLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualSByte */ 

(function LessThanOrEqualSByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };

  function LessThanOrEqualSByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualSByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualSByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualSByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualSByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualInt16 */ 

(function LessThanOrEqualInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function LessThanOrEqualInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualChar */ 

(function LessThanOrEqualChar$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function LessThanOrEqualChar__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualChar_DoCalculate (l, r) {
    return ((($T02().$Cast(l)).charCodeAt(0) | 0) <= (($T02().$Cast(r)).charCodeAt(0) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualChar", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualChar__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualChar_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualInt32 */ 

(function LessThanOrEqualInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function LessThanOrEqualInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualInt64 */ 

(function LessThanOrEqualInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function LessThanOrEqualInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualInt64_DoCalculate (l, r) {
    return $T02().op_LessThanOrEqual($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualByte */ 

(function LessThanOrEqualByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function LessThanOrEqualByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualUInt16 */ 

(function LessThanOrEqualUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function LessThanOrEqualUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualUInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualUInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualUInt32 */ 

(function LessThanOrEqualUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function LessThanOrEqualUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualUInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualUInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualUInt64 */ 

(function LessThanOrEqualUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function LessThanOrEqualUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualUInt64_DoCalculate (l, r) {
    return $T02().op_LessThanOrEqual($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualUInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualSingle */ 

(function LessThanOrEqualSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function LessThanOrEqualSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualSingle_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualSingle_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualDouble */ 

(function LessThanOrEqualDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function LessThanOrEqualDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function LessThanOrEqualDouble_DoCalculate (l, r) {
    return ($T02().$Cast(l) <= $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LessThanOrEqualInstruction+LessThanOrEqualDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      LessThanOrEqualDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      LessThanOrEqualDouble_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Scripting.Interpreter.IBoxableInstruction */ 

JSIL.MakeInterface(
  "Microsoft.Scripting.Interpreter.IBoxableInstruction", false, [], function ($) {
    $.Method({}, "BoxIfIndexMatches", new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]));
  }, []);

/* class Microsoft.Scripting.Interpreter.LocalAccessInstruction */ 

(function LocalAccessInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };

  function LocalAccessInstruction__ctor (index) {
    $T01().prototype._ctor.call(this);
    this._index = (index | 0);
  };

  function LocalAccessInstruction_ToDebugString (instructionIndex, cookie, labelIndexer, objects) {
    return (
      (cookie === null)
         ? JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), [this.get_InstructionName(), "(", this._index, ")"]))
         : JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), [this.get_InstructionName(), "(", cookie, ": ", this._index, ")"])))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LocalAccessInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LocalAccessInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToDebugString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Object, 
          $asm01.TypeRef("System.Func`2", [$.Int32, $.Int32]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object])
        ]), 
      LocalAccessInstruction_ToDebugString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadLocalInstruction */ 

(function LoadLocalInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function LoadLocalInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function LoadLocalInstruction_BoxIfIndexMatches (index) {
    return (
      ((index | 0) === (this._index | 0))
         ? $T02().LoadLocalBoxed(index)
         : null)
    ;
  };

  function LoadLocalInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadLocalInstruction_Run (frame) {
    var $temp00;
    frame.Data[($temp00 = (frame.StackIndex | 0), 
      frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0), 
      $temp00)] = frame.Data[this._index];
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadLocalInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LoadLocalInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      LoadLocalInstruction_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadLocalInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadLocalInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction */ 

(function LoadLocalBoxedInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };

  function LoadLocalBoxedInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function LoadLocalBoxedInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadLocalBoxedInstruction_Run (frame) {
    var $temp00;
    var box = $T03().$Cast(frame.Data[this._index]);
    frame.Data[($temp00 = (frame.StackIndex | 0), 
      frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0), 
      $temp00)] = JSIL.CloneParameter(T, box.Value);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LoadLocalBoxedInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadLocalBoxedInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadLocalBoxedInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction */ 

(function LoadLocalFromClosureInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function LoadLocalFromClosureInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function LoadLocalFromClosureInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadLocalFromClosureInstruction_Run (frame) {
    var $temp00;
    frame.Data[($temp00 = (frame.StackIndex | 0), 
      frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0), 
      $temp00)] = JSIL.CloneParameter(T, frame.Closure[this._index].Value);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LoadLocalFromClosureInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadLocalFromClosureInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadLocalFromClosureInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction */ 

(function LoadLocalFromClosureBoxedInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function LoadLocalFromClosureBoxedInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function LoadLocalFromClosureBoxedInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadLocalFromClosureBoxedInstruction_Run (frame) {
    var $temp00;
    frame.Data[($temp00 = (frame.StackIndex | 0), 
      frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0), 
      $temp00)] = frame.Closure[this._index];
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LoadLocalFromClosureBoxedInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadLocalFromClosureBoxedInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadLocalFromClosureBoxedInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AssignLocalInstruction */ 

(function AssignLocalInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function AssignLocalInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function AssignLocalInstruction_BoxIfIndexMatches (index) {
    return (
      ((index | 0) === (this._index | 0))
         ? $T02().AssignLocalBoxed(index)
         : null)
    ;
  };

  function AssignLocalInstruction_get_ConsumedStack () {
    return 1;
  };

  function AssignLocalInstruction_get_ProducedStack () {
    return 1;
  };

  function AssignLocalInstruction_Run (frame) {
    frame.Data[this._index] = frame.Peek();
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AssignLocalInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      AssignLocalInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      AssignLocalInstruction_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      AssignLocalInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      AssignLocalInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      AssignLocalInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.StoreLocalInstruction */ 

(function StoreLocalInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function StoreLocalInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function StoreLocalInstruction_BoxIfIndexMatches (index) {
    return (
      ((index | 0) === (this._index | 0))
         ? $T02().StoreLocalBoxed(index)
         : null)
    ;
  };

  function StoreLocalInstruction_get_ConsumedStack () {
    return 1;
  };

  function StoreLocalInstruction_Run (frame) {
    frame.Data[this._index] = frame.Data[(frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0))];
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.StoreLocalInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      StoreLocalInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      StoreLocalInstruction_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreLocalInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      StoreLocalInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction */ 

(function AssignLocalBoxedInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };

  function AssignLocalBoxedInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function AssignLocalBoxedInstruction_get_ConsumedStack () {
    return 1;
  };

  function AssignLocalBoxedInstruction_get_ProducedStack () {
    return 1;
  };

  function AssignLocalBoxedInstruction_Run (frame) {
    var box = $T03().$Cast(frame.Data[this._index]);
    box.Value = frame.Peek();
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      AssignLocalBoxedInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      AssignLocalBoxedInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      AssignLocalBoxedInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      AssignLocalBoxedInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction */ 

(function StoreLocalBoxedInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };

  function StoreLocalBoxedInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function StoreLocalBoxedInstruction_get_ConsumedStack () {
    return 1;
  };

  function StoreLocalBoxedInstruction_get_ProducedStack () {
    return 0;
  };

  function StoreLocalBoxedInstruction_Run (frame) {
    var box = $T03().$Cast(frame.Data[this._index]);
    box.Value = frame.Data[(frame.StackIndex = (((frame.StackIndex | 0) - 1) | 0))];
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      StoreLocalBoxedInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreLocalBoxedInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      StoreLocalBoxedInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      StoreLocalBoxedInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction */ 

(function AssignLocalToClosureInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };

  function AssignLocalToClosureInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function AssignLocalToClosureInstruction_get_ConsumedStack () {
    return 1;
  };

  function AssignLocalToClosureInstruction_get_ProducedStack () {
    return 1;
  };

  function AssignLocalToClosureInstruction_Run (frame) {
    var box = frame.Closure[this._index];
    box.Value = frame.Peek();
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      AssignLocalToClosureInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      AssignLocalToClosureInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      AssignLocalToClosureInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      AssignLocalToClosureInstruction_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction */ 

(function InitializeLocalInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalAccessInstruction)) ();
  };

  function InitializeLocalInstruction__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalAccessInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      InitializeLocalInstruction__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+Reference */ 

(function Reference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function Reference__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function Reference_BoxIfIndexMatches (index) {
    return (
      ((index | 0) === (this._index | 0))
         ? $T02().InitImmutableRefBox(index)
         : null)
    ;
  };

  function Reference_get_InstructionName () {
    return "InitRef";
  };

  function Reference_Run (frame) {
    frame.Data[this._index] = null;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+Reference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      Reference__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      Reference_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      Reference_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      Reference_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+ImmutableValue */ 

(function ImmutableValue$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_ImmutableBox)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function ImmutableValue__ctor (index, defaultValue) {
    $T02().prototype._ctor.call(this, index);
    this._defaultValue = defaultValue;
  };

  function ImmutableValue_BoxIfIndexMatches (index) {
    return (
      ((index | 0) === (this._index | 0))
         ? new ($T03())(index, this._defaultValue)
         : null)
    ;
  };

  function ImmutableValue_get_InstructionName () {
    return "InitImmutableValue";
  };

  function ImmutableValue_Run (frame) {
    frame.Data[this._index] = this._defaultValue;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+ImmutableValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      ImmutableValue__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      ImmutableValue_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      ImmutableValue_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ImmutableValue_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultValue", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+ImmutableBox */ 

(function ImmutableBox$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$asm01.TypeRef("System.Object")]), [$asm01.TypeRef("System.Object")]))) ();
  };

  function ImmutableBox__ctor (index, defaultValue) {
    $T02().prototype._ctor.call(this, index);
    this._defaultValue = defaultValue;
  };

  function ImmutableBox_get_InstructionName () {
    return "InitImmutableBox";
  };

  function ImmutableBox_Run (frame) {
    frame.Data[this._index] = $S00().Construct(this._defaultValue);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+ImmutableBox", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      ImmutableBox__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      ImmutableBox_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ImmutableBox_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultValue", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+ParameterBox */ 

(function ParameterBox$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$asm01.TypeRef("System.Object")]), [$asm01.TypeRef("System.Object")]))) ();
  };

  function ParameterBox__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function ParameterBox_Run (frame) {
    frame.Data[this._index] = $S00().Construct(frame.Data[this._index]);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+ParameterBox", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      ParameterBox__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      ParameterBox_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+Parameter */ 

(function Parameter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function Parameter__ctor (index) {
    $T01().prototype._ctor.call(this, index);
  };

  function Parameter_BoxIfIndexMatches (index) {
    if ((index | 0) === (this._index | 0)) {
      var result = $T03().ParameterBox(index);
    } else {
      result = null;
    }
    return result;
  };

  function Parameter_get_InstructionName () {
    return "InitParameter";
  };

  function Parameter_Run (frame) {
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+Parameter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      Parameter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      Parameter_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      Parameter_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      Parameter_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+MutableValue */ 

(function MutableValue$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction_MutableBox)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.TargetInvocationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ExceptionHelpers)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")]))) ();
  };

  function MutableValue__ctor (index, type) {
    $T02().prototype._ctor.call(this, index);
    this._type = type;
  };

  function MutableValue_BoxIfIndexMatches (index) {
    return (
      ((index | 0) === (this._index | 0))
         ? new ($T03())(index, this._type)
         : null)
    ;
  };

  function MutableValue_get_InstructionName () {
    return "InitMutableValue";
  };

  function MutableValue_Run (frame, $exception) {
    try {
      frame.Data[this._index] = $S00().CallStatic($T06(), "CreateInstance", null, this._type);
    } catch ($exception) {
      if ($T07().$Is($exception)) {
        var e = $exception;
        $T08().UpdateForRethrow(e.get_InnerException());
        throw e.get_InnerException();
      } else {
        throw $exception;
      }
    }
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+MutableValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("System.Type")]), 
      MutableValue__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "BoxIfIndexMatches", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$.Int32]), 
      MutableValue_BoxIfIndexMatches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      MutableValue_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      MutableValue_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IBoxableInstruction")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InitializeLocalInstruction+MutableBox */ 

(function MutableBox$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InitializeLocalInstruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Activator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$asm01.TypeRef("System.Object")]), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Type")]))) ();
  };

  function MutableBox__ctor (index, type) {
    $T02().prototype._ctor.call(this, index);
    this._type = type;
  };

  function MutableBox_get_InstructionName () {
    return "InitMutableBox";
  };

  function MutableBox_Run (frame) {
    frame.Data[this._index] = $S00().Construct($S01().CallStatic($T05(), "CreateInstance", null, this._type));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.InitializeLocalInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.InitializeLocalInstruction+MutableBox", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("System.Type")]), 
      MutableBox__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      MutableBox_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      MutableBox_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction */ 

(function RuntimeVariablesInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.IStrongBox))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.IStrongBox)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.RuntimeVariables)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function RuntimeVariablesInstruction__ctor (count) {
    $T01().prototype._ctor.call(this);
    this._count = (count | 0);
  };

  function RuntimeVariablesInstruction_get_ConsumedStack () {
    return this._count;
  };

  function RuntimeVariablesInstruction_get_ProducedStack () {
    return 1;
  };

  function RuntimeVariablesInstruction_Run (frame) {
    var ret = JSIL.Array.New($T04(), this._count);

    for (var i = (((ret.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      ret[i] = $T04().$Cast(frame.Pop());
    }
    $S00().CallVirtual("Push", null, frame, $T05().Create(ret));
    return 1;
  };

  function RuntimeVariablesInstruction_toString () {
    return "GetRuntimeVariables()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      RuntimeVariablesInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeVariablesInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeVariablesInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      RuntimeVariablesInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      RuntimeVariablesInstruction_toString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_count", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction */ 

(function ModInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction_ModDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function ModInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function ModInstruction_toString () {
    return "Mod()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      ModInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      ModInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModInt32 */ 

(function ModInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ModInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModInt32_Calculate (l, r) {
    return $T02().Int32ToObject((($T03().$Cast(l) % $T03().$Cast(r)) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModInt16 */ 

(function ModInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function ModInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModInt16_Calculate (l, r) {
    return ((($T02().$Cast(l) % $T02().$Cast(r)) + 0x8000 & 0xFFFF) - 0x8000);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModInt64 */ 

(function ModInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function ModInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModInt64_Calculate (l, r) {
    return $T02().op_Modulus($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModUInt16 */ 

(function ModUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function ModUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModUInt16_Calculate (l, r) {
    return (($T02().$Cast(l) % $T02().$Cast(r)) & 0xFFFF);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModUInt32 */ 

(function ModUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function ModUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModUInt32_Calculate (l, r) {
    return (($T02().$Cast(l) % $T02().$Cast(r)) >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModUInt64 */ 

(function ModUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function ModUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModUInt64_Calculate (l, r) {
    return $T02().op_Modulus($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModSingle */ 

(function ModSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function ModSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModSingle_Calculate (l, r) {
    return ($T02().$Cast(l) % $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ModInstruction+ModDouble */ 

(function ModDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ModInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function ModDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ModDouble_Calculate (l, r) {
    return ($T02().$Cast(l) % $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ModInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ModInstruction+ModDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ModDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ModDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction */ 

(function MulInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction_MulDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function MulInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function MulInstruction_toString () {
    return "Mul()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      MulInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      MulInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulInt32 */ 

(function MulInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function MulInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulInt32_Calculate (l, r) {
    return $T02().Int32ToObject(Math.imul($T03().$Cast(l), $T03().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulInt16 */ 

(function MulInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function MulInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulInt16_Calculate (l, r) {
    return ((Math.imul($T02().$Cast(l), $T02().$Cast(r)) + 0x8000 & 0xFFFF) - 0x8000);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulInt64 */ 

(function MulInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function MulInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulInt64_Calculate (l, r) {
    return $T02().op_Multiplication($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulUInt16 */ 

(function MulUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function MulUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulUInt16_Calculate (l, r) {
    return ((Math.imul($T02().$Cast(l), $T02().$Cast(r)) >>> 0) & 0xFFFF);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulUInt32 */ 

(function MulUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function MulUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulUInt32_Calculate (l, r) {
    return (Math.imul($T02().$Cast(l), $T02().$Cast(r)) >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulUInt64 */ 

(function MulUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function MulUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulUInt64_Calculate (l, r) {
    return $T02().op_Multiplication($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulSingle */ 

(function MulSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function MulSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulSingle_Calculate (l, r) {
    return ($T02().$Cast(l) * $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulInstruction+MulDouble */ 

(function MulDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function MulDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulDouble_Calculate (l, r) {
    return ($T02().$Cast(l) * $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulInstruction+MulDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction */ 

(function MulOvfInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction_MulOvfDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function MulOvfInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function MulOvfInstruction_toString () {
    return "MulOvf()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      MulOvfInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      MulOvfInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfInt32 */ 

(function MulOvfInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function MulOvfInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$OverflowCheck(Math.imul($T03().$Cast(l), $T03().$Cast(r))));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfInt16 */ 

(function MulOvfInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function MulOvfInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfInt16_Calculate (l, r) {
    return $T02().$OverflowCheck((($T03().$OverflowCheck(Math.imul($T02().$Cast(l), $T02().$Cast(r))) + 0x8000 & 0xFFFF) - 0x8000));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfInt64 */ 

(function MulOvfInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function MulOvfInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfInt64_Calculate (l, r) {
    return $T02().$OverflowCheck($T02().op_Multiplication($T02().$Cast(l), $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfUInt16 */ 

(function MulOvfUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function MulOvfUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfUInt16_Calculate (l, r) {
    return $T02().$OverflowCheck(($T03().$OverflowCheck((Math.imul($T02().$Cast(l), $T02().$Cast(r)) >>> 0)) & 0xFFFF));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfUInt32 */ 

(function MulOvfUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function MulOvfUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfUInt32_Calculate (l, r) {
    return $T02().$OverflowCheck((Math.imul($T02().$Cast(l), $T02().$Cast(r)) >>> 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfUInt64 */ 

(function MulOvfUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function MulOvfUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfUInt64_Calculate (l, r) {
    return $T02().$OverflowCheck($T02().op_Multiplication($T02().$Cast(l), $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfSingle */ 

(function MulOvfSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function MulOvfSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfSingle_Calculate (l, r) {
    return ($T02().$Cast(l) * $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfDouble */ 

(function MulOvfDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.MulOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function MulOvfDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MulOvfDouble_Calculate (l, r) {
    return ($T02().$Cast(l) * $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.MulOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.MulOvfInstruction+MulOvfDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MulOvfDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      MulOvfDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction */ 

(function NegateInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateUInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateUInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateInt64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateSingle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateDouble)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateInt16Lifted)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateUInt16Lifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateInt32Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateUInt32Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateInt64Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateSingleLifted)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction_NegateDoubleLifted)) ();
  };

  function NegateInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInstruction_Create (type) {
    var arg_49_0 = null, arg_91_0 = null, arg_63_0 = null, arg_A8_0 = null, arg_7A_0 = null, arg_BF_0 = null, arg_D6_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T03())();
        }
        var result = arg_49_0;
        return result;

      case 8: 
        if ((arg_91_0 = $thisType._UInt16) === null) {
          arg_91_0 = $thisType._UInt16 = new ($T04())();
        }
        result = arg_91_0;
        return result;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T05())();
        }
        result = arg_63_0;
        return result;

      case 10: 
        if ((arg_A8_0 = $thisType._UInt32) === null) {
          arg_A8_0 = $thisType._UInt32 = new ($T06())();
        }
        result = arg_A8_0;
        return result;

      case 11: 
        if ((arg_7A_0 = $thisType._Int64) === null) {
          arg_7A_0 = $thisType._Int64 = new ($T07())();
        }
        result = arg_7A_0;
        return result;

      case 13: 
        if ((arg_BF_0 = $thisType._Single) === null) {
          arg_BF_0 = $thisType._Single = new ($T08())();
        }
        result = arg_BF_0;
        return result;

      case 14: 
        if ((arg_D6_0 = $thisType._Double) === null) {
          arg_D6_0 = $thisType._Double = new ($T09())();
        }
        result = arg_D6_0;
        return result;

    }
    throw $T0A().get_Unreachable();
  };

  function NegateInstruction_CreateLifted (type) {
    var arg_49_0 = null, arg_91_0 = null, arg_63_0 = null, arg_A8_0 = null, arg_7A_0 = null, arg_BF_0 = null, arg_D6_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16Lifted) === null) {
          arg_49_0 = $thisType._Int16Lifted = new ($T0B())();
        }
        var result = arg_49_0;
        return result;

      case 8: 
        if ((arg_91_0 = $thisType._UInt16Lifted) === null) {
          arg_91_0 = $thisType._UInt16Lifted = new ($T0C())();
        }
        result = arg_91_0;
        return result;

      case 9: 
        if ((arg_63_0 = $thisType._Int32Lifted) === null) {
          arg_63_0 = $thisType._Int32Lifted = new ($T0D())();
        }
        result = arg_63_0;
        return result;

      case 10: 
        if ((arg_A8_0 = $thisType._UInt32Lifted) === null) {
          arg_A8_0 = $thisType._UInt32Lifted = new ($T0E())();
        }
        result = arg_A8_0;
        return result;

      case 11: 
        if ((arg_7A_0 = $thisType._Int64Lifted) === null) {
          arg_7A_0 = $thisType._Int64Lifted = new ($T0F())();
        }
        result = arg_7A_0;
        return result;

      case 13: 
        if ((arg_BF_0 = $thisType._SingleLifted) === null) {
          arg_BF_0 = $thisType._SingleLifted = new ($T10())();
        }
        result = arg_BF_0;
        return result;

      case 14: 
        if ((arg_D6_0 = $thisType._DoubleLifted) === null) {
          arg_D6_0 = $thisType._DoubleLifted = new ($T11())();
        }
        result = arg_D6_0;
        return result;

    }
    throw $T0A().get_Unreachable();
  };

  function NegateInstruction_get_ConsumedStack () {
    return 1;
  };

  function NegateInstruction_get_ProducedStack () {
    return 1;
  };

  function NegateInstruction_toString () {
    return "Negate()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NegateInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NegateInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NegateInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NegateInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NegateInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt32 */ 

(function NegateInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NegateInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInt32_Run (frame) {
    var v = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T03().Int32ToObject((-$T04().$Cast(v) | 0));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt16 */ 

(function NegateInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function NegateInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInt16_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = ((-v + 0x8000 & 0xFFFF) - 0x8000);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt64 */ 

(function NegateInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function NegateInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInt64_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().op_UnaryNegation(v);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInt64__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateInt64_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt16 */ 

(function NegateUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function NegateUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateUInt16_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (-v & 0xFFFF);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateUInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateUInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt32 */ 

(function NegateUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function NegateUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateUInt32_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (-($T04().FromNumber(v)).ToNumber(-1, false)).ToNumber(-1, false);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateUInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateUInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateSingle */ 

(function NegateSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function NegateSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateSingle_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = -v;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateSingle__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateSingle_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateDouble */ 

(function NegateDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function NegateDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateDouble_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = -v;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateDouble__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateDouble_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt32Lifted */ 

(function NegateInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function NegateInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInt32Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int32>(neg:int32(valueof:int32(ldloc:valuetype [mscorlib]System.Nullable`1<int32>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInt32Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateInt32Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt16Lifted */ 

(function NegateInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NegateInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInt16Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](neg:int16[exp:int32](valueof:int16[exp:int32](ldloc:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](v))))");
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? ((JSIL.Nullable_ValueOrDefault(num, 0) + 0x8000 & 0xFFFF) - 0x8000)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInt16Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateInt16Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt64Lifted */ 

(function NegateInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };

  function NegateInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateInt64Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int64>(neg:int64(valueof:int64(ldloc:valuetype [mscorlib]System.Nullable`1<int64>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateInt64Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateInt64Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt16Lifted */ 

(function NegateUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NegateUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateUInt16Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](neg:uint16[exp:int32](valueof:uint16[exp:int32](ldloc:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](v))))");
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? (JSIL.Nullable_ValueOrDefault(num, 0) & 0xFFFF)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateUInt16Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt32Lifted */ 

(function NegateUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function NegateUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateUInt32Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = v;
    var num2 = (
      (num !== null)
         ? $T03().op_UnaryNegation(($T04().FromNumber(JSIL.Nullable_ValueOrDefault(num, 0))).ToInt64())
         : null)
    ;
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num2 !== null)
         ? (JSIL.Nullable_ValueOrDefault(num2, 0)).ToNumber(4294967295, false)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateUInt32Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateSingleLifted */ 

(function NegateSingleLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Single))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function NegateSingleLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateSingleLifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = v;
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? -JSIL.Nullable_ValueOrDefault(num, 0)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateSingleLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateSingleLifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateSingleLifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateInstruction+NegateDoubleLifted */ 

(function NegateDoubleLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Double))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function NegateDoubleLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateDoubleLifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = v;
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? -JSIL.Nullable_ValueOrDefault(num, 0)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateInstruction+NegateDoubleLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateDoubleLifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateDoubleLifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction */ 

(function NegateOvfInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfUInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfUInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfInt64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfSingle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfDouble)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfInt16Lifted)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfUInt16Lifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfInt32Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfUInt32Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfInt64Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfSingleLifted)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction_NegateOvfDoubleLifted)) ();
  };

  function NegateOvfInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInstruction_Create (type) {
    var arg_49_0 = null, arg_91_0 = null, arg_63_0 = null, arg_A8_0 = null, arg_7A_0 = null, arg_BF_0 = null, arg_D6_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T03())();
        }
        var result = arg_49_0;
        return result;

      case 8: 
        if ((arg_91_0 = $thisType._UInt16) === null) {
          arg_91_0 = $thisType._UInt16 = new ($T04())();
        }
        result = arg_91_0;
        return result;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T05())();
        }
        result = arg_63_0;
        return result;

      case 10: 
        if ((arg_A8_0 = $thisType._UInt32) === null) {
          arg_A8_0 = $thisType._UInt32 = new ($T06())();
        }
        result = arg_A8_0;
        return result;

      case 11: 
        if ((arg_7A_0 = $thisType._Int64) === null) {
          arg_7A_0 = $thisType._Int64 = new ($T07())();
        }
        result = arg_7A_0;
        return result;

      case 13: 
        if ((arg_BF_0 = $thisType._Single) === null) {
          arg_BF_0 = $thisType._Single = new ($T08())();
        }
        result = arg_BF_0;
        return result;

      case 14: 
        if ((arg_D6_0 = $thisType._Double) === null) {
          arg_D6_0 = $thisType._Double = new ($T09())();
        }
        result = arg_D6_0;
        return result;

    }
    throw $T0A().get_Unreachable();
  };

  function NegateOvfInstruction_CreateLifted (type) {
    var arg_49_0 = null, arg_91_0 = null, arg_63_0 = null, arg_A8_0 = null, arg_7A_0 = null, arg_BF_0 = null, arg_D6_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16Lifted) === null) {
          arg_49_0 = $thisType._Int16Lifted = new ($T0B())();
        }
        var result = arg_49_0;
        return result;

      case 8: 
        if ((arg_91_0 = $thisType._UInt16Lifted) === null) {
          arg_91_0 = $thisType._UInt16Lifted = new ($T0C())();
        }
        result = arg_91_0;
        return result;

      case 9: 
        if ((arg_63_0 = $thisType._Int32Lifted) === null) {
          arg_63_0 = $thisType._Int32Lifted = new ($T0D())();
        }
        result = arg_63_0;
        return result;

      case 10: 
        if ((arg_A8_0 = $thisType._UInt32Lifted) === null) {
          arg_A8_0 = $thisType._UInt32Lifted = new ($T0E())();
        }
        result = arg_A8_0;
        return result;

      case 11: 
        if ((arg_7A_0 = $thisType._Int64Lifted) === null) {
          arg_7A_0 = $thisType._Int64Lifted = new ($T0F())();
        }
        result = arg_7A_0;
        return result;

      case 13: 
        if ((arg_BF_0 = $thisType._SingleLifted) === null) {
          arg_BF_0 = $thisType._SingleLifted = new ($T10())();
        }
        result = arg_BF_0;
        return result;

      case 14: 
        if ((arg_D6_0 = $thisType._DoubleLifted) === null) {
          arg_D6_0 = $thisType._DoubleLifted = new ($T11())();
        }
        result = arg_D6_0;
        return result;

    }
    throw $T0A().get_Unreachable();
  };

  function NegateOvfInstruction_get_ConsumedStack () {
    return 1;
  };

  function NegateOvfInstruction_get_ProducedStack () {
    return 1;
  };

  function NegateOvfInstruction_toString () {
    return "NegateOvf()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NegateOvfInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NegateOvfInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NegateOvfInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NegateOvfInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NegateOvfInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt32 */ 

(function NegateOvfInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };

  function NegateOvfInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInt32_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T03().Int32ToObject($T02().$OverflowCheck((0 - v)));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt16 */ 

(function NegateOvfInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NegateOvfInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInt16_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().$OverflowCheck((($T03().$OverflowCheck((0 - v)) + 0x8000 & 0xFFFF) - 0x8000));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt64 */ 

(function NegateOvfInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function NegateOvfInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInt64_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().$OverflowCheck($T02().op_Subtraction($T02().Create(0, 0, 0), v));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInt64__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfInt64_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt16 */ 

(function NegateOvfUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function NegateOvfUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfUInt16_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().$OverflowCheck(($T03().$OverflowCheck((0 - v)) & 0xFFFF));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfUInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfUInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt32 */ 

(function NegateOvfUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function NegateOvfUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfUInt32_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().$OverflowCheck(($T04().$OverflowCheck($T04().op_Subtraction(
            $T04().Create(0, 0, 0), 
            $T04().FromNumber(v)
          ))).ToNumber(-1, false));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfUInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfUInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfSingle */ 

(function NegateOvfSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function NegateOvfSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfSingle_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = -v;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfSingle__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfSingle_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfDouble */ 

(function NegateOvfDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function NegateOvfDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfDouble_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = -v;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfDouble__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfDouble_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt32Lifted */ 

(function NegateOvfInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function NegateOvfInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInt32Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int32>(neg:int32(valueof:int32(ldloc:valuetype [mscorlib]System.Nullable`1<int32>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInt32Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfInt32Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt16Lifted */ 

(function NegateOvfInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NegateOvfInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInt16Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](neg:int16[exp:int32](valueof:int16[exp:int32](ldloc:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](v))))");
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? ((JSIL.Nullable_ValueOrDefault(num, 0) + 0x8000 & 0xFFFF) - 0x8000)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInt16Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfInt16Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt64Lifted */ 

(function NegateOvfInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };

  function NegateOvfInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfInt64Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int64>(neg:int64(valueof:int64(ldloc:valuetype [mscorlib]System.Nullable`1<int64>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfInt64Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfInt64Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt16Lifted */ 

(function NegateOvfUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NegateOvfUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfUInt16Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](neg:uint16[exp:int32](valueof:uint16[exp:int32](ldloc:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](v))))");
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? (JSIL.Nullable_ValueOrDefault(num, 0) & 0xFFFF)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfUInt16Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt32Lifted */ 

(function NegateOvfUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function NegateOvfUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfUInt32Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = v;
    var num2 = (
      (num !== null)
         ? $T03().op_UnaryNegation(($T04().FromNumber(JSIL.Nullable_ValueOrDefault(num, 0))).ToInt64())
         : null)
    ;
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num2 !== null)
         ? (JSIL.Nullable_ValueOrDefault(num2, 0)).ToNumber(4294967295, false)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfUInt32Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfSingleLifted */ 

(function NegateOvfSingleLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Single))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function NegateOvfSingleLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfSingleLifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = v;
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? -JSIL.Nullable_ValueOrDefault(num, 0)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfSingleLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfSingleLifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfSingleLifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfDoubleLifted */ 

(function NegateOvfDoubleLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NegateOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Double))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function NegateOvfDoubleLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NegateOvfDoubleLifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = v;
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? -JSIL.Nullable_ValueOrDefault(num, 0)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NegateOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NegateOvfInstruction+NegateOvfDoubleLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NegateOvfDoubleLifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NegateOvfDoubleLifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction */ 

(function NotEqualInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ComparisonInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Enum)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualReference)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualBoolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualChar)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualSByte)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualByte)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualInt16)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualInt32)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualInt64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualSingle)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction_NotEqualDouble)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };

  function NotEqualInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualInstruction_Create (type) {
    var arg_1A9_0 = null, arg_72_0 = null, arg_C0_0 = null, arg_8C_0 = null, arg_A6_0 = null, arg_DA_0 = null, arg_128_0 = null, arg_F4_0 = null, arg_142_0 = null, arg_10E_0 = null, arg_159_0 = null, arg_170_0 = null, arg_187_0 = null;
    switch (($T03().GetTypeCode((
            $T03().IsEnum(type)
               ? $T04().GetUnderlyingType(type)
               : type)
        )).valueOf()) {
      case 1: 
        if (!$T03().IsValueType(type)) {
          if ((arg_1A9_0 = $thisType._Reference) === null) {
            arg_1A9_0 = $thisType._Reference = new ($T05())();
          }
          var result = arg_1A9_0;
          return result;
        }
        throw $S00().Construct();

      case 3: 
        if ((arg_72_0 = $thisType._Boolean) === null) {
          arg_72_0 = $thisType._Boolean = new ($T07())();
        }
        result = arg_72_0;
        return result;

      case 4: 
        if ((arg_C0_0 = $thisType._Char) === null) {
          arg_C0_0 = $thisType._Char = new ($T08())();
        }
        result = arg_C0_0;
        return result;

      case 5: 
        if ((arg_8C_0 = $thisType._SByte) === null) {
          arg_8C_0 = $thisType._SByte = new ($T09())();
        }
        result = arg_8C_0;
        return result;

      case 6: 
        if ((arg_A6_0 = $thisType._Byte) === null) {
          arg_A6_0 = $thisType._Byte = new ($T0A())();
        }
        result = arg_A6_0;
        return result;

      case 7: 
        if ((arg_DA_0 = $thisType._Int16) === null) {
          arg_DA_0 = $thisType._Int16 = new ($T0B())();
        }
        result = arg_DA_0;
        return result;

      case 8: 
        if ((arg_128_0 = $thisType._UInt16) === null) {
          arg_128_0 = $thisType._UInt16 = new ($T0B())();
        }
        result = arg_128_0;
        return result;

      case 9: 
        if ((arg_F4_0 = $thisType._Int32) === null) {
          arg_F4_0 = $thisType._Int32 = new ($T0C())();
        }
        result = arg_F4_0;
        return result;

      case 10: 
        if ((arg_142_0 = $thisType._UInt32) === null) {
          arg_142_0 = $thisType._UInt32 = new ($T0C())();
        }
        result = arg_142_0;
        return result;

      case 11: 
        if ((arg_10E_0 = $thisType._Int64) === null) {
          arg_10E_0 = $thisType._Int64 = new ($T0D())();
        }
        result = arg_10E_0;
        return result;

      case 12: 
        if ((arg_159_0 = $thisType._UInt64) === null) {
          arg_159_0 = $thisType._UInt64 = new ($T0D())();
        }
        result = arg_159_0;
        return result;

      case 13: 
        if ((arg_170_0 = $thisType._Single) === null) {
          arg_170_0 = $thisType._Single = new ($T0E())();
        }
        result = arg_170_0;
        return result;

      case 14: 
        if ((arg_187_0 = $thisType._Double) === null) {
          arg_187_0 = $thisType._Double = new ($T0F())();
        }
        result = arg_187_0;
        return result;

    }
    throw $S00().Construct();
  };

  function NotEqualInstruction_CreateLifted (type) {
    var arg_76_0 = null, arg_E5_0 = null, arg_9B_0 = null, arg_C0_0 = null, arg_10D_0 = null, arg_185_0 = null, arg_135_0 = null, arg_1AD_0 = null, arg_15D_0 = null, arg_1D2_0 = null, arg_1F7_0 = null, arg_21C_0 = null;
    switch (($T03().GetTypeCode((
            $T03().IsEnum(type)
               ? $T04().GetUnderlyingType(type)
               : type)
        )).valueOf()) {
      case 3: 
        if ((arg_76_0 = $thisType._BooleanLifted) === null) {
          arg_76_0 = $thisType._BooleanLifted = (new ($T07())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        var result = arg_76_0;
        break;

      case 4: 
        if ((arg_E5_0 = $thisType._CharLifted) === null) {
          arg_E5_0 = $thisType._CharLifted = (new ($T08())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_E5_0;
        break;

      case 5: 
        if ((arg_9B_0 = $thisType._SByteLifted) === null) {
          arg_9B_0 = $thisType._SByteLifted = (new ($T09())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_9B_0;
        break;

      case 6: 
        if ((arg_C0_0 = $thisType._ByteLifted) === null) {
          arg_C0_0 = $thisType._ByteLifted = (new ($T0A())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_C0_0;
        break;

      case 7: 
        if ((arg_10D_0 = $thisType._Int16Lifted) === null) {
          arg_10D_0 = $thisType._Int16Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_10D_0;
        break;

      case 8: 
        if ((arg_185_0 = $thisType._UInt16Lifted) === null) {
          arg_185_0 = $thisType._UInt16Lifted = (new ($T0B())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_185_0;
        break;

      case 9: 
        if ((arg_135_0 = $thisType._Int32Lifted) === null) {
          arg_135_0 = $thisType._Int32Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_135_0;
        break;

      case 10: 
        if ((arg_1AD_0 = $thisType._UInt32Lifted) === null) {
          arg_1AD_0 = $thisType._UInt32Lifted = (new ($T0C())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1AD_0;
        break;

      case 11: 
        if ((arg_15D_0 = $thisType._Int64Lifted) === null) {
          arg_15D_0 = $thisType._Int64Lifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_15D_0;
        break;

      case 12: 
        if ((arg_1D2_0 = $thisType._UInt64Lifted) === null) {
          arg_1D2_0 = $thisType._UInt64Lifted = (new ($T0D())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1D2_0;
        break;

      case 13: 
        if ((arg_1F7_0 = $thisType._SingleLifted) === null) {
          arg_1F7_0 = $thisType._SingleLifted = (new ($T0E())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_1F7_0;
        break;

      case 14: 
        if ((arg_21C_0 = $thisType._DoubleLifted) === null) {
          arg_21C_0 = $thisType._DoubleLifted = (new ($T0F())()).__Initialize__({
              LiftedToNull: true}
          );
        }
        result = arg_21C_0;
        break;

      default: 
        throw $T10().get_Unreachable();

    }
    return result;
  };

  function NotEqualInstruction_DoNullComparison (l, r) {
    return (
      this.ComparisonInstruction$LiftedToNull$value
         ? null
         : (l !== r))
    ;
  };

  function NotEqualInstruction_toString () {
    return "NotEqual()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ComparisonInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NotEqualInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NotEqualInstruction_CreateLifted
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoNullComparison", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualInstruction_DoNullComparison
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NotEqualInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Reference", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Boolean", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Char", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Byte", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_BooleanLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_CharLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_ByteLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_SingleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_DoubleLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualBoolean */ 

(function NotEqualBoolean$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function NotEqualBoolean__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualBoolean_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualBoolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualBoolean__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualBoolean_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualSByte */ 

(function NotEqualSByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.SByte)) ();
  };

  function NotEqualSByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualSByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualSByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualSByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualSByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualInt16 */ 

(function NotEqualInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function NotEqualInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualChar */ 

(function NotEqualChar$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Char)) ();
  };

  function NotEqualChar__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualChar_DoCalculate (l, r) {
    return ((($T02().$Cast(l)).charCodeAt(0) | 0) !== (($T02().$Cast(r)).charCodeAt(0) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualChar", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualChar__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualChar_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualInt32 */ 

(function NotEqualInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NotEqualInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualInt64 */ 

(function NotEqualInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function NotEqualInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualInt64_DoCalculate (l, r) {
    return $T02().op_Inequality($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualByte */ 

(function NotEqualByte$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Byte)) ();
  };

  function NotEqualByte__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualByte_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualByte__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualByte_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualUInt16 */ 

(function NotEqualUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function NotEqualUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualUInt16_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualUInt16_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualUInt32 */ 

(function NotEqualUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function NotEqualUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualUInt32_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualUInt32_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualUInt64 */ 

(function NotEqualUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function NotEqualUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualUInt64_DoCalculate (l, r) {
    return $T02().op_Inequality($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualUInt64_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualSingle */ 

(function NotEqualSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function NotEqualSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualSingle_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualSingle_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualDouble */ 

(function NotEqualDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function NotEqualDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualDouble_DoCalculate (l, r) {
    return ($T02().$Cast(l) !== $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualDouble_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualReference */ 

(function NotEqualReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotEqualInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function NotEqualReference__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotEqualReference_Calculate (l, r) {
    return (l !== r);
  };

  function NotEqualReference_DoCalculate (l, r) {
    throw $T02().get_Unreachable();
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotEqualInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotEqualInstruction+NotEqualReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotEqualReference__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualReference_Calculate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoCalculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      NotEqualReference_DoCalculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction */ 

(function NotInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotBoolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotBooleanLifted)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotInt16Lifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotUInt16Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotInt32Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotUInt32Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotInt64Lifted)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction_NotUInt64Lifted)) ();
  };

  function NotInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInstruction_Create (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._Boolean) === null) {
          arg_DE_0 = $thisType._Boolean = new ($T03())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16) === null) {
          arg_51_0 = $thisType._Int16 = new ($T04())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16) === null) {
          arg_99_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32) === null) {
          arg_6B_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32) === null) {
          arg_B0_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64) === null) {
          arg_82_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64) === null) {
          arg_C7_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0A().get_Unreachable();
  };

  function NotInstruction_CreateLifted (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T02().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._BooleanLifted) === null) {
          arg_DE_0 = $thisType._BooleanLifted = new ($T0B())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16Lifted) === null) {
          arg_51_0 = $thisType._Int16Lifted = new ($T0C())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16Lifted) === null) {
          arg_99_0 = $thisType._UInt16Lifted = new ($T0D())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32Lifted) === null) {
          arg_6B_0 = $thisType._Int32Lifted = new ($T0E())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32Lifted) === null) {
          arg_B0_0 = $thisType._UInt32Lifted = new ($T0F())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64Lifted) === null) {
          arg_82_0 = $thisType._Int64Lifted = new ($T10())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64Lifted) === null) {
          arg_C7_0 = $thisType._UInt64Lifted = new ($T11())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0A().get_Unreachable();
  };

  function NotInstruction_get_ConsumedStack () {
    return 1;
  };

  function NotInstruction_get_ProducedStack () {
    return 1;
  };

  function NotInstruction_toString () {
    return "Not()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NotInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      NotInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NotInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NotInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NotInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Boolean", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_BooleanLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotBoolean */ 

(function NotBoolean$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function NotBoolean__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotBoolean_Run (frame) {
    $S00().CallVirtual("Push", null, frame, (
        $T02().$Cast(frame.Pop())
           ? $T03().False
           : $T03().True)
    );
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotBoolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotBoolean__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotBoolean_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotInt32 */ 

(function NotInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };

  function NotInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInt32_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T03().Int32ToObject((~v | 0));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotInt16 */ 

(function NotInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function NotInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInt16_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = ((~v + 0x8000 & 0xFFFF) - 0x8000);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotInt64 */ 

(function NotInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function NotInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInt64_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().op_OnesComplement(v);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInt64__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotInt64_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotUInt16 */ 

(function NotUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function NotUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotUInt16_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().op_OnesComplement(v);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotUInt16__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotUInt16_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotUInt32 */ 

(function NotUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function NotUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotUInt32_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (~v >>> 0);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotUInt32__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotUInt32_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotUInt64 */ 

(function NotUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function NotUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotUInt64_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = $T02().op_OnesComplement(v);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotUInt64__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotUInt64_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotBooleanLifted */ 

(function NotBooleanLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Boolean))) ();
  };

  function NotBooleanLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotBooleanLifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<bool>(logicnot:bool(valueof:bool(ldloc:valuetype [mscorlib]System.Nullable`1<bool>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotBooleanLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotBooleanLifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotBooleanLifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotInt32Lifted */ 

(function NotInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function NotInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInt32Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int32>(not:int32(valueof:int32(ldloc:valuetype [mscorlib]System.Nullable`1<int32>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInt32Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotInt32Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotInt16Lifted */ 

(function NotInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function NotInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInt16Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](not:int16[exp:int32](valueof:int16[exp:int32](ldloc:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](v))))");
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (
      (num !== null)
         ? ((JSIL.Nullable_ValueOrDefault(num, 0) + 0x8000 & 0xFFFF) - 0x8000)
         : null)
    ;
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInt16Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotInt16Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotInt64Lifted */ 

(function NotInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };

  function NotInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotInt64Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int64>(not:int64(valueof:int64(ldloc:valuetype [mscorlib]System.Nullable`1<int64>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotInt64Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotInt64Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotUInt16Lifted */ 

(function NotUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };

  function NotUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotUInt16Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint64>(not:uint64(valueof:uint64(ldloc:valuetype [mscorlib]System.Nullable`1<uint64>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotUInt16Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotUInt32Lifted */ 

(function NotUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };

  function NotUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotUInt32Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint32>(not:uint32(valueof:uint32(ldloc:valuetype [mscorlib]System.Nullable`1<uint32>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotUInt32Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NotInstruction+NotUInt64Lifted */ 

(function NotUInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NotInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };

  function NotUInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function NotUInt64Lifted_Run (frame) {
    var v = $T02().$Cast(frame.Data[(((frame.StackIndex | 0) - 1) | 0)]);
    frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint64>(not:uint64(valueof:uint64(ldloc:valuetype [mscorlib]System.Nullable`1<uint64>(v))))");
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NotInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NotInstruction+NotUInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotUInt64Lifted__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NotUInt64Lifted_Run
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NumericConvertInstruction */ 

(function NumericConvertInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };

  function NumericConvertInstruction__ctor (from, to) {
    $T01().prototype._ctor.call(this);
    this._from = from;
    this._to = to;
  };

  function NumericConvertInstruction_get_ConsumedStack () {
    return 1;
  };

  function NumericConvertInstruction_get_ProducedStack () {
    return 1;
  };

  function NumericConvertInstruction_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T03(), [this.get_InstructionName(), "(", this._from, "->", this._to, ")"]));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NumericConvertInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TypeCode"), $asm01.TypeRef("System.TypeCode")]), 
      NumericConvertInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NumericConvertInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NumericConvertInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NumericConvertInstruction_toString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_from", $asm01.TypeRef("System.TypeCode")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_to", $asm01.TypeRef("System.TypeCode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NumericConvertInstruction+Unchecked */ 

(function Unchecked$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NumericConvertInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function Unchecked__ctor (from, to) {
    $T01().prototype._ctor.call(this, from, to);
  };

  function Unchecked_Convert (obj) {
    switch ((this._from).valueOf()) {
      case 4: 
        var result = this.ConvertInt32(($T03().$Cast(obj)).charCodeAt(0));
        break;

      case 5: 
        result = this.ConvertInt32($T04().$Cast(obj));
        break;

      case 6: 
        result = this.ConvertInt32($T05().$Cast(obj));
        break;

      case 7: 
        result = this.ConvertInt32($T06().$Cast(obj));
        break;

      case 8: 
        result = this.ConvertInt32($T07().$Cast(obj));
        break;

      case 9: 
        result = this.ConvertInt32($T08().$Cast(obj));
        break;

      case 10: 
        result = this.ConvertInt64(($T0A().FromNumber($T0B().$Cast(obj))).ToInt64());
        break;

      case 11: 
        result = this.ConvertInt64($T09().$Cast(obj));
        break;

      case 12: 
        result = this.ConvertUInt64($T0A().$Cast(obj));
        break;

      case 13: 
        result = this.ConvertDouble($T0C().$Cast(obj));
        break;

      case 14: 
        result = this.ConvertDouble($T0D().$Cast(obj));
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Unchecked_ConvertDouble (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = $T03().$Cast(obj);
        break;

      case 5: 
        result = ((obj) | 0);
        break;

      case 6: 
        result = ((obj) | 0);
        break;

      case 7: 
        result = ((obj) | 0);
        break;

      case 8: 
        result = ((obj) | 0);
        break;

      case 9: 
        result = ((obj) | 0);
        break;

      case 10: 
        result = ((obj) | 0);
        break;

      case 11: 
        result = $T09().FromNumber(obj);
        break;

      case 12: 
        result = $T0A().FromNumber(obj);
        break;

      case 13: 
        result = Math.fround(obj);
        break;

      case 14: 
        result = obj;
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Unchecked_ConvertInt32 (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = String.fromCharCode(obj);
        break;

      case 5: 
        result = ((obj + 0x80 & 0xFF) - 0x80);
        break;

      case 6: 
        result = (obj & 0xFF);
        break;

      case 7: 
        result = ((obj + 0x8000 & 0xFFFF) - 0x8000);
        break;

      case 8: 
        result = (obj & 0xFFFF);
        break;

      case 9: 
        result = obj;
        break;

      case 10: 
        result = (obj >>> 0);
        break;

      case 11: 
        result = $T09().FromNumber(obj);
        break;

      case 12: 
        result = ($T09().FromNumber(obj)).ToUInt64();
        break;

      case 13: 
        result = +obj;
        break;

      case 14: 
        result = +obj;
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Unchecked_ConvertInt64 (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = String.fromCharCode(obj);
        break;

      case 5: 
        result = obj.ToNumber(-1, false);
        break;

      case 6: 
        result = obj.ToNumber(-1, false);
        break;

      case 7: 
        result = obj.ToNumber(-1, false);
        break;

      case 8: 
        result = obj.ToNumber(-1, false);
        break;

      case 9: 
        result = obj.ToNumber(-1, false);
        break;

      case 10: 
        result = obj.ToNumber(-1, false);
        break;

      case 11: 
        result = obj;
        break;

      case 12: 
        result = obj.ToUInt64();
        break;

      case 13: 
        result = obj.ToNumber(-1, false);
        break;

      case 14: 
        result = obj.ToNumber(-1, false);
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Unchecked_ConvertUInt64 (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = String.fromCharCode(obj);
        break;

      case 5: 
        result = obj.ToNumber(-1, false);
        break;

      case 6: 
        result = obj.ToNumber(-1, false);
        break;

      case 7: 
        result = obj.ToNumber(-1, false);
        break;

      case 8: 
        result = obj.ToNumber(-1, false);
        break;

      case 9: 
        result = obj.ToNumber(-1, false);
        break;

      case 10: 
        result = obj.ToNumber(-1, false);
        break;

      case 11: 
        result = obj.ToInt64();
        break;

      case 12: 
        result = obj;
        break;

      case 13: 
        result = Math.fround(obj.ToNumber(-1, false));
        break;

      case 14: 
        result = obj.ToNumber(-1, false);
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Unchecked_get_InstructionName () {
    return "UncheckedConvert";
  };

  function Unchecked_Run (frame) {
    $S00().CallVirtual("Push", null, frame, this.Convert(frame.Pop()));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NumericConvertInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NumericConvertInstruction+Unchecked", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TypeCode"), $asm01.TypeRef("System.TypeCode")]), 
      Unchecked__ctor
    );

    $.Method({Static:false, Public:false}, "Convert", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      Unchecked_Convert
    );

    $.Method({Static:false, Public:false}, "ConvertDouble", 
      new JSIL.MethodSignature($.Object, [$.Double]), 
      Unchecked_ConvertDouble
    );

    $.Method({Static:false, Public:false}, "ConvertInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      Unchecked_ConvertInt32
    );

    $.Method({Static:false, Public:false}, "ConvertInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64]), 
      Unchecked_ConvertInt64
    );

    $.Method({Static:false, Public:false}, "ConvertUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64]), 
      Unchecked_ConvertUInt64
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      Unchecked_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      Unchecked_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NumericConvertInstruction+Checked */ 

(function Checked$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.NumericConvertInstruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.SByte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Single)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function Checked__ctor (from, to) {
    $T01().prototype._ctor.call(this, from, to);
  };

  function Checked_Convert (obj) {
    switch ((this._from).valueOf()) {
      case 4: 
        var result = this.ConvertInt32(($T03().$Cast(obj)).charCodeAt(0));
        break;

      case 5: 
        result = this.ConvertInt32($T04().$Cast(obj));
        break;

      case 6: 
        result = this.ConvertInt32($T05().$Cast(obj));
        break;

      case 7: 
        result = this.ConvertInt32($T06().$Cast(obj));
        break;

      case 8: 
        result = this.ConvertInt32($T07().$Cast(obj));
        break;

      case 9: 
        result = this.ConvertInt32($T08().$Cast(obj));
        break;

      case 10: 
        result = this.ConvertInt64(($T0A().FromNumber($T0B().$Cast(obj))).ToInt64());
        break;

      case 11: 
        result = this.ConvertInt64($T09().$Cast(obj));
        break;

      case 12: 
        result = this.ConvertUInt64($T0A().$Cast(obj));
        break;

      case 13: 
        result = this.ConvertDouble($T0C().$Cast(obj));
        break;

      case 14: 
        result = this.ConvertDouble($T0D().$Cast(obj));
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Checked_ConvertDouble (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = $T07().$OverflowCheck(($T03().$Cast(obj)).charCodeAt(0));
        break;

      case 5: 
        result = $T04().$OverflowCheck(((obj) | 0));
        break;

      case 6: 
        result = $T05().$OverflowCheck(((obj) | 0));
        break;

      case 7: 
        result = $T06().$OverflowCheck(((obj) | 0));
        break;

      case 8: 
        result = $T07().$OverflowCheck(((obj) | 0));
        break;

      case 9: 
        result = $T08().$OverflowCheck(((obj) | 0));
        break;

      case 10: 
        result = $T0B().$OverflowCheck(((obj) | 0));
        break;

      case 11: 
        result = $T09().$OverflowCheck($T09().FromNumber(obj));
        break;

      case 12: 
        result = $T0A().$OverflowCheck($T0A().FromNumber(obj));
        break;

      case 13: 
        result = Math.fround(obj);
        break;

      case 14: 
        result = obj;
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Checked_ConvertInt32 (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = $T07().$OverflowCheck((String.fromCharCode(obj)).charCodeAt(0));
        break;

      case 5: 
        result = $T04().$OverflowCheck(((obj + 0x80 & 0xFF) - 0x80));
        break;

      case 6: 
        result = $T05().$OverflowCheck((obj & 0xFF));
        break;

      case 7: 
        result = $T06().$OverflowCheck(((obj + 0x8000 & 0xFFFF) - 0x8000));
        break;

      case 8: 
        result = $T07().$OverflowCheck((obj & 0xFFFF));
        break;

      case 9: 
        result = obj;
        break;

      case 10: 
        result = $T0B().$OverflowCheck((obj >>> 0));
        break;

      case 11: 
        result = $T09().FromNumber(obj);
        break;

      case 12: 
        result = $T0A().$OverflowCheck($T0A().FromNumber(obj));
        break;

      case 13: 
        result = +obj;
        break;

      case 14: 
        result = +obj;
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Checked_ConvertInt64 (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = $T07().$OverflowCheck((String.fromCharCode(obj)).charCodeAt(0));
        break;

      case 5: 
        result = $T04().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 6: 
        result = $T05().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 7: 
        result = $T06().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 8: 
        result = $T07().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 9: 
        result = $T08().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 10: 
        result = $T0B().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 11: 
        result = obj;
        break;

      case 12: 
        result = $T0A().$OverflowCheck(obj.ToUInt64());
        break;

      case 13: 
        result = obj.ToNumber(-1, false);
        break;

      case 14: 
        result = obj.ToNumber(-1, false);
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Checked_ConvertUInt64 (obj) {
    switch ((this._to).valueOf()) {
      case 4: 
        var result = $T07().$OverflowCheck((String.fromCharCode(obj)).charCodeAt(0));
        break;

      case 5: 
        result = $T04().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 6: 
        result = $T05().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 7: 
        result = $T06().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 8: 
        result = $T07().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 9: 
        result = $T08().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 10: 
        result = $T0B().$OverflowCheck(obj.ToNumber(-1, false));
        break;

      case 11: 
        result = $T09().$OverflowCheck(obj.ToInt64());
        break;

      case 12: 
        result = obj;
        break;

      case 13: 
        result = Math.fround(obj.ToNumber(-1, false));
        break;

      case 14: 
        result = obj.ToNumber(-1, false);
        break;

      default: 
        throw $T0E().get_Unreachable();

    }
    return result;
  };

  function Checked_get_InstructionName () {
    return "CheckedConvert";
  };

  function Checked_Run (frame) {
    $S00().CallVirtual("Push", null, frame, this.Convert(frame.Pop()));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.NumericConvertInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.NumericConvertInstruction+Checked", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TypeCode"), $asm01.TypeRef("System.TypeCode")]), 
      Checked__ctor
    );

    $.Method({Static:false, Public:false}, "Convert", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      Checked_Convert
    );

    $.Method({Static:false, Public:false}, "ConvertDouble", 
      new JSIL.MethodSignature($.Object, [$.Double]), 
      Checked_ConvertDouble
    );

    $.Method({Static:false, Public:false}, "ConvertInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      Checked_ConvertInt32
    );

    $.Method({Static:false, Public:false}, "ConvertInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64]), 
      Checked_ConvertInt64
    );

    $.Method({Static:false, Public:false}, "ConvertUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64]), 
      Checked_ConvertUInt64
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      Checked_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      Checked_Run
    );

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction */ 

(function OrInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrBoolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrUInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrUInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrUInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrBooleanLifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrInt16Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrUInt16Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrInt32Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrUInt32Lifted)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrInt64Lifted)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction_OrUInt64Lifted)) ();
  };

  function OrInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInstruction_Create (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._Boolean) === null) {
          arg_DE_0 = $thisType._Boolean = new ($T04())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16) === null) {
          arg_51_0 = $thisType._Int16 = new ($T05())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16) === null) {
          arg_99_0 = $thisType._UInt16 = new ($T06())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32) === null) {
          arg_6B_0 = $thisType._Int32 = new ($T07())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32) === null) {
          arg_B0_0 = $thisType._UInt32 = new ($T08())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64) === null) {
          arg_82_0 = $thisType._Int64 = new ($T09())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64) === null) {
          arg_C7_0 = $thisType._UInt64 = new ($T0A())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0B().get_Unreachable();
  };

  function OrInstruction_CreateLifted (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._BooleanLifted) === null) {
          arg_DE_0 = $thisType._BooleanLifted = new ($T0C())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16Lifted) === null) {
          arg_51_0 = $thisType._Int16Lifted = new ($T0D())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16Lifted) === null) {
          arg_99_0 = $thisType._UInt16Lifted = new ($T0E())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32Lifted) === null) {
          arg_6B_0 = $thisType._Int32Lifted = new ($T0F())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32Lifted) === null) {
          arg_B0_0 = $thisType._UInt32Lifted = new ($T10())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64Lifted) === null) {
          arg_82_0 = $thisType._Int64Lifted = new ($T11())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64Lifted) === null) {
          arg_C7_0 = $thisType._UInt64Lifted = new ($T12())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0B().get_Unreachable();
  };

  function OrInstruction_toString () {
    return "Or()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      OrInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      OrInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      OrInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Boolean", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_BooleanLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrInt32 */ 

(function OrInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function OrInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$Cast(l) | $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrInt16 */ 

(function OrInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function OrInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInt16_Calculate (l, r) {
    return ($T02().$Cast(l) | $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrInt64 */ 

(function OrInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function OrInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInt64_Calculate (l, r) {
    return $T02().op_BitwiseOr($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrUInt16 */ 

(function OrUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function OrUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrUInt16_Calculate (l, r) {
    return ($T02().$Cast(l) | $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrUInt32 */ 

(function OrUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function OrUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrUInt32_Calculate (l, r) {
    return ($T02().$Cast(l) | $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrUInt64 */ 

(function OrUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function OrUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrUInt64_Calculate (l, r) {
    return $T02().op_BitwiseOr($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrBoolean */ 

(function OrBoolean$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function OrBoolean__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrBoolean_Calculate (l, r) {
    return ($T02().$Cast(l) | $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrBoolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrBoolean__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrBoolean_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrInt32Lifted */ 

(function OrInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function OrInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) | $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrInt16Lifted */ 

(function OrInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function OrInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInt16Lifted_Calculate (l, r) {
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](or:int16[exp:int32](valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(l))), valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(r)))))");
    return (
      (num !== null)
         ? ((JSIL.Nullable_ValueOrDefault(num, 0) + 0x8000 & 0xFFFF) - 0x8000)
         : null)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrInt64Lifted */ 

(function OrInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };

  function OrInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) | $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrUInt16Lifted */ 

(function OrUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function OrUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrUInt16Lifted_Calculate (l, r) {
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](or:int16[exp:int32](valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(l))), valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(r)))))");
    return (
      (num !== null)
         ? (JSIL.Nullable_ValueOrDefault(num, 0) & 0xFFFF)
         : null)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrUInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrUInt32Lifted */ 

(function OrUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };

  function OrUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrUInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) | $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrUInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrUInt64Lifted */ 

(function OrUInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };

  function OrUInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrUInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) | $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrUInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrUInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrUInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.OrInstruction+OrBooleanLifted */ 

(function OrBooleanLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.OrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Boolean))) ();
  };

  function OrBooleanLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function OrBooleanLifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) | $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.OrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.OrInstruction+OrBooleanLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OrBooleanLifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      OrBooleanLifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction */ 

(function ShlInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlInt16Lifted)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlUInt16Lifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlInt32Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlUInt32Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlInt64Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction_ShlUInt64Lifted)) ();
  };

  function ShlInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInstruction_Create (type) {
    var arg_41_0 = null, arg_86_0 = null, arg_58_0 = null, arg_9D_0 = null, arg_6F_0 = null, arg_B4_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_41_0 = $thisType._Int16) === null) {
          arg_41_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_41_0;
        break;

      case 8: 
        if ((arg_86_0 = $thisType._UInt16) === null) {
          arg_86_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_86_0;
        break;

      case 9: 
        if ((arg_58_0 = $thisType._Int32) === null) {
          arg_58_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_58_0;
        break;

      case 10: 
        if ((arg_9D_0 = $thisType._UInt32) === null) {
          arg_9D_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_9D_0;
        break;

      case 11: 
        if ((arg_6F_0 = $thisType._Int64) === null) {
          arg_6F_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_6F_0;
        break;

      case 12: 
        if ((arg_B4_0 = $thisType._UInt64) === null) {
          arg_B4_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_B4_0;
        break;

      default: 
        throw $T0A().get_Unreachable();

    }
    return result;
  };

  function ShlInstruction_CreateLifted (type) {
    var arg_41_0 = null, arg_86_0 = null, arg_58_0 = null, arg_9D_0 = null, arg_6F_0 = null, arg_B4_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_41_0 = $thisType._Int16Lifted) === null) {
          arg_41_0 = $thisType._Int16Lifted = new ($T0B())();
        }
        var result = arg_41_0;
        break;

      case 8: 
        if ((arg_86_0 = $thisType._UInt16Lifted) === null) {
          arg_86_0 = $thisType._UInt16Lifted = new ($T0C())();
        }
        result = arg_86_0;
        break;

      case 9: 
        if ((arg_58_0 = $thisType._Int32Lifted) === null) {
          arg_58_0 = $thisType._Int32Lifted = new ($T0D())();
        }
        result = arg_58_0;
        break;

      case 10: 
        if ((arg_9D_0 = $thisType._UInt32Lifted) === null) {
          arg_9D_0 = $thisType._UInt32Lifted = new ($T0E())();
        }
        result = arg_9D_0;
        break;

      case 11: 
        if ((arg_6F_0 = $thisType._Int64Lifted) === null) {
          arg_6F_0 = $thisType._Int64Lifted = new ($T0F())();
        }
        result = arg_6F_0;
        break;

      case 12: 
        if ((arg_B4_0 = $thisType._UInt64Lifted) === null) {
          arg_B4_0 = $thisType._UInt64Lifted = new ($T10())();
        }
        result = arg_B4_0;
        break;

      default: 
        throw $T0A().get_Unreachable();

    }
    return result;
  };

  function ShlInstruction_toString () {
    return "Shl()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      ShlInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      ShlInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      ShlInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt32 */ 

(function ShlInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShlInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$Cast(l) << $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt16 */ 

(function ShlInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShlInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInt16_Calculate (l, r) {
    return ($T02().$Cast(l) << $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt64 */ 

(function ShlInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShlInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInt64_Calculate (l, r) {
    return $T02().op_LeftShift($T02().$Cast(l), $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt16 */ 

(function ShlUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShlUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlUInt16_Calculate (l, r) {
    return ($T02().$Cast(l) << $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt32 */ 

(function ShlUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShlUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlUInt32_Calculate (l, r) {
    return ($T02().$Cast(l) << $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt64 */ 

(function ShlUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShlUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlUInt64_Calculate (l, r) {
    return $T02().op_LeftShift($T02().$Cast(l), $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt32Lifted */ 

(function ShlInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShlInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) << $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt16Lifted */ 

(function ShlInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShlInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInt16Lifted_Calculate (l, r) {
    return JSIL.Nullable_Value((
        (((JSIL.Nullable_Cast($T02().$Cast(l), $T03()) | 0) === null) || ($T04().$Cast(r) === null))
           ? null
           : ((JSIL.Nullable_Cast($T02().$Cast(l), $T03()) | 0) << $T04().$Cast(r)))
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt64Lifted */ 

(function ShlInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShlInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) << $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt16Lifted */ 

(function ShlUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShlUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlUInt16Lifted_Calculate (l, r) {
    return (
      (((JSIL.Nullable_Cast($T02().$Cast(l), $T03()) | 0) === null) || ($T04().$Cast(r) === null))
         ? null
         : ((JSIL.Nullable_Cast($T02().$Cast(l), $T03()) | 0) << $T04().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlUInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt32Lifted */ 

(function ShlUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShlUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlUInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) << $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlUInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt64Lifted */ 

(function ShlUInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShlInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShlUInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShlUInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) << $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShlInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShlInstruction+ShlUInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShlUInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShlUInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction */ 

(function ShrInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrInt16Lifted)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrUInt16Lifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrInt32Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrUInt32Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrInt64Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction_ShrUInt64Lifted)) ();
  };

  function ShrInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInstruction_Create (type) {
    var arg_41_0 = null, arg_86_0 = null, arg_58_0 = null, arg_9D_0 = null, arg_6F_0 = null, arg_B4_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_41_0 = $thisType._Int16) === null) {
          arg_41_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_41_0;
        break;

      case 8: 
        if ((arg_86_0 = $thisType._UInt16) === null) {
          arg_86_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_86_0;
        break;

      case 9: 
        if ((arg_58_0 = $thisType._Int32) === null) {
          arg_58_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_58_0;
        break;

      case 10: 
        if ((arg_9D_0 = $thisType._UInt32) === null) {
          arg_9D_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_9D_0;
        break;

      case 11: 
        if ((arg_6F_0 = $thisType._Int64) === null) {
          arg_6F_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_6F_0;
        break;

      case 12: 
        if ((arg_B4_0 = $thisType._UInt64) === null) {
          arg_B4_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_B4_0;
        break;

      default: 
        throw $T0A().get_Unreachable();

    }
    return result;
  };

  function ShrInstruction_CreateLifted (type) {
    var arg_41_0 = null, arg_86_0 = null, arg_58_0 = null, arg_9D_0 = null, arg_6F_0 = null, arg_B4_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_41_0 = $thisType._Int16Lifted) === null) {
          arg_41_0 = $thisType._Int16Lifted = new ($T0B())();
        }
        var result = arg_41_0;
        break;

      case 8: 
        if ((arg_86_0 = $thisType._UInt16Lifted) === null) {
          arg_86_0 = $thisType._UInt16Lifted = new ($T0C())();
        }
        result = arg_86_0;
        break;

      case 9: 
        if ((arg_58_0 = $thisType._Int32Lifted) === null) {
          arg_58_0 = $thisType._Int32Lifted = new ($T0D())();
        }
        result = arg_58_0;
        break;

      case 10: 
        if ((arg_9D_0 = $thisType._UInt32Lifted) === null) {
          arg_9D_0 = $thisType._UInt32Lifted = new ($T0E())();
        }
        result = arg_9D_0;
        break;

      case 11: 
        if ((arg_6F_0 = $thisType._Int64Lifted) === null) {
          arg_6F_0 = $thisType._Int64Lifted = new ($T0F())();
        }
        result = arg_6F_0;
        break;

      case 12: 
        if ((arg_B4_0 = $thisType._UInt64Lifted) === null) {
          arg_B4_0 = $thisType._UInt64Lifted = new ($T10())();
        }
        result = arg_B4_0;
        break;

      default: 
        throw $T0A().get_Unreachable();

    }
    return result;
  };

  function ShrInstruction_toString () {
    return "Shr()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      ShrInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      ShrInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      ShrInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt32 */ 

(function ShrInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShrInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$Cast(l) >> $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt16 */ 

(function ShrInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShrInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInt16_Calculate (l, r) {
    return ($T02().$Cast(l) >> $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt64 */ 

(function ShrInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShrInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInt64_Calculate (l, r) {
    return $T02().op_RightShift($T02().$Cast(l), $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt16 */ 

(function ShrUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShrUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrUInt16_Calculate (l, r) {
    return ($T02().$Cast(l) >> $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt32 */ 

(function ShrUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShrUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrUInt32_Calculate (l, r) {
    return ($T02().$Cast(l) >>> $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt64 */ 

(function ShrUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function ShrUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrUInt64_Calculate (l, r) {
    return $T02().op_RightShift($T02().$Cast(l), $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt32Lifted */ 

(function ShrInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShrInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) >> $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt16Lifted */ 

(function ShrInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShrInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInt16Lifted_Calculate (l, r) {
    return JSIL.Nullable_Value((
        (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
           ? null
           : ($T02().$Cast(l) >> $T03().$Cast(r)))
    );
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt64Lifted */ 

(function ShrInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShrInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) >> $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt16Lifted */ 

(function ShrUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt16))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShrUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrUInt16Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) >> $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrUInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt32Lifted */ 

(function ShrUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShrUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrUInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) >>> $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrUInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt64Lifted */ 

(function ShrUInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ShrInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function ShrUInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ShrUInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T03().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) >>> $T03().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ShrInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.ShrInstruction+ShrUInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ShrUInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      ShrUInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadObjectInstruction */ 

(function LoadObjectInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };

  function LoadObjectInstruction__ctor (value) {
    $T01().prototype._ctor.call(this);
    this._value = value;
  };

  function LoadObjectInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadObjectInstruction_Run (frame) {
    var $temp00;
    frame.Data[($temp00 = (frame.StackIndex | 0), 
      frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0), 
      $temp00)] = this._value;
    return 1;
  };

  function LoadObjectInstruction_toString () {
    return JSIL.ConcatString("LoadObject(", JSIL.Coalesce(this._value, "null"), ")");
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadObjectInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object), 
      LoadObjectInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadObjectInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadObjectInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LoadObjectInstruction_toString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction */ 

(function LoadCachedObjectInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object).get_Item)) ();
  };

  function LoadCachedObjectInstruction__ctor (index) {
    $T01().prototype._ctor.call(this);
    this._index = (index >>> 0);
  };

  function LoadCachedObjectInstruction_get_ProducedStack () {
    return 1;
  };

  function LoadCachedObjectInstruction_Run (frame) {
    var $temp00;
    frame.Data[($temp00 = (frame.StackIndex | 0), 
      frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0), 
      $temp00)] = frame.Interpreter._objects[this._index];
    return 1;
  };

  function LoadCachedObjectInstruction_ToDebugString (instructionIndex, cookie, labelIndexer, objects) {
    return $T07().Format("LoadCached({0}: {1})", this._index, $IM00().Call(objects, null, (this._index | 0)));
  };

  function LoadCachedObjectInstruction_toString () {
    return JSIL.ConcatString("LoadCached(", this._index, ")");
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32), 
      LoadCachedObjectInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      LoadCachedObjectInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      LoadCachedObjectInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToDebugString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Object, 
          $asm01.TypeRef("System.Func`2", [$.Int32, $.Int32]), $asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object])
        ]), 
      LoadCachedObjectInstruction_ToDebugString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LoadCachedObjectInstruction_toString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.PopInstruction */ 

(function PopInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function PopInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function PopInstruction_get_ConsumedStack () {
    return 1;
  };

  function PopInstruction_Run (frame) {
    frame.Pop();
    return 1;
  };

  function PopInstruction_toString () {
    return "Pop()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.PopInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      PopInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      PopInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      PopInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      PopInstruction_toString
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type); 
    function PopInstruction__cctor () {
      $thisType.Instance = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PopInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.PopNInstruction */ 

(function PopNInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };

  function PopNInstruction__ctor (n) {
    $T01().prototype._ctor.call(this);
    this._n = (n | 0);
  };

  function PopNInstruction_get_ConsumedStack () {
    return this._n;
  };

  function PopNInstruction_Run (frame) {
    frame.Pop(this._n);
    return 1;
  };

  function PopNInstruction_toString () {
    return JSIL.ConcatString("Pop(", this._n, ")");
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.PopNInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      PopNInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      PopNInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      PopNInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      PopNInstruction_toString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_n", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DupInstruction */ 

(function DupInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };

  function DupInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DupInstruction_get_ConsumedStack () {
    return 0;
  };

  function DupInstruction_get_ProducedStack () {
    return 1;
  };

  function DupInstruction_Run (frame) {
    frame.Data[frame.StackIndex] = frame.Peek();
    frame.StackIndex = (((frame.StackIndex | 0) + 1) | 0);
    return 1;
  };

  function DupInstruction_toString () {
    return "Dup()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.DupInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DupInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      DupInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      DupInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DupInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      DupInstruction_toString
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type); 
    function DupInstruction__cctor () {
      $thisType.Instance = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DupInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction */ 

(function SubInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction_SubDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function SubInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function SubInstruction_toString () {
    return "Sub()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      SubInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      SubInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubInt32 */ 

(function SubInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function SubInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubInt32_Calculate (l, r) {
    return $T02().Int32ToObject((($T03().$Cast(l) - $T03().$Cast(r)) | 0));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubInt16 */ 

(function SubInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function SubInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubInt16_Calculate (l, r) {
    return ((($T02().$Cast(l) - $T02().$Cast(r)) + 0x8000 & 0xFFFF) - 0x8000);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubInt64 */ 

(function SubInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function SubInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubInt64_Calculate (l, r) {
    return $T02().op_Subtraction($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubUInt16 */ 

(function SubUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function SubUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubUInt16_Calculate (l, r) {
    return (($T02().$Cast(l) - $T02().$Cast(r)) & 0xFFFF);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubUInt32 */ 

(function SubUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function SubUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubUInt32_Calculate (l, r) {
    return (($T02().$Cast(l) - $T02().$Cast(r)) >>> 0);
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubUInt64 */ 

(function SubUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function SubUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubUInt64_Calculate (l, r) {
    return $T02().op_Subtraction($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubSingle */ 

(function SubSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function SubSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubSingle_Calculate (l, r) {
    return ($T02().$Cast(l) - $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubInstruction+SubDouble */ 

(function SubDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function SubDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubDouble_Calculate (l, r) {
    return ($T02().$Cast(l) - $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubInstruction+SubDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction */ 

(function SubOvfInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfInt16)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfUInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfInt32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfUInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfInt64)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfUInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfSingle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction_SubOvfDouble)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function SubOvfInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfInstruction_Create (type) {
    var arg_49_0 = null, arg_94_0 = null, arg_63_0 = null, arg_AB_0 = null, arg_7D_0 = null, arg_C2_0 = null, arg_D9_0 = null, arg_F0_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 7: 
        if ((arg_49_0 = $thisType._Int16) === null) {
          arg_49_0 = $thisType._Int16 = new ($T04())();
        }
        var result = arg_49_0;
        break;

      case 8: 
        if ((arg_94_0 = $thisType._UInt16) === null) {
          arg_94_0 = $thisType._UInt16 = new ($T05())();
        }
        result = arg_94_0;
        break;

      case 9: 
        if ((arg_63_0 = $thisType._Int32) === null) {
          arg_63_0 = $thisType._Int32 = new ($T06())();
        }
        result = arg_63_0;
        break;

      case 10: 
        if ((arg_AB_0 = $thisType._UInt32) === null) {
          arg_AB_0 = $thisType._UInt32 = new ($T07())();
        }
        result = arg_AB_0;
        break;

      case 11: 
        if ((arg_7D_0 = $thisType._Int64) === null) {
          arg_7D_0 = $thisType._Int64 = new ($T08())();
        }
        result = arg_7D_0;
        break;

      case 12: 
        if ((arg_C2_0 = $thisType._UInt64) === null) {
          arg_C2_0 = $thisType._UInt64 = new ($T09())();
        }
        result = arg_C2_0;
        break;

      case 13: 
        if ((arg_D9_0 = $thisType._Single) === null) {
          arg_D9_0 = $thisType._Single = new ($T0A())();
        }
        result = arg_D9_0;
        break;

      case 14: 
        if ((arg_F0_0 = $thisType._Double) === null) {
          arg_F0_0 = $thisType._Double = new ($T0B())();
        }
        result = arg_F0_0;
        break;

      default: 
        throw $T0C().get_Unreachable();

    }
    return result;
  };

  function SubOvfInstruction_toString () {
    return "SubOvf()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      SubOvfInstruction_Create
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      SubOvfInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Single", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Double", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfInt32 */ 

(function SubOvfInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function SubOvfInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$OverflowCheck(($T03().$Cast(l) - $T03().$Cast(r))));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfInt16 */ 

(function SubOvfInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function SubOvfInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfInt16_Calculate (l, r) {
    return $T02().$OverflowCheck(($T02().$Cast(l) - $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfInt64 */ 

(function SubOvfInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function SubOvfInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfInt64_Calculate (l, r) {
    return $T02().$OverflowCheck($T02().op_Subtraction($T02().$Cast(l), $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfUInt16 */ 

(function SubOvfUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function SubOvfUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfUInt16_Calculate (l, r) {
    return $T02().$OverflowCheck(($T02().$Cast(l) - $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfUInt32 */ 

(function SubOvfUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function SubOvfUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfUInt32_Calculate (l, r) {
    return $T02().$OverflowCheck(($T02().$Cast(l) - $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfUInt64 */ 

(function SubOvfUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function SubOvfUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfUInt64_Calculate (l, r) {
    return $T02().$OverflowCheck($T02().op_Subtraction($T02().$Cast(l), $T02().$Cast(r)));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfSingle */ 

(function SubOvfSingle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Single)) ();
  };

  function SubOvfSingle__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfSingle_Calculate (l, r) {
    return ($T02().$Cast(l) - $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfSingle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfSingle__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfSingle_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfDouble */ 

(function SubOvfDouble$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.SubOvfInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Double)) ();
  };

  function SubOvfDouble__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SubOvfDouble_Calculate (l, r) {
    return ($T02().$Cast(l) - $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.SubOvfInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.SubOvfInstruction+SubOvfDouble", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SubOvfDouble__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      SubOvfDouble_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.CreateDelegateInstruction */ 

(function CreateDelegateInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function CreateDelegateInstruction__ctor (delegateCreator) {
    $T01().prototype._ctor.call(this);
    this._creator = delegateCreator;
  };

  function CreateDelegateInstruction_get_ConsumedStack () {
    return ((this._creator).get_Interpreter()).get_ClosureSize();
  };

  function CreateDelegateInstruction_get_ProducedStack () {
    return 1;
  };

  function CreateDelegateInstruction_Run (frame) {
    if ((this.get_ConsumedStack() | 0) > 0) {
      var closure = JSIL.Array.New($T05(), this.get_ConsumedStack());

      for (var i = (((closure.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
        closure[i] = $T05().$Cast(frame.Pop());
      }
    } else {
      closure = null;
    }
    var d = (this._creator).CreateDelegate(closure);
    $S00().CallVirtual("Push", null, frame, d);
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.CreateDelegateInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator")), 
      CreateDelegateInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      CreateDelegateInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      CreateDelegateInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      CreateDelegateInstruction_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_creator", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.NewInstruction */ 

(function NewInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.TargetInvocationException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ExceptionHelpers)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function NewInstruction__ctor (constructor) {
    $T01().prototype._ctor.call(this);
    this._constructor = constructor;
    this._argCount = (constructor.GetParameters().length | 0);
  };

  function NewInstruction_get_ConsumedStack () {
    return this._argCount;
  };

  function NewInstruction_get_ProducedStack () {
    return 1;
  };

  function NewInstruction_Run (frame, $exception) {
    var args = JSIL.Array.New($T07(), this._argCount);

    for (var i = (((this._argCount | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      args[i] = frame.Pop();
    }
    try {
      var ret = (this._constructor).Invoke(args);
    } catch ($exception) {
      if ($T09().$Is($exception)) {
        var e = $exception;
        $T0A().UpdateForRethrow(e.get_InnerException());
        throw e.get_InnerException();
      } else {
        throw $exception;
      }
    }
    $S00().CallVirtual("Push", null, frame, ret);
    return 1;
  };

  function NewInstruction_toString () {
    return JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), ["New ", ((this._constructor).get_DeclaringType()).get_Name(), "(", this._constructor, ")"]));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.NewInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.ConstructorInfo")), 
      NewInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      NewInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      NewInstruction_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      NewInstruction_toString
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_constructor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_argCount", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DefaultValueInstruction`1 */ 

(function DefaultValueInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function DefaultValueInstruction$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function DefaultValueInstruction$b1_get_ConsumedStack () {
    return 0;
  };

  function DefaultValueInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function DefaultValueInstruction$b1_Run (frame) {
    $S00().CallVirtual("Push", null, frame, (
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    return 1;
  };

  function DefaultValueInstruction$b1_toString () {
    return JSIL.ConcatString("New ", $thisType.T.get(this));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.DefaultValueInstruction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DefaultValueInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      DefaultValueInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      DefaultValueInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      DefaultValueInstruction$b1_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      DefaultValueInstruction$b1_toString
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.TypeIsInstruction`1 */ 

(function TypeIsInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function TypeIsInstruction$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TypeIsInstruction$b1_get_ConsumedStack () {
    return 1;
  };

  function TypeIsInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function TypeIsInstruction$b1_Run (frame) {
    $S00().CallVirtual("Push", null, frame, $T02().BooleanToObject($thisType.T.get(this).$Is(frame.Pop())));
    return 1;
  };

  function TypeIsInstruction$b1_toString () {
    return JSIL.ConcatString("TypeIs ", $thisType.T.get(this).get_Name());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.TypeIsInstruction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TypeIsInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      TypeIsInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      TypeIsInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      TypeIsInstruction$b1_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      TypeIsInstruction$b1_toString
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.TypeAsInstruction`1 */ 

(function TypeAsInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function TypeAsInstruction$b1__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TypeAsInstruction$b1_get_ConsumedStack () {
    return 1;
  };

  function TypeAsInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function TypeAsInstruction$b1_Run (frame) {
    var value = frame.Pop();
    if ($thisType.T.get(this).$Is(value)) {
      $S00().CallVirtual("Push", null, frame, value);
    } else {
      $S00().CallVirtual("Push", null, frame, null);
    }
    return 1;
  };

  function TypeAsInstruction$b1_toString () {
    return JSIL.ConcatString("TypeAs ", $thisType.T.get(this).get_Name());
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.TypeAsInstruction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TypeAsInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      TypeAsInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      TypeAsInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      TypeAsInstruction$b1_Run
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      TypeAsInstruction$b1_toString
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.TypeEqualsInstruction */ 

(function TypeEqualsInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };

  function TypeEqualsInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function TypeEqualsInstruction_get_ConsumedStack () {
    return 2;
  };

  function TypeEqualsInstruction_get_InstructionName () {
    return "TypeEquals()";
  };

  function TypeEqualsInstruction_get_ProducedStack () {
    return 1;
  };

  function TypeEqualsInstruction_Run (frame) {
    var type = frame.Pop();
    var obj = frame.Pop();
    $S00().CallVirtual("Push", null, frame, $T03().BooleanToObject((obj !== null) && (JSIL.GetType(obj) === type)));
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.TypeEqualsInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TypeEqualsInstruction__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      TypeEqualsInstruction_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      TypeEqualsInstruction_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      TypeEqualsInstruction_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      TypeEqualsInstruction_Run
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    function TypeEqualsInstruction__cctor () {
      $thisType.Instance = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TypeEqualsInstruction__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.WrapToNullableInstruction`1 */ 

(function WrapToNullableInstruction$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Nullable$b1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };

  function WrapToNullableInstruction$b1__ctor (elementType) {
    $T01().prototype._ctor.call(this);
    this.elementType = elementType;
  };

  function WrapToNullableInstruction$b1_get_ConsumedStack () {
    return 1;
  };

  function WrapToNullableInstruction$b1_get_InstructionName () {
    return JSIL.ConcatString("WrapTo ", $thisType.T.get(this), "?");
  };

  function WrapToNullableInstruction$b1_get_ProducedStack () {
    return 1;
  };

  function WrapToNullableInstruction$b1_Run (frame) {
    var r = frame.Data[(((frame.StackIndex | 0) - 1) | 0)];
    if (r === null) {
      var result = 1;
    } else {
      this.ctor = $S00().CallStatic($T07(), "First$b1", [$asm01.System.Reflection.ConstructorInfo], $T08().GetDeclaredConstructors($T09().__Type__.MakeGenericType(JSIL.Array.New($T00(), [this.elementType]))));
      frame.Data[(((frame.StackIndex | 0) - 1) | 0)] = (this.ctor).Invoke(JSIL.Array.New($T04(), [r]));
      result = 1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), 
      Name: "Microsoft.Scripting.Interpreter.WrapToNullableInstruction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      WrapToNullableInstruction$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ConsumedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      WrapToNullableInstruction$b1_get_ConsumedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_InstructionName", 
      JSIL.MethodSignature.Return($.String), 
      WrapToNullableInstruction$b1_get_InstructionName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ProducedStack", 
      JSIL.MethodSignature.Return($.Int32), 
      WrapToNullableInstruction$b1_get_ProducedStack
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Run", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")]), 
      WrapToNullableInstruction$b1_Run
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "elementType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "ctor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ConsumedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ProducedStack", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InstructionName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction */ 

(function XorInstruction$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ArithmeticInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorBoolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorInt16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorUInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorUInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorInt64)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorUInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorBooleanLifted)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorInt16Lifted)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorUInt16Lifted)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorInt32Lifted)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorUInt32Lifted)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorInt64Lifted)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction_XorUInt64Lifted)) ();
  };

  function XorInstruction__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInstruction_Create (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._Boolean) === null) {
          arg_DE_0 = $thisType._Boolean = new ($T04())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16) === null) {
          arg_51_0 = $thisType._Int16 = new ($T05())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16) === null) {
          arg_99_0 = $thisType._UInt16 = new ($T06())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32) === null) {
          arg_6B_0 = $thisType._Int32 = new ($T07())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32) === null) {
          arg_B0_0 = $thisType._UInt32 = new ($T08())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64) === null) {
          arg_82_0 = $thisType._Int64 = new ($T09())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64) === null) {
          arg_C7_0 = $thisType._UInt64 = new ($T0A())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0B().get_Unreachable();
  };

  function XorInstruction_CreateLifted (type) {
    var arg_DE_0 = null, arg_51_0 = null, arg_99_0 = null, arg_6B_0 = null, arg_B0_0 = null, arg_82_0 = null, arg_C7_0 = null;
    switch (($T03().GetTypeCode(type)).valueOf()) {
      case 3: 
        if ((arg_DE_0 = $thisType._BooleanLifted) === null) {
          arg_DE_0 = $thisType._BooleanLifted = new ($T0C())();
        }
        var result = arg_DE_0;
        return result;

      case 7: 
        if ((arg_51_0 = $thisType._Int16Lifted) === null) {
          arg_51_0 = $thisType._Int16Lifted = new ($T0D())();
        }
        result = arg_51_0;
        return result;

      case 8: 
        if ((arg_99_0 = $thisType._UInt16Lifted) === null) {
          arg_99_0 = $thisType._UInt16Lifted = new ($T0E())();
        }
        result = arg_99_0;
        return result;

      case 9: 
        if ((arg_6B_0 = $thisType._Int32Lifted) === null) {
          arg_6B_0 = $thisType._Int32Lifted = new ($T0F())();
        }
        result = arg_6B_0;
        return result;

      case 10: 
        if ((arg_B0_0 = $thisType._UInt32Lifted) === null) {
          arg_B0_0 = $thisType._UInt32Lifted = new ($T10())();
        }
        result = arg_B0_0;
        return result;

      case 11: 
        if ((arg_82_0 = $thisType._Int64Lifted) === null) {
          arg_82_0 = $thisType._Int64Lifted = new ($T11())();
        }
        result = arg_82_0;
        return result;

      case 12: 
        if ((arg_C7_0 = $thisType._UInt64Lifted) === null) {
          arg_C7_0 = $thisType._UInt64Lifted = new ($T12())();
        }
        result = arg_C7_0;
        return result;

    }
    throw $T0B().get_Unreachable();
  };

  function XorInstruction_toString () {
    return "Xor()";
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.ArithmeticInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInstruction__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      XorInstruction_Create
    );

    $.Method({Static:true , Public:true }, "CreateLifted", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction"), [$asm01.TypeRef("System.Type")]), 
      XorInstruction_CreateLifted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      XorInstruction_toString
    );

    $.Field({Static:true , Public:false}, "_Int16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Boolean", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_Int64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt16Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt32Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_UInt64Lifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    $.Field({Static:true , Public:false}, "_BooleanLifted", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Instruction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorInt32 */ 

(function XorInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function XorInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInt32_Calculate (l, r) {
    return $T02().Int32ToObject($T03().$Cast(l) ^ $T03().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorInt16 */ 

(function XorInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };

  function XorInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInt16_Calculate (l, r) {
    return ($T02().$Cast(l) ^ $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorInt64 */ 

(function XorInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int64)) ();
  };

  function XorInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInt64_Calculate (l, r) {
    return $T02().op_ExclusiveOr($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorUInt16 */ 

(function XorUInt16$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };

  function XorUInt16__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorUInt16_Calculate (l, r) {
    return ($T02().$Cast(l) ^ $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorUInt16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorUInt16__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorUInt16_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorUInt32 */ 

(function XorUInt32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt32)) ();
  };

  function XorUInt32__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorUInt32_Calculate (l, r) {
    return ($T02().$Cast(l) ^ $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorUInt32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorUInt32__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorUInt32_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorUInt64 */ 

(function XorUInt64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt64)) ();
  };

  function XorUInt64__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorUInt64_Calculate (l, r) {
    return $T02().op_ExclusiveOr($T02().$Cast(l), $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorUInt64", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorUInt64__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorUInt64_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorBoolean */ 

(function XorBoolean$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function XorBoolean__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorBoolean_Calculate (l, r) {
    return ($T02().$Cast(l) ^ $T02().$Cast(r));
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorBoolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorBoolean__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorBoolean_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorInt32Lifted */ 

(function XorInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int32))) ();
  };

  function XorInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) ^ $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorInt16Lifted */ 

(function XorInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function XorInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInt16Lifted_Calculate (l, r) {
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](xor:int16[exp:int32](valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(l))), valueof:int16(unbox.any:valuetype [mscorlib]System.Nullable`1<int16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<int16>, ldloc:object(r)))))");
    return (
      (num !== null)
         ? ((JSIL.Nullable_ValueOrDefault(num, 0) + 0x8000 & 0xFFFF) - 0x8000)
         : null)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorInt64Lifted */ 

(function XorInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Int64))) ();
  };

  function XorInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) ^ $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorUInt16Lifted */ 

(function XorUInt16Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function XorUInt16Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorUInt16Lifted_Calculate (l, r) {
    var num = JSIL.UntranslatableInstruction("nullableof:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](xor:uint16[exp:int32](valueof:uint16(unbox.any:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<uint16>, ldloc:object(l))), valueof:uint16(unbox.any:valuetype [mscorlib]System.Nullable`1<uint16>[exp:valuetype [mscorlib]System.Nullable`1<int32>](valuetype [mscorlib]System.Nullable`1<uint16>, ldloc:object(r)))))");
    return (
      (num !== null)
         ? (JSIL.Nullable_ValueOrDefault(num, 0) & 0xFFFF)
         : null)
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorUInt16Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorUInt16Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorUInt16Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorUInt32Lifted */ 

(function XorUInt32Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt32))) ();
  };

  function XorUInt32Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorUInt32Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) ^ $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorUInt32Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorUInt32Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorUInt32Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorUInt64Lifted */ 

(function XorUInt64Lifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.UInt64))) ();
  };

  function XorUInt64Lifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorUInt64Lifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) ^ $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorUInt64Lifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorUInt64Lifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorUInt64Lifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.XorInstruction+XorBooleanLifted */ 

(function XorBooleanLifted$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.XorInstruction)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Nullable$b1.Of($asm01.System.Boolean))) ();
  };

  function XorBooleanLifted__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function XorBooleanLifted_Calculate (l, r) {
    return (
      (($T02().$Cast(l) === null) || ($T02().$Cast(r) === null))
         ? null
         : ($T02().$Cast(l) ^ $T02().$Cast(r)))
    ;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Interpreter.XorInstruction"), 
      Name: "Microsoft.Scripting.Interpreter.XorInstruction+XorBooleanLifted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      XorBooleanLifted__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Calculate", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object]), 
      XorBooleanLifted_Calculate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InterpretedFrame */ 

(function InterpretedFrame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ThreadLocal$b1.Of($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ThreadLocal$b1_StorageInfo.Of($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DebugInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.InterpretedFrameInfo))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ExceptionUtils)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrameInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame_$lGetStackTraceDebugInfo$gd__0)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.RuntimeLabel)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.InterpretedFrameInfo))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")])]))) ();
  };

  function InterpretedFrame__ctor (interpreter, closure) {
    this.Interpreter = interpreter;
    this.StackIndex = (interpreter.get_LocalCount() | 0);
    this.Data = JSIL.Array.New($T03(), (((this.StackIndex | 0) + (interpreter.get_Instructions().MaxStackDepth | 0)) | 0));
    var c = (interpreter.get_Instructions().MaxContinuationDepth | 0);
    if (c > 0) {
      this._continuations = JSIL.Array.New($T04(), c);
    }
    this.Closure = closure;
  };

  function InterpretedFrame_Dup () {
    var i = (this.StackIndex | 0);
    this.Data[i] = this.Data[((i - 1) | 0)];
    this.StackIndex = ((i + 1) | 0);
  };

  function InterpretedFrame_Enter () {
    var currentFrame = $T00().prototype.GetStorageInfo.call($thisType.CurrentFrame);
    this._parent = $thisType.$Cast(currentFrame.Value);
    currentFrame.Value = this;
    return currentFrame;
  };

  function InterpretedFrame_get_GotoMethod () {
    var arg_24_0 = null;
    if ((arg_24_0 = $thisType._Goto) === null) {
      arg_24_0 = $thisType._Goto = $thisType.__Type__.GetMethod("Goto");
    }
    return arg_24_0;
  };

  function InterpretedFrame_get_Name () {
    return this.Interpreter._name;
  };

  function InterpretedFrame_get_Parent () {
    return this._parent;
  };

  function InterpretedFrame_get_VoidGotoMethod () {
    var arg_24_0 = null;
    if ((arg_24_0 = $thisType._VoidGoto) === null) {
      arg_24_0 = $thisType._VoidGoto = $thisType.__Type__.GetMethod("VoidGoto");
    }
    return arg_24_0;
  };

  function InterpretedFrame_GetDebugInfo (instructionIndex) {
    return $T08().GetMatchingDebugInfo(this.Interpreter._debugInfos, instructionIndex);
  };

  function InterpretedFrame_GetExceptionStackTrace (exception) {
    return $T0A().$As($T0B().GetData(exception, $T0C().__Type__));
  };

  function InterpretedFrame_GetStackTraceDebugInfo () {
    var $lGetStackTraceDebugInfo$gd__ = new ($T0D())(-2);
    $lGetStackTraceDebugInfo$gd__.$l$g4__this = this;
    return $lGetStackTraceDebugInfo$gd__;
  };

  function InterpretedFrame_Goto (labelIndex, value) {
    var target = this.Interpreter._labels[labelIndex];
    if ((this._continuationIndex | 0) === (target.ContinuationStackDepth | 0)) {
      this.SetStackDepth(target.StackDepth);
      if (value !== $T01().NoValue) {
        this.Data[(((this.StackIndex | 0) - 1) | 0)] = value;
      }
      var result = (((target.Index | 0) - (this.InstructionIndex | 0)) | 0);
    } else {
      this._pendingContinuation = (labelIndex | 0);
      this._pendingValue = value;
      result = (this.YieldToCurrentContinuation() | 0);
    }
    return result;
  };

  function InterpretedFrame_IsInterpretedFrame (method) {
    $T10().RequiresNotNull(method, "method");
    return ($T07().op_Equality(method.get_DeclaringType(), $T01().__Type__) && (method.get_Name() == "Run"));
  };

  function InterpretedFrame_Leave (currentFrame) {
    currentFrame.Value = this._parent;
  };

  function InterpretedFrame_Peek () {
    return this.Data[(((this.StackIndex | 0) - 1) | 0)];
  };

  function InterpretedFrame_Pop$00 () {
    return this.Data[(this.StackIndex = (((this.StackIndex | 0) - 1) | 0))];
  };

  function InterpretedFrame_Pop$01 (n) {
    var si = (((this.StackIndex | 0) - (n | 0)) | 0);
    this.StackIndex = si;
    return this.Data[si];
  };

  function InterpretedFrame_PopPendingContinuation () {
    this._pendingValue = this.Pop();
    this._pendingContinuation = $T04().$Cast(this.Pop());
  };

  function InterpretedFrame_Push$02 (value) {
    var $temp00;
    this.Data[($temp00 = (this.StackIndex | 0), 
      this.StackIndex = (((this.StackIndex | 0) + 1) | 0), 
      $temp00)] = value;
  };

  function InterpretedFrame_Push$03 (value) {
    var $temp00;
    this.Data[($temp00 = (this.StackIndex | 0), 
      this.StackIndex = (((this.StackIndex | 0) + 1) | 0), 
      $temp00)] = (
      value
         ? $T14().True
         : $T14().False)
    ;
  };

  function InterpretedFrame_Push$04 (value) {
    var $temp00;
    this.Data[($temp00 = (this.StackIndex | 0), 
      this.StackIndex = (((this.StackIndex | 0) + 1) | 0), 
      $temp00)] = $T14().Int32ToObject(value);
  };

  function InterpretedFrame_PushContinuation (continuation) {
    var $temp00;
    this._continuations[($temp00 = (this._continuationIndex | 0), 
      this._continuationIndex = (((this._continuationIndex | 0) + 1) | 0), 
      $temp00)] = (continuation | 0);
  };

  function InterpretedFrame_PushPendingContinuation () {
    $S00().CallVirtual("Push", null, this, this._pendingContinuation);
    $S01().CallVirtual("Push", null, this, this._pendingValue);
  };

  function InterpretedFrame_RemoveContinuation () {
    this._continuationIndex = (((this._continuationIndex | 0) - 1) | 0);
  };

  function InterpretedFrame_SaveTraceToException (exception) {
    if ($T0B().GetData(exception, $T0C().__Type__) === null) {
      $T0B().SetData(exception, $T0C().__Type__, $T15().prototype.ToArray.call($S02().Construct(this.GetStackTraceDebugInfo())));
    }
  };

  function InterpretedFrame_SetStackDepth (depth) {
    this.StackIndex = ((((this.Interpreter).get_LocalCount() | 0) + (depth | 0)) | 0);
  };

  function InterpretedFrame_VoidGoto (labelIndex) {
    return this.Goto(labelIndex, $T01().NoValue);
  };

  function InterpretedFrame_YieldToCurrentContinuation () {
    var target = this.Interpreter._labels[this._continuations[(((this._continuationIndex | 0) - 1) | 0)]];
    this.SetStackDepth(target.StackDepth);
    return (((target.Index | 0) - (this.InstructionIndex | 0)) | 0);
  };

  function InterpretedFrame_YieldToPendingContinuation () {
    var pendingTarget = this.Interpreter._labels[this._pendingContinuation];
    if ((pendingTarget.ContinuationStackDepth | 0) < (this._continuationIndex | 0)) {
      var currentTarget = this.Interpreter._labels[this._continuations[(((this._continuationIndex | 0) - 1) | 0)]];
      this.SetStackDepth(currentTarget.StackDepth);
      var result = (((currentTarget.Index | 0) - (this.InstructionIndex | 0)) | 0);
    } else {
      this.SetStackDepth(pendingTarget.StackDepth);
      if (this._pendingValue !== $T01().NoValue) {
        this.Data[(((this.StackIndex | 0) - 1) | 0)] = this._pendingValue;
      }
      result = (((pendingTarget.Index | 0) - (this.InstructionIndex | 0)) | 0);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.InterpretedFrame", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])])]), 
      InterpretedFrame__ctor
    );

    $.Method({Static:false, Public:true }, "Dup", 
      JSIL.MethodSignature.Void, 
      InterpretedFrame_Dup
    );

    $.Method({Static:false, Public:false}, "Enter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Utils.ThreadLocal`1+StorageInfo", [$.Type])), 
      InterpretedFrame_Enter
    );

    $.Method({Static:true , Public:false}, "get_GotoMethod", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      InterpretedFrame_get_GotoMethod
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      InterpretedFrame_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type), 
      InterpretedFrame_get_Parent
    );

    $.Method({Static:true , Public:false}, "get_VoidGotoMethod", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      InterpretedFrame_get_VoidGotoMethod
    );

    $.Method({Static:false, Public:true }, "GetDebugInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo"), [$.Int32]), 
      InterpretedFrame_GetDebugInfo
    );

    $.Method({Static:true , Public:true }, "GetExceptionStackTrace", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")]), [$asm01.TypeRef("System.Exception")]), 
      InterpretedFrame_GetExceptionStackTrace
    );

    $.Method({Static:false, Public:true }, "GetStackTraceDebugInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")])), 
      InterpretedFrame_GetStackTraceDebugInfo
    );

    $.Method({Static:false, Public:true }, "Goto", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object]), 
      InterpretedFrame_Goto
    );

    $.Method({Static:true , Public:true }, "IsInterpretedFrame", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      InterpretedFrame_IsInterpretedFrame
    );

    $.Method({Static:false, Public:false}, "Leave", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Utils.ThreadLocal`1+StorageInfo", [$.Type])), 
      InterpretedFrame_Leave
    );

    $.Method({Static:false, Public:true }, "Peek", 
      JSIL.MethodSignature.Return($.Object), 
      InterpretedFrame_Peek
    );

    $.Method({Static:false, Public:true }, "Pop", 
      JSIL.MethodSignature.Return($.Object), 
      InterpretedFrame_Pop$00
    );

    $.Method({Static:false, Public:true }, "Pop", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      InterpretedFrame_Pop$01
    );

    $.Method({Static:false, Public:false}, "PopPendingContinuation", 
      JSIL.MethodSignature.Void, 
      InterpretedFrame_PopPendingContinuation
    );

    $.Method({Static:false, Public:true }, "Push", 
      JSIL.MethodSignature.Action($.Object), 
      InterpretedFrame_Push$02
    );

    $.Method({Static:false, Public:true }, "Push", 
      JSIL.MethodSignature.Action($.Boolean), 
      InterpretedFrame_Push$03
    );

    $.Method({Static:false, Public:true }, "Push", 
      JSIL.MethodSignature.Action($.Int32), 
      InterpretedFrame_Push$04
    );

    $.Method({Static:false, Public:true }, "PushContinuation", 
      JSIL.MethodSignature.Action($.Int32), 
      InterpretedFrame_PushContinuation
    );

    $.Method({Static:false, Public:false}, "PushPendingContinuation", 
      JSIL.MethodSignature.Void, 
      InterpretedFrame_PushPendingContinuation
    );

    $.Method({Static:false, Public:true }, "RemoveContinuation", 
      JSIL.MethodSignature.Void, 
      InterpretedFrame_RemoveContinuation
    );

    $.Method({Static:false, Public:false}, "SaveTraceToException", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Exception")), 
      InterpretedFrame_SaveTraceToException
    );

    $.Method({Static:false, Public:false}, "SetStackDepth", 
      JSIL.MethodSignature.Action($.Int32), 
      InterpretedFrame_SetStackDepth
    );

    $.Method({Static:false, Public:true }, "VoidGoto", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      InterpretedFrame_VoidGoto
    );

    $.Method({Static:false, Public:true }, "YieldToCurrentContinuation", 
      JSIL.MethodSignature.Return($.Int32), 
      InterpretedFrame_YieldToCurrentContinuation
    );

    $.Method({Static:false, Public:true }, "YieldToPendingContinuation", 
      JSIL.MethodSignature.Return($.Int32), 
      InterpretedFrame_YieldToPendingContinuation
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "CurrentFrame", $asm00.TypeRef("Microsoft.Scripting.Utils.ThreadLocal`1", [$.Type])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Interpreter", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter")); 
    $.Field({Static:false, Public:false}, "_parent", $.Type); 
    $.Field({Static:false, Public:false}, "_continuations", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_continuationIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "_pendingContinuation", $.Int32); 
    $.Field({Static:false, Public:false}, "_pendingValue", $.Object); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Closure", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])])); 
    $.Field({Static:false, Public:true }, "StackIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "InstructionIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "CurrentAbortHandler", $asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler")); 
    $.Field({Static:true , Public:false}, "_Goto", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:true , Public:false}, "_VoidGoto", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    function InterpretedFrame__cctor () {
      $thisType.CurrentFrame = new ($T00())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      InterpretedFrame__cctor
    );

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.Property({Static:true , Public:false}, "GotoMethod", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "VoidGotoMethod", $asm01.TypeRef("System.Reflection.MethodInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.InterpretedFrame+<GetStackTraceDebugInfo>d__0 */ 

(function $lGetStackTraceDebugInfo$gd__0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrameInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function $lGetStackTraceDebugInfo$gd__0__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetStackTraceDebugInfo$gd__0_MoveNext () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 0: 
              this.$l$g1__state = -1;
              this.$lframe$g5__1 = this.$l$g4__this;
              break;

            case 1: 
              this.$l$g1__state = -1;
              this.$lframe$g5__1 = (this.$lframe$g5__1).get_Parent();
              if (this.$lframe$g5__1 === null) {
                $label0 = 1 /* goto IL_93 */ ;
                continue $labelgroup0;
              }
              break;

            default: 
              $label0 = 1 /* goto IL_93 */ ;
              continue $labelgroup0;

          }
          this.$l$g2__current = new ($T03())((this.$lframe$g5__1).get_Name(), (this.$lframe$g5__1).GetDebugInfo(this.$lframe$g5__1.InstructionIndex));
          this.$l$g1__state = 1;
          var result = true;
          return result;

          $label0 = 1 /* goto IL_93 */ ;
          continue $labelgroup0;
        case 1: /* IL_93 */ 
          result = false;
          return result;

          break $labelgroup0;
      }
    }
  };

  function $lGetStackTraceDebugInfo$gd__0_System_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Interpreter_InterpretedFrameInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetStackTraceDebugInfo$gd__ = this;
    } else {
      $lGetStackTraceDebugInfo$gd__ = new $thisType(0);
      $lGetStackTraceDebugInfo$gd__.$l$g4__this = this.$l$g4__this;
    }
    return $lGetStackTraceDebugInfo$gd__;
  };

  function $lGetStackTraceDebugInfo$gd__0_System_Collections_Generic_IEnumerator$lMicrosoft_Scripting_Interpreter_InterpretedFrameInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetStackTraceDebugInfo$gd__0_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Interpreter_InterpretedFrameInfo$g_GetEnumerator();
  };

  function $lGetStackTraceDebugInfo$gd__0_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetStackTraceDebugInfo$gd__0_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lGetStackTraceDebugInfo$gd__0_System_IDisposable_Dispose () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.InterpretedFrame+<GetStackTraceDebugInfo>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetStackTraceDebugInfo$gd__0__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetStackTraceDebugInfo$gd__0_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Scripting.Interpreter.InterpretedFrameInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")])), 
      $lGetStackTraceDebugInfo$gd__0_System_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Interpreter_InterpretedFrameInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.Scripting.Interpreter.InterpretedFrameInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")), 
      $lGetStackTraceDebugInfo$gd__0_System_Collections_Generic_IEnumerator$lMicrosoft_Scripting_Interpreter_InterpretedFrameInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetStackTraceDebugInfo$gd__0_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetStackTraceDebugInfo$gd__0_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetStackTraceDebugInfo$gd__0_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetStackTraceDebugInfo$gd__0_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")); 
    $.Field({Static:false, Public:true }, "$lframe$g5__1", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.Scripting.Interpreter.InterpretedFrameInfo$g.Current", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrameInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Interpreter.Interpreter */ 

(function Interpreter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariables)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.BranchLabel))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionArray)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.DebugInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariable))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.RuntimeLabel))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter_ExceptionHandlingResult)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.Instruction))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };

  function Interpreter__ctor (name, locals, labelMapping, instructions, handlers, debugInfos, compilationThreshold) {
    this._name = name;
    this._localCount = (locals.get_LocalCount() | 0);
    this._closureVariables = locals.get_ClosureVariables();
    this._instructions = instructions;
    this._objects = instructions.Objects;
    this._labels = instructions.Labels;
    this._labelMapping = labelMapping;
    this._handlers = handlers;
    this._debugInfos = debugInfos;
    this._compilationThreshold = (compilationThreshold | 0);
  };

  function Interpreter_AbortThreadIfRequested (frame, targetLabelIndex) {
  };

  function Interpreter_get_ClosureSize () {
    if (this._closureVariables === null) {
      var result = 0;
    } else {
      result = ((this._closureVariables).get_Count() | 0);
    }
    return result;
  };

  function Interpreter_get_ClosureVariables () {
    return this._closureVariables;
  };

  function Interpreter_get_CompileSynchronously () {
    return ((this._compilationThreshold | 0) <= 1);
  };

  function Interpreter_get_Instructions () {
    return this._instructions;
  };

  function Interpreter_get_LabelMapping () {
    return this._labelMapping;
  };

  function Interpreter_get_LocalCount () {
    return this._localCount;
  };

  function Interpreter_get_ReturnAndRethrowLabelIndex () {
    return (((this._labels.length | 0) - 1) | 0);
  };

  function Interpreter_GetBestHandler (instructionIndex, exceptionType) {
    var best = null;
    var handlers = this._handlers;

    for (var i = 0; i < (handlers.length | 0); i = ((i + 1) | 0)) {
      var handler = handlers[i];
      if (handler.Matches(exceptionType, instructionIndex)) {
        if (handler.IsBetterThan(best)) {
          best = handler;
        }
      }
    }
    return best;
  };

  function Interpreter_GotoHandler (frame, exception, /* ref */ handler) {
    handler.set(this.GetBestHandler(frame.InstructionIndex, JSIL.GetType(exception)));
    if (handler.get() === null) {
      var result = (frame.Goto(this.get_ReturnAndRethrowLabelIndex(), $thisType.NoValue) | 0);
    } else {
      result = (frame.Goto(handler.get().LabelIndex, exception) | 0);
    }
    return result;
  };

  function Interpreter_HandleException (frame, exception, $exception) {
    var handler = new JSIL.BoxedVariable(null);
    frame.SaveTraceToException(exception);
    frame.InstructionIndex = (((frame.InstructionIndex | 0) + (this.GotoHandler(frame, exception, /* ref */ handler) | 0)) | 0);
    if (!((handler.get() !== null) && !(handler.get()).get_IsFault())) {
      this.Run(frame);
      if ((frame.InstructionIndex | 0) === 2147483647) {
        var result = $T0E().Rethrow;
      } else {
        result = $T0E().Return;
      }
    } else {

    $loop0: 
      while (true) {
        try {
          var instructions = this._instructions.Instructions;

          for (var index = (frame.InstructionIndex | 0); index < (instructions.length | 0); ) {
            var curInstr = instructions[index];
            index = ((index + (curInstr.Run(frame) | 0)) | 0);
            frame.InstructionIndex = index;
            if ($T11().$Is(curInstr)) {
              result = $T0E().Continue;
              return result;
            }
          }
          if ((frame.InstructionIndex | 0) === 2147483647) {
            result = $T0E().Rethrow;
            break $loop0;
          }
          result = $T0E().Return;
          break $loop0;
        } catch ($exception) {
          switch ((this.HandleException(frame, $exception)).valueOf()) {
            case 0: 
              throw $exception;

            case 1: 
              break;

            case 2: 
              result = $T0E().Return;
              return result;

            default: 
              throw $T12().get_Unreachable();

          }
        }
      }
    }
    return result;
  };

  function Interpreter_Run (frame, $exception) {

  $loop0: 
    while (true) {
      try {
        var instructions = this._instructions.Instructions;

        for (var index = (frame.InstructionIndex | 0); index < (instructions.length | 0); ) {
          index = ((index + ((instructions[index]).Run(frame) | 0)) | 0);
          frame.InstructionIndex = index;
        }
        break $loop0;
      } catch ($exception) {
        switch ((this.HandleException(frame, $exception)).valueOf()) {
          case 0: 
            throw $exception;

          case 2: 
            return;

        }
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.Interpreter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables"), 
          $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")]), 
          $.Int32
        ]), 
      Interpreter__ctor
    );

    $.Method({Static:true , Public:false}, "AbortThreadIfRequested", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $.Int32]), 
      Interpreter_AbortThreadIfRequested
    );

    $.Method({Static:false, Public:false}, "get_ClosureSize", 
      JSIL.MethodSignature.Return($.Int32), 
      Interpreter_get_ClosureSize
    );

    $.Method({Static:false, Public:false}, "get_ClosureVariables", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])), 
      Interpreter_get_ClosureVariables
    );

    $.Method({Static:false, Public:false}, "get_CompileSynchronously", 
      JSIL.MethodSignature.Return($.Boolean), 
      Interpreter_get_CompileSynchronously
    );

    $.Method({Static:false, Public:false}, "get_Instructions", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray")), 
      Interpreter_get_Instructions
    );

    $.Method({Static:false, Public:false}, "get_LabelMapping", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")])), 
      Interpreter_get_LabelMapping
    );

    $.Method({Static:false, Public:false}, "get_LocalCount", 
      JSIL.MethodSignature.Return($.Int32), 
      Interpreter_get_LocalCount
    );

    $.Method({Static:false, Public:false}, "get_ReturnAndRethrowLabelIndex", 
      JSIL.MethodSignature.Return($.Int32), 
      Interpreter_get_ReturnAndRethrowLabelIndex
    );

    $.Method({Static:false, Public:false}, "GetBestHandler", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler"), [$.Int32, $asm01.TypeRef("System.Type")]), 
      Interpreter_GetBestHandler
    );

    $.Method({Static:false, Public:false}, "GotoHandler", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler")])
        ]), 
      Interpreter_GotoHandler
    );

    $.Method({Static:false, Public:false}, "HandleException", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter+ExceptionHandlingResult"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $asm01.TypeRef("System.Exception")]), 
      Interpreter_HandleException
    );

    $.Method({Static:false, Public:true }, "Run", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")), 
      Interpreter_Run
    );

    $.Constant({Static:true , Public:false}, "RethrowOnReturn", 2147483647); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NoValue", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_compilationThreshold", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_localCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_labelMapping", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_closureVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_instructions", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_objects", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_labels", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.RuntimeLabel")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_handlers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_debugInfos", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")])); 
    function Interpreter__cctor () {
      $thisType.NoValue = new ($T00())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Interpreter__cctor
    );

    $.Property({Static:false, Public:false}, "ClosureSize", $.Int32);

    $.Property({Static:false, Public:false}, "LocalCount", $.Int32);

    $.Property({Static:false, Public:false}, "CompileSynchronously", $.Boolean);

    $.Property({Static:false, Public:false}, "Instructions", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionArray"));

    $.Property({Static:false, Public:false}, "ClosureVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")]));

    $.Property({Static:false, Public:false}, "LabelMapping", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]));

    $.Property({Static:false, Public:false}, "ReturnAndRethrowLabelIndex", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Scripting.Interpreter.Interpreter+ExceptionHandlingResult */ 

JSIL.MakeEnum(
  "Microsoft.Scripting.Interpreter.Interpreter+ExceptionHandlingResult", false, {
    Rethrow: 0, 
    Continue: 1, 
    Return: 2
  }, false
);

/* class Microsoft.Scripting.Interpreter.ExceptionHandler */ 

(function ExceptionHandler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };

  function ExceptionHandler__ctor (start, end, labelIndex, handlerStartIndex, exceptionType) {
    this.StartIndex = (start | 0);
    this.EndIndex = (end | 0);
    this.LabelIndex = (labelIndex | 0);
    this.ExceptionType = exceptionType;
    this.HandlerStartIndex = (handlerStartIndex | 0);
  };

  function ExceptionHandler_get_IsFault () {
    return $T01().op_Equality(this.ExceptionType, null);
  };

  function ExceptionHandler_IsBetterThan (other) {
    if (other === null) {
      var result = true;
    } else if (!(((this.StartIndex | 0) !== (other.StartIndex | 0)) || ((this.EndIndex | 0) !== (other.EndIndex | 0)))) {
      result = (this.HandlerStartIndex | 0) < (other.HandlerStartIndex | 0);
    } else {
      result = ((this.StartIndex | 0) > (other.StartIndex | 0)) || 
      ((this.EndIndex | 0) < (other.EndIndex | 0));
    }
    return result;
  };

  function ExceptionHandler_IsInside (index) {
    return (((index | 0) >= (this.StartIndex | 0)) && ((index | 0) < (this.EndIndex | 0)));
  };

  function ExceptionHandler_Matches (exceptionType, index) {
    if (!(((index | 0) < (this.StartIndex | 0)) || ((index | 0) >= (this.EndIndex | 0)))) {
      if (!(!$T01().op_Equality(this.ExceptionType, null) && !$S00().CallVirtual("IsAssignableFrom", null, this.ExceptionType, exceptionType))) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function ExceptionHandler_toString () {
    return $T03().Format("{0} [{1}-{2}] [{3}->]", JSIL.Array.New($T04(), [(
          this.get_IsFault()
             ? "fault"
             : ("catch(" + (this.ExceptionType).get_Name() + ")"))
        , this.StartIndex, this.EndIndex, this.HandlerStartIndex]));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.ExceptionHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.Type")
        ]), 
      ExceptionHandler__ctor
    );

    $.Method({Static:false, Public:true }, "get_IsFault", 
      JSIL.MethodSignature.Return($.Boolean), 
      ExceptionHandler_get_IsFault
    );

    $.Method({Static:false, Public:true }, "IsBetterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      ExceptionHandler_IsBetterThan
    );

    $.Method({Static:false, Public:false}, "IsInside", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      ExceptionHandler_IsInside
    );

    $.Method({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $.Int32]), 
      ExceptionHandler_Matches
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      ExceptionHandler_toString
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "ExceptionType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "StartIndex", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "EndIndex", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "LabelIndex", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "HandlerStartIndex", $.Int32); 
    $.Property({Static:false, Public:true }, "IsFault", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DebugInfo */ 

(function DebugInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DebugInfo_DebugInfoComparer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.DebugInfo))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("System.Array", ["!!0"]), "!!0", 
        $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])
      ], ["T"]))) ();
  };

  function DebugInfo__ctor () {
  };

  function DebugInfo_GetMatchingDebugInfo (debugInfos, index) {
    var d = (new $thisType()).__Initialize__({
        Index: index}
    );
    var i = ($S00().CallStatic($T03(), "BinarySearch$b1", [$thisType], debugInfos, d, $thisType._debugComparer) | 0);
    if (i < 0) {
      i = (~i | 0);
      if (i === 0) {
        var result = null;
        return result;
      }
      i = ((i - 1) | 0);
    }
    result = debugInfos[i];
    return result;
  };

  function DebugInfo_toString () {
    if (this.IsClear) {
      var result = $T04().Format("{0}: clear", this.Index);
    } else {
      result = $T04().Format("{0}: [{1}-{2}] '{3}'", JSIL.Array.New($T05(), [this.Index, this.StartLine, this.EndLine, this.FileName]));
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.DebugInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DebugInfo__ctor
    );

    $.Method({Static:true , Public:true }, "GetMatchingDebugInfo", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Type]), $.Int32]), 
      DebugInfo_GetMatchingDebugInfo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      DebugInfo_toString
    );

    $.Field({Static:false, Public:true }, "StartLine", $.Int32); 
    $.Field({Static:false, Public:true }, "EndLine", $.Int32); 
    $.Field({Static:false, Public:true }, "Index", $.Int32); 
    $.Field({Static:false, Public:true }, "FileName", $.String); 
    $.Field({Static:false, Public:true }, "IsClear", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_debugComparer", $asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo+DebugInfoComparer")); 
    function DebugInfo__cctor () {
      $thisType._debugComparer = new ($T00())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DebugInfo__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.DebugInfo+DebugInfoComparer */ 

(function DebugInfoComparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DebugInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function DebugInfoComparer__ctor () {
  };

  function DebugInfoComparer_System_Collections_Generic_IComparer$lMicrosoft_Scripting_Interpreter_DebugInfo$g_Compare (d1, d2) {
    if ((d1.Index | 0) > (d2.Index | 0)) {
      var result = 1;
    } else if ((d1.Index | 0) === (d2.Index | 0)) {
      result = 0;
    } else {
      result = -1;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.DebugInfo+DebugInfoComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      DebugInfoComparer__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lMicrosoft.Scripting.Interpreter.DebugInfo$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")]), 
      DebugInfoComparer_System_Collections_Generic_IComparer$lMicrosoft_Scripting_Interpreter_DebugInfo$g_Compare
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")]), "Compare");

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Scripting.Interpreter.InterpretedFrameInfo */ 

(function InterpretedFrameInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DebugInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function InterpretedFrameInfo__ctor (methodName, info) {
    this.MethodName = methodName;
    this.DebugInfo = info;
  };

  function InterpretedFrameInfo_toString () {
    return JSIL.ConcatString(this.MethodName, (
      (this.DebugInfo !== null)
         ? JSIL.ConcatString(": ", (this.DebugInfo).toString())
         : null)
    );
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Interpreter.InterpretedFrameInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")]), 
      InterpretedFrameInfo__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      InterpretedFrameInfo_toString
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "MethodName", $.String); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "DebugInfo", $asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LightCompiler */ 

(function LightCompiler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalDefinition)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariables)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.DebugInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.LabelInfo))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelScopeInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelScopeKind)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.System.Collections.Generic.Stack$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.Utils)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.System.Linq.Expressions.SwitchCase)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Func$b2.Of($asm04.System.Linq.Expressions.Expression, $asm01.System.Boolean))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.System.Linq.Expressions.ConstantExpression)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.Assert)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.System.Linq.Expressions.BinaryExpression)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm04.System.Linq.Expressions.BlockExpression)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.LocalDefinition))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.TypeUtils)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchLabel)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm04.System.Linq.Expressions.ConditionalExpression)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm04.System.Linq.Expressions.UnaryExpression)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm04.System.Linq.Expressions.DebugInfoExpression)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.DebugInfo)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm04.System.Linq.Expressions.SymbolDocumentInfo)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IInstructionProvider)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariable)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm04.System.Linq.Expressions.GotoExpression)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LabelInfo)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm04.System.Linq.Expressions.IndexExpression)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm04.System.Linq.Expressions.InvocationExpression)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm04.System.Linq.Expressions.LambdaExpression)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm04.System.Linq.Expressions.LabelExpression)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm04.System.Linq.Expressions.LabelTarget)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection_Enumerator.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariable))) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_KeyCollection.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariable))) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariable))) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm04.System.Linq.Expressions.LoopExpression)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.EnterLoopInstruction)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm04.System.Linq.Expressions.MemberExpression)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm04.System.Linq.Expressions.MethodCallExpression)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionUtils)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm01.System.Predicate$b1.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm04.System.Linq.Expressions.NewArrayExpression)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm04.System.Linq.Expressions.NewExpression)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm04.System.Linq.Expressions.RuntimeVariablesExpression)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm04.System.Linq.Expressions.SwitchExpression)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm01.System.Func$b2.Of($asm04.System.Linq.Expressions.SwitchCase, $asm01.System.Boolean))) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Int32, $asm01.System.Int32))) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm04.System.Linq.Expressions.SwitchCase))) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.LightLambdaExpression)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm04.System.Linq.Expressions.TryExpression)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm04.System.Linq.Expressions.CatchBlock))) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm04.System.Linq.Expressions.CatchBlock)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler)) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.CatchBlock))) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm04.System.Linq.Expressions.TypeBinaryExpression)) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionFactory$b1.Of($asm01.System.Boolean))) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Instruction)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.CallInstruction)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm01.System.Security.SecurityException)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.PopNInstruction)) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.BranchLabel))) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.LabelInfo)))) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.LabelInfo))) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.ExceptionHandler))) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Scripting.Interpreter.DebugInfo))) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.SwitchCase))) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("System.Collections.Generic.Stack`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Int32")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.TypeCode")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
        $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Boolean")))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"), $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"), $asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression")]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.FieldInfo")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.ParameterExpression).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.Expression).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm04.System.Linq.Expressions.ParameterExpression).GetEnumerator)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.CatchBlock).get_Current)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.LabelInfo)).get_Current)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm04.System.Linq.Expressions.SwitchCase).get_Current)) ();
  };

  function LightCompiler__ctor$00 (compilationThreshold) {
    this._locals = new ($T02())();
    this._handlers = $S00().Construct();
    this._debugInfos = $S01().Construct();
    this._treeLabels = $S02().Construct();
    this._labelBlock = new ($T06())(null, $T07().Lambda);
    this._exceptionForRethrowStack = $S03().Construct();
    this._instructions = new ($T09())();
    this._compilationThreshold = ((
      ((compilationThreshold | 0) < 0)
         ? 32
         : compilationThreshold)
     | 0);
  };

  function LightCompiler__ctor$01 (parent) {
    $S04().Call($thisType.prototype, "_ctor", null, this, parent._compilationThreshold);
    this._parent = parent;
  };

  function LightCompiler_$lCompileMethodCallExpression$gb__4 (p) {
    return !(p.get_ParameterType()).get_IsByRef();
  };

  function LightCompiler_$lCompileMethodCallExpression$gb__5 (e) {
    return $T0D().Convert(e, $T0E().__Type__);
  };

  function LightCompiler_$lCompileNewExpression$gb__8 (p) {
    return !(p.get_ParameterType()).get_IsByRef();
  };

  function LightCompiler_$lCompileSwitchExpression$gb__0 (c) {
    return $T10().All$b1($T0C())(
      c.get_TestValues(), 
      $T11().New($thisType, $thisType.$lCompileSwitchExpression$gb__1, function () { return JSIL.GetMethodInfo($thisType, "$lCompileSwitchExpression$gb__1", new JSIL.MethodSignature($asm01.System.Boolean, [$asm04.System.Linq.Expressions.Expression]), true); })
    );
  };

  function LightCompiler_$lCompileSwitchExpression$gb__1 (t) {
    return $T12().$Is(t);
  };

  function LightCompiler_Compile$02 (expr, asVoid) {
    if (asVoid) {
      this.CompileAsVoid(expr);
    } else {
      this.Compile(expr);
    }
  };

  function LightCompiler_Compile$03 (expr) {
    var pushLabelBlock = this.TryPushLabelBlock(expr);
    this.CompileNoLabelPush(expr);
    if (pushLabelBlock) {
      this.PopLabelBlock(this._labelBlock.Kind);
    }
  };

  function LightCompiler_CompileAndAlsoBinaryExpression (expr) {
    this.CompileLogicalBinaryExpression(expr, true);
  };

  function LightCompiler_CompileArithmetic (nodeType, left, right) {
    this.Compile(left);
    this.Compile(right);
    if (nodeType <= $T14().Divide) {
      switch (nodeType.valueOf()) {
        case 0: 
          (this._instructions).EmitAdd(left.get_Type(), false);
          return;

        case 1: 
          (this._instructions).EmitAdd(left.get_Type(), true);
          return;

        default: 
          if (nodeType === $T14().Divide) {
            (this._instructions).EmitDiv(left.get_Type());
            return;
          }
          break;

      }
    } else {
      switch (nodeType.valueOf()) {
        case 25: 
          (this._instructions).EmitMod(left.get_Type());
          return;

        case 26: 
          (this._instructions).EmitMul(left.get_Type(), false);
          return;

        case 27: 
          (this._instructions).EmitMul(left.get_Type(), true);
          return;

        default: 
          switch (nodeType.valueOf()) {
            case 42: 
              (this._instructions).EmitSub(left.get_Type(), false);
              return;

            case 43: 
              (this._instructions).EmitSub(left.get_Type(), true);
              return;

          }
          break;

      }
    }
    throw $T15().get_Unreachable();
  };

  function LightCompiler_CompileAssignBinaryExpression (expr, asVoid) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var node = $T16().$Cast(expr);
          var nodeType = (node.get_Left()).get_NodeType();
          if (nodeType <= $T14().Parameter) {
            if (nodeType === $T14().MemberAccess) {
              this.CompileMemberAssignment(node, asVoid);
              return;
            }
            if (nodeType !== $T14().Parameter) {
              $label0 = 1 /* goto IL_52 */ ;
              continue $labelgroup0;
            }
          } else if (nodeType !== $T14().Extension) {
            if (nodeType !== $T14().Index) {
              $label0 = 1 /* goto IL_52 */ ;
              continue $labelgroup0;
            }
            this.CompileIndexAssignment(node, asVoid);
            return;
          }
          this.CompileVariableAssignment(node, asVoid);
          return;

          $label0 = 1 /* goto IL_52 */ ;
          continue $labelgroup0;
        case 1: /* IL_52 */ 
          throw $S05().Construct(JSIL.ConcatString("Invalid lvalue for assignment: ", (node.get_Left()).get_NodeType()));

          break $labelgroup0;
      }
    }
  };

  function LightCompiler_CompileAsVoid (expr) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var pushLabelBlock = this.TryPushLabelBlock(expr);
          var startingStackDepth = ((this._instructions).get_CurrentStackDepth() | 0);
          var nodeType = expr.get_NodeType();
          if (nodeType <= $T14().Parameter) {
            if (!((nodeType === $T14().Constant) || (nodeType === $T14().Parameter))) {
              $label0 = 1 /* goto IL_6D */ ;
              continue $labelgroup0;
            }
          } else {
            switch (nodeType.valueOf()) {
              case 46: 
                this.CompileAssignBinaryExpression(expr, true);
                break;

              case 47: 
                this.CompileBlockExpression(expr, true);
                break;

              default: 
                if (nodeType !== $T14().Default) {
                  if (nodeType !== $T14().Throw) {
                    $label0 = 1 /* goto IL_6D */ ;
                    continue $labelgroup0;
                  }
                  this.CompileThrowUnaryExpression(expr, true);
                }
                break;

            }
          }
          break $labelgroup0;

        case 1: /* IL_6D */ 
          this.CompileNoLabelPush(expr);
          if ($T0B().op_Inequality(expr.get_Type(), $T19().__Type__)) {
            (this._instructions).EmitPop();
          }
          break $labelgroup0;

      }
    }
    /* Original label IL_A1 */ 
    if (pushLabelBlock) {
      this.PopLabelBlock(this._labelBlock.Kind);
    }
  };

  function LightCompiler_CompileAsVoidRemoveRethrow (expr) {
    var stackDepth = ((this._instructions).get_CurrentStackDepth() | 0);
    if (expr.get_NodeType() !== $T14().Throw) {
      var node = $T1A().$Cast(expr);
      var end = this.CompileBlockStart(node);
      this.CompileAsVoidRemoveRethrow((node.get_Expressions()).get_Item(((((node.get_Expressions()).get_Count() | 0) - 1) | 0)));
      this.CompileBlockEnd(end);
    }
  };

  function LightCompiler_CompileBinaryExpression (expr) {
    var node = $T16().$Cast(expr);
    if (!$T1D().op_Inequality(node.get_Method(), null)) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var nodeType = node.get_NodeType();
            switch (nodeType.valueOf()) {
              case 0: 
              case 1: 
              case 12: 
              case 25: 
              case 26: 
              case 27: 
                break;

              case 2: 
              case 14: 
                $label0 = 2 /* goto IL_1C8 */ ;
                continue $labelgroup0;

              case 3: 
              case 4: 
              case 6: 
              case 7: 
              case 8: 
              case 9: 
              case 10: 
              case 11: 
              case 17: 
              case 18: 
              case 22: 
              case 23: 
              case 24: 
                $label0 = 3 /* goto IL_1E9 */ ;
                continue $labelgroup0;

              case 5: 
                this.Compile(node.get_Left());
                this.Compile(node.get_Right());
                (this._instructions).EmitGetArrayItem((node.get_Left()).get_Type());
                return;

              case 13: 
                this.CompileEqual(
                  node.get_Left(), 
                  node.get_Right(), 
                  node.get_IsLiftedToNull()
                );
                return;

              case 15: 
              case 16: 
              case 20: 
              case 21: 
                this.CompileComparison(
                  node.get_NodeType(), 
                  node.get_Left(), 
                  node.get_Right(), 
                  node.get_IsLiftedToNull()
                );
                return;

              case 19: 
                $label0 = 1 /* goto IL_1A7 */ ;
                continue $labelgroup0;

              default: 
                switch (nodeType.valueOf()) {
                  case 35: 
                    this.CompileNotEqual(
                      node.get_Left(), 
                      node.get_Right(), 
                      node.get_IsLiftedToNull()
                    );
                    return;

                  case 36: 
                    $label0 = 2 /* goto IL_1C8 */ ;
                    continue $labelgroup0;

                  case 37: 
                  case 38: 
                  case 39: 
                  case 40: 
                    $label0 = 3 /* goto IL_1E9 */ ;
                    continue $labelgroup0;

                  case 41: 
                    $label0 = 1 /* goto IL_1A7 */ ;
                    continue $labelgroup0;

                  case 42: 
                  case 43: 
                    break;

                  default: 
                    $label0 = 3 /* goto IL_1E9 */ ;
                    continue $labelgroup0;

                }
                break;

            }
            this.CompileArithmetic(
              node.get_NodeType(), 
              node.get_Left(), 
              node.get_Right()
            );
            return;

            $label0 = 1 /* goto IL_1A7 */ ;
            continue $labelgroup0;
          case 1: /* IL_1A7 */ 
            this.CompileShift(
              node.get_NodeType(), 
              node.get_Left(), 
              node.get_Right(), 
              node.get_IsLifted()
            );
            return;

            $label0 = 2 /* goto IL_1C8 */ ;
            continue $labelgroup0;
          case 2: /* IL_1C8 */ 
            this.CompileLogical(
              node.get_NodeType(), 
              node.get_Left(), 
              node.get_Right(), 
              node.get_IsLifted()
            );
            return;

            $label0 = 3 /* goto IL_1E9 */ ;
            continue $labelgroup0;
          case 3: /* IL_1E9 */ 
            throw $S06().Construct((node.get_NodeType()).toString());

            break $labelgroup0;
        }
      }
    }
    this.Compile(node.get_Left());
    this.Compile(node.get_Right());
    this.EmitCall(node.get_Method());
  };

  function LightCompiler_CompileBlockEnd (locals) {

    for (var i = 0; i < (locals.length | 0); i = ((i + 1) | 0)) {
      var local = locals[i];
      (this._locals).UndefineLocal(local, (this._instructions).get_Count());
    }
  };

  function LightCompiler_CompileBlockExpression (expr, asVoid) {
    var node = $T1A().$Cast(expr);
    var end = this.CompileBlockStart(node);
    var lastExpression = (node.get_Expressions()).get_Item(((((node.get_Expressions()).get_Count() | 0) - 1) | 0));
    this.Compile(lastExpression, asVoid);
    this.CompileBlockEnd(end);
  };

  function LightCompiler_CompileBlockStart (node) {
    var $temp00;
    var start = ((this._instructions).get_Count() | 0);
    var variables = node.get_Variables();
    if ((variables.get_Count() | 0) !== 0) {
      var locals = JSIL.Array.New($T00(), variables.get_Count());
      var localCnt = 0;
      var enumerator = variables.GetEnumerator();
      try {

        while ($IM00().Call(enumerator, null)) {
          var variable = $IM01().Call(enumerator, null);
          var local = (this._locals).DefineLocal(variable, start);
          locals[($temp00 = localCnt, 
            localCnt = ((localCnt + 1) | 0), 
            $temp00)] = local;
          (this._instructions).EmitInitializeLocal(
            local.get_Index(), 
            variable.get_Type()
          );
        }
      } finally {
        if (enumerator !== null) {
          $IM02().Call(enumerator, null);
        }
      }
    } else {
      locals = $thisType.EmptyLocals;
    }

    for (var i = 0; i < ((((node.get_Expressions()).get_Count() | 0) - 1) | 0); i = ((i + 1) | 0)) {
      this.CompileAsVoid((node.get_Expressions()).get_Item(i));
    }
    return locals;
  };

  function LightCompiler_CompileCoalesceBinaryExpression (expr) {
    var node = $T16().$Cast(expr);
    if ($T24().IsNullableType((node.get_Left()).get_Type())) {
      throw $S07().Construct();
    }
    if (node.get_Conversion() !== null) {
      throw $S07().Construct();
    }
    var leftNotNull = (this._instructions).MakeLabel();
    this.Compile(node.get_Left());
    (this._instructions).EmitCoalescingBranch(leftNotNull);
    (this._instructions).EmitPop();
    this.Compile(node.get_Right());
    (this._instructions).MarkLabel(leftNotNull);
  };

  function LightCompiler_CompileComparison (nodeType, left, right, liftedResult) {
    this.Compile(left);
    this.Compile(right);
    switch (nodeType.valueOf()) {
      case 15: 
        (this._instructions).EmitGreaterThan(left.get_Type(), liftedResult);
        return;

      case 16: 
        (this._instructions).EmitGreaterThanOrEqual(left.get_Type(), liftedResult);
        return;

      case 20: 
        (this._instructions).EmitLessThan(left.get_Type(), liftedResult);
        return;

      case 21: 
        (this._instructions).EmitLessThanOrEqual(left.get_Type(), liftedResult);
        return;

    }
    throw $T15().get_Unreachable();
  };

  function LightCompiler_CompileConditionalExpression (expr, asVoid) {
    var node = $T26().$Cast(expr);
    this.Compile(node.get_Test());
    if (node.get_IfTrue() === $T0D().Empty()) {
      var endOfFalse = (this._instructions).MakeLabel();
      (this._instructions).EmitBranchTrue(endOfFalse);
      this.Compile(node.get_IfFalse(), asVoid);
      (this._instructions).MarkLabel(endOfFalse);
    } else {
      var endOfTrue = (this._instructions).MakeLabel();
      (this._instructions).EmitBranchFalse(endOfTrue);
      this.Compile(node.get_IfTrue(), asVoid);
      if (node.get_IfFalse() !== $T0D().Empty()) {
        endOfFalse = (this._instructions).MakeLabel();
        (this._instructions).EmitBranch(endOfFalse, false, !asVoid);
        (this._instructions).MarkLabel(endOfTrue);
        this.Compile(node.get_IfFalse(), asVoid);
        (this._instructions).MarkLabel(endOfFalse);
      } else {
        (this._instructions).MarkLabel(endOfTrue);
      }
    }
  };

  function LightCompiler_CompileConstantExpression (expr) {
    var node = $T12().$Cast(expr);
    (this._instructions).EmitLoad(
      node.get_Value(), 
      node.get_Type()
    );
  };

  function LightCompiler_CompileConvertToType (typeFrom, typeTo, isChecked) {
    if (!$T24().AreEquivalent(typeTo, typeFrom)) {
      if ($T24().IsNullableType(typeTo)) {
        typeFrom = $T24().GetNonNullableType(typeFrom);
        typeTo = $T24().GetNonNullableType(typeTo);
        var nullValue = (this._instructions).MakeLabel();
        var end = (this._instructions).MakeLabel();
        (this._instructions).EmitDup();
        (this._instructions).EmitBranchNull(nullValue);
        this.CompileConvertToType(typeFrom, typeTo, isChecked);
        (this._instructions).EmitWrap(typeTo);
        (this._instructions).MarkLabel(nullValue);
      } else if ($T24().IsNullableType(typeFrom)) {
        if (!typeTo.get_IsClass()) {
          throw $S07().Construct();
        }
      } else {
        var from = $T28().GetTypeCode(typeFrom);
        var to = $T28().GetTypeCode(typeTo);
        if (!(!$S08().CallStatic($T24(), "IsNumeric", null, from) || !$S08().CallStatic($T24(), "IsNumeric", null, to))) {
          if (isChecked) {
            (this._instructions).EmitNumericConvertChecked(from, to);
          } else {
            (this._instructions).EmitNumericConvertUnchecked(from, to);
          }
        }
      }
    }
  };

  function LightCompiler_CompileConvertUnaryExpression (expr) {
    var node = $T29().$Cast(expr);
    if ($T1D().op_Inequality(node.get_Method(), null)) {
      this.Compile(node.get_Operand());
      if (node.get_IsLifted()) {
        throw $S07().Construct();
      }
      if ($T1D().op_Inequality(node.get_Method(), $T2A().Int32ToObjectMethod)) {
        this.EmitCall(node.get_Method());
      }
    } else if ($T0B().op_Equality(node.get_Type(), $T19().__Type__)) {
      this.CompileAsVoid(node.get_Operand());
    } else {
      this.Compile(node.get_Operand());
      this.CompileConvertToType(
        (node.get_Operand()).get_Type(), 
        node.get_Type(), 
        node.get_NodeType() === $T14().ConvertChecked
      );
    }
  };

  function LightCompiler_CompileDebugInfoExpression (expr) {
    var node = $T2B().$Cast(expr);
    var start = ((this._instructions).get_Count() | 0);
    var info = (new ($T2C())()).__Initialize__({
        Index: start, 
        FileName: (node.get_Document()).get_FileName(), 
        StartLine: node.get_StartLine(), 
        EndLine: node.get_EndLine(), 
        IsClear: node.get_IsClear()}
    );
    (this._debugInfos).Add(info);
  };

  function LightCompiler_CompileDefaultExpression$04 (expr) {
    $S09().CallVirtual("CompileDefaultExpression", null, this, expr.get_Type());
  };

  function LightCompiler_CompileDefaultExpression$05 (type) {
    if ($T0B().op_Inequality(type, $T19().__Type__)) {
      if ($T28().IsValueType(type)) {
        var value = $T2A().GetPrimitiveDefaultValue(type);
        if (value !== null) {
          $S0A().CallVirtual("EmitLoad", null, this._instructions, value);
        } else {
          (this._instructions).EmitDefaultValue(type);
        }
      } else {
        $S0A().CallVirtual("EmitLoad", null, this._instructions, null);
      }
    }
  };

  function LightCompiler_CompileEqual (left, right, liftedResult) {
    this.Compile(left);
    this.Compile(right);
    (this._instructions).EmitEqual(left.get_Type(), liftedResult);
  };

  function LightCompiler_CompileExtensionExpression (expr) {
    var instructionProvider = $T2E().$As(expr);
    if (instructionProvider !== null) {
      $IM03().Call(instructionProvider, null, this);
    } else {
      if (!expr.get_CanReduce()) {
        throw $S07().Construct();
      }
      this.Compile(expr.Reduce());
    }
  };

  function LightCompiler_CompileGetBoxedVariable (variable) {
    var local = this.ResolveLocal(variable);
    if (local.get_InClosure()) {
      (this._instructions).EmitLoadLocalFromClosureBoxed(local.Index);
    } else {
      (this._instructions).EmitLoadLocal(local.Index);
    }
  };

  function LightCompiler_CompileGetVariable (variable) {
    var local = this.ResolveLocal(variable);
    if (local.get_InClosure()) {
      (this._instructions).EmitLoadLocalFromClosure(local.Index);
    } else if (local.get_IsBoxed()) {
      (this._instructions).EmitLoadLocalBoxed(local.Index);
    } else {
      (this._instructions).EmitLoadLocal(local.Index);
    }
  };

  function LightCompiler_CompileGotoExpression (expr) {
    var node = $T30().$Cast(expr);
    var labelInfo = this.ReferenceLabel(node.get_Target());
    if (node.get_Value() !== null) {
      this.Compile(node.get_Value());
    }
    (this._instructions).EmitGoto(
      labelInfo.GetLabel(this), 
      $T0B().op_Inequality(node.get_Type(), $T19().__Type__), 
      (node.get_Value() !== null) && $T0B().op_Inequality((node.get_Value()).get_Type(), $T19().__Type__)
    );
  };

  function LightCompiler_CompileIndexAssignment (node, asVoid) {
    var index = $T32().$Cast(node.get_Left());
    if (!asVoid) {
      throw $S07().Construct();
    }
    if (index.get_Object() !== null) {
      this.Compile(index.get_Object());
    }
    var enumerator = (index.get_Arguments()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var arg = $IM04().Call(enumerator, null);
        this.Compile(arg);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    this.Compile(node.get_Right());
    if ($T34().op_Inequality(index.get_Indexer(), null)) {
      this.EmitCall((index.get_Indexer()).GetSetMethod(true));
    } else if (((index.get_Arguments()).get_Count() | 0) !== 1) {
      this.EmitCall($S0B().CallVirtual("GetMethod", null, (index.get_Object()).get_Type(), "Set", $T35().$Flags("Instance", "Public")));
    } else {
      (this._instructions).EmitSetArrayItem((index.get_Object()).get_Type());
    }
  };

  function LightCompiler_CompileIndexExpression (expr) {
    var index = $T32().$Cast(expr);
    if (index.get_Object() !== null) {
      this.Compile(index.get_Object());
    }
    var enumerator = (index.get_Arguments()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var arg = $IM04().Call(enumerator, null);
        this.Compile(arg);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    if ($T34().op_Inequality(index.get_Indexer(), null)) {
      this.EmitCall((index.get_Indexer()).GetGetMethod(true));
    } else if (((index.get_Arguments()).get_Count() | 0) !== 1) {
      this.EmitCall($S0B().CallVirtual("GetMethod", null, (index.get_Object()).get_Type(), "Get", $T35().$Flags("Instance", "Public")));
    } else {
      (this._instructions).EmitGetArrayItem((index.get_Object()).get_Type());
    }
  };

  function LightCompiler_CompileInvocationExpression (expr) {
    var node = $T36().$Cast(expr);
    if ($S0C().CallVirtual("IsAssignableFrom", null, $T37().__Type__, (node.get_Expression()).get_Type())) {
      throw $S07().Construct();
    }
    this.CompileMethodCallExpression($S0D().CallStatic($T0C(), "Call", null, 
        node.get_Expression(), 
        ((node.get_Expression()).get_Type()).GetMethod("Invoke"), 
        node.get_Arguments()
      ));
  };

  function LightCompiler_CompileLabelExpression (expr) {
    var node = $T38().$Cast(expr);
    var label = new JSIL.BoxedVariable(null);
    if (this._labelBlock.Kind === $T07().Block) {
      (this._labelBlock).TryGetLabelInfo(node.get_Target(), /* ref */ label);
      if (!((label.get() !== null) || (this._labelBlock.Parent.Kind !== $T07().Switch))) {
        (this._labelBlock.Parent).TryGetLabelInfo(node.get_Target(), /* ref */ label);
      }
    }
    if (label.get() === null) {
      label.set(this.DefineLabel(node.get_Target()));
    }
    if (node.get_DefaultValue() !== null) {
      if ($T0B().op_Equality((node.get_Target()).get_Type(), $T19().__Type__)) {
        this.CompileAsVoid(node.get_DefaultValue());
      } else {
        this.Compile(node.get_DefaultValue());
      }
    }
    (this._instructions).MarkLabel((label.get()).GetLabel(this));
  };

  function LightCompiler_CompileLambdaExpression (expr) {
    var node = $T37().$Cast(expr);
    var compiler = $S0E().Construct(this);
    var creator = $S0F().CallVirtual("CompileTop", null, compiler, node);
    if ((compiler._locals).get_ClosureVariables() !== null) {
      var enumerator = (((compiler._locals).get_ClosureVariables()).get_Keys()).GetEnumerator();

      while ($T3B().prototype.MoveNext.call(enumerator)) {
        var variable = $T3B().prototype.get_Current.call(enumerator);
        this.CompileGetBoxedVariable(variable);
      }
    }
    (this._instructions).EmitCreateDelegate(creator);
  };

  function LightCompiler_CompileListInitExpression (expr) {
    throw $S07().Construct();
  };

  function LightCompiler_CompileLogical (nodeType, left, right, lifted) {
    this.Compile(left);
    this.Compile(right);
    if (nodeType !== $T14().And) {
      if (nodeType !== $T14().ExclusiveOr) {
        if (nodeType !== $T14().Or) {
          throw $T15().get_Unreachable();
        }
        (this._instructions).EmitOr($T24().GetNonNullableType(left.get_Type()), lifted);
      } else {
        (this._instructions).EmitExclusiveOr($T24().GetNonNullableType(left.get_Type()), lifted);
      }
    } else {
      (this._instructions).EmitAnd($T24().GetNonNullableType(left.get_Type()), lifted);
    }
  };

  function LightCompiler_CompileLogicalBinaryExpression (expr, andAlso) {
    var node = $T16().$Cast(expr);
    if ($T1D().op_Inequality(node.get_Method(), null)) {
      throw $S07().Construct();
    }
    if ($T0B().op_Equality((node.get_Left()).get_Type(), $T13().__Type__)) {
      var elseLabel = (this._instructions).MakeLabel();
      var endLabel = (this._instructions).MakeLabel();
      this.Compile(node.get_Left());
      if (andAlso) {
        (this._instructions).EmitBranchFalse(elseLabel);
      } else {
        (this._instructions).EmitBranchTrue(elseLabel);
      }
      this.Compile(node.get_Right());
      (this._instructions).EmitBranch(endLabel, false, true);
      (this._instructions).MarkLabel(elseLabel);
      $S10().CallVirtual("EmitLoad", null, this._instructions, !andAlso);
      (this._instructions).MarkLabel(endLabel);
      return;
    }
    throw $S07().Construct();
  };

  function LightCompiler_CompileLoopExpression (expr) {
    var node = $T3E().$Cast(expr);
    var enterLoop = new ($T3F())(node, this._locals, this._compilationThreshold, (this._instructions).get_Count());
    this.PushLabelBlock($T07().Statement);
    var breakLabel = this.DefineLabel(node.get_BreakLabel());
    var continueLabel = this.DefineLabel(node.get_ContinueLabel());
    (this._instructions).MarkLabel(continueLabel.GetLabel(this));
    (this._instructions).Emit(enterLoop);
    this.CompileAsVoid(node.get_Body());
    (this._instructions).EmitBranch(
      continueLabel.GetLabel(this), 
      $T0B().op_Inequality(expr.get_Type(), $T19().__Type__), 
      false
    );
    (this._instructions).MarkLabel(breakLabel.GetLabel(this));
    this.PopLabelBlock($T07().Statement);
    enterLoop.FinishLoop((this._instructions).get_Count());
  };

  function LightCompiler_CompileMemberAssignment (node, asVoid) {
    var member = $T40().$Cast(node.get_Left());
    var pi = $T34().$As(member.get_Member());
    if ($T34().op_Inequality(pi, null)) {
      var method = pi.GetSetMethod(true);
      this.Compile(member.get_Expression());
      this.Compile(node.get_Right());
      var start = ((this._instructions).get_Count() | 0);
      if (!asVoid) {
        var local = (this._locals).DefineLocal($T0C().Parameter((node.get_Right()).get_Type()), start);
        (this._instructions).EmitAssignLocal(local.get_Index());
        this.EmitCall(method);
        (this._instructions).EmitLoadLocal(local.get_Index());
        (this._locals).UndefineLocal(local, (this._instructions).get_Count());
      } else {
        this.EmitCall(method);
      }
    } else {
      var fi = $T41().$As(member.get_Member());
      if (!$T41().op_Inequality(fi, null)) {
        throw $S07().Construct();
      }
      if (member.get_Expression() !== null) {
        this.Compile(member.get_Expression());
      }
      this.Compile(node.get_Right());
      start = ((this._instructions).get_Count() | 0);
      if (!asVoid) {
        local = (this._locals).DefineLocal($T0C().Parameter((node.get_Right()).get_Type()), start);
        (this._instructions).EmitAssignLocal(local.get_Index());
        (this._instructions).EmitStoreField(fi);
        (this._instructions).EmitLoadLocal(local.get_Index());
        (this._locals).UndefineLocal(local, (this._instructions).get_Count());
      } else {
        (this._instructions).EmitStoreField(fi);
      }
    }
  };

  function LightCompiler_CompileMemberExpression (expr) {
    var node = $T40().$Cast(expr);
    var member = node.get_Member();
    var fi = $T41().$As(member);
    if ($T41().op_Inequality(fi, null)) {
      if (fi.get_IsLiteral()) {
        (this._instructions).EmitLoad(
          fi.GetRawConstantValue(), 
          fi.get_FieldType()
        );
      } else if (fi.get_IsStatic()) {
        if (fi.get_IsInitOnly()) {
          (this._instructions).EmitLoad(
            $S11().CallVirtual("GetValue", null, fi, null), 
            fi.get_FieldType()
          );
        } else {
          (this._instructions).EmitLoadField(fi);
        }
      } else {
        this.Compile(node.get_Expression());
        (this._instructions).EmitLoadField(fi);
      }
    } else {
      var pi = $T34().$As(member);
      if (!$T34().op_Inequality(pi, null)) {
        throw $S07().Construct();
      }
      var method = pi.GetGetMethod(true);
      if (node.get_Expression() !== null) {
        this.Compile(node.get_Expression());
      }
      this.EmitCall(method);
    }
  };

  function LightCompiler_CompileMemberInitExpression (expr) {
    throw $S07().Construct();
  };

  function LightCompiler_CompileMethodCallExpression (expr) {
    var node = $T43().$Cast(expr);
    var parameters = (node.get_Method()).GetParameters();
    if (!($T46().TrueForAll$b1($T0A())($T47().$Cast(parameters), $T48().New($thisType, $thisType.$lCompileMethodCallExpression$gb__4, function () { return JSIL.GetMethodInfo($thisType, "$lCompileMethodCallExpression$gb__4", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Reflection.ParameterInfo]), true); })) && ((node.get_Method()).get_IsStatic() || 
          !$T28().IsValueType((node.get_Method()).get_DeclaringType()) || 
          $T28().IsPrimitive((node.get_Method()).get_DeclaringType())))) {
      throw $S06().Construct("Interpreter of ref types");
    }
    if (!(node.get_Method()).get_IsStatic()) {
      this.Compile(node.get_Object());
    }
    var enumerator = (node.get_Arguments()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var arg = $IM04().Call(enumerator, null);
        this.Compile(arg);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    this.EmitCall(node.get_Method(), parameters);
  };

  function LightCompiler_CompileNegateExpression (node, checked, lifted) {
    this.Compile(node.get_Operand());
    (this._instructions).EmitNegate($T24().GetNonNullableType(node.get_Type()), checked, lifted);
  };

  function LightCompiler_CompileNewArrayExpression (expr) {
    var node = $T49().$Cast(expr);
    var enumerator = (node.get_Expressions()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var arg = $IM04().Call(enumerator, null);
        this.Compile(arg);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    var elementType = (node.get_Type()).GetElementType();
    var rank = ((node.get_Expressions()).get_Count() | 0);
    if (node.get_NodeType() === $T14().NewArrayInit) {
      (this._instructions).EmitNewArrayInit(elementType, rank);
    } else {
      if (node.get_NodeType() !== $T14().NewArrayBounds) {
        throw $S07().Construct();
      }
      if (rank === 1) {
        (this._instructions).EmitNewArray(elementType);
      } else {
        (this._instructions).EmitNewArrayBounds(elementType, rank);
      }
    }
  };

  function LightCompiler_CompileNewExpression (expr) {
    var node = $T4A().$Cast(expr);
    if ($T4B().op_Inequality(node.get_Constructor(), null)) {
      var parameters = (node.get_Constructor()).GetParameters();
      if (!$T46().TrueForAll$b1($T0A())($T47().$Cast(parameters), $T48().New($thisType, $thisType.$lCompileNewExpression$gb__8, function () { return JSIL.GetMethodInfo($thisType, "$lCompileNewExpression$gb__8", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Reflection.ParameterInfo]), true); }))) {
        this._forceCompile = true;
      }
    }
    if ($T4B().op_Inequality(node.get_Constructor(), null)) {
      var enumerator = (node.get_Arguments()).GetEnumerator();
      try {

        while ($IM00().Call(enumerator, null)) {
          var arg = $IM04().Call(enumerator, null);
          this.Compile(arg);
        }
      } finally {
        if (enumerator !== null) {
          $IM02().Call(enumerator, null);
        }
      }
      (this._instructions).EmitNew(node.get_Constructor());
    } else {
      (this._instructions).EmitDefaultValue(node.get_Type());
    }
  };

  function LightCompiler_CompileNoLabelPush (expr) {
    var startingStackDepth = ((this._instructions).get_CurrentStackDepth() | 0);
    switch ((expr.get_NodeType()).valueOf()) {
      case 0: 
        this.CompileBinaryExpression(expr);
        return;

      case 1: 
        this.CompileBinaryExpression(expr);
        return;

      case 2: 
        this.CompileBinaryExpression(expr);
        return;

      case 3: 
        this.CompileAndAlsoBinaryExpression(expr);
        return;

      case 4: 
        this.CompileUnaryExpression(expr);
        return;

      case 5: 
        this.CompileBinaryExpression(expr);
        return;

      case 6: 
        this.CompileMethodCallExpression(expr);
        return;

      case 7: 
        this.CompileCoalesceBinaryExpression(expr);
        return;

      case 8: 
        this.CompileConditionalExpression(expr, $T0B().op_Equality(expr.get_Type(), $T19().__Type__));
        return;

      case 9: 
        this.CompileConstantExpression(expr);
        return;

      case 10: 
        this.CompileConvertUnaryExpression(expr);
        return;

      case 11: 
        this.CompileConvertUnaryExpression(expr);
        return;

      case 12: 
        this.CompileBinaryExpression(expr);
        return;

      case 13: 
        this.CompileBinaryExpression(expr);
        return;

      case 14: 
        this.CompileBinaryExpression(expr);
        return;

      case 15: 
        this.CompileBinaryExpression(expr);
        return;

      case 16: 
        this.CompileBinaryExpression(expr);
        return;

      case 17: 
        this.CompileInvocationExpression(expr);
        return;

      case 18: 
        this.CompileLambdaExpression(expr);
        return;

      case 19: 
        this.CompileBinaryExpression(expr);
        return;

      case 20: 
        this.CompileBinaryExpression(expr);
        return;

      case 21: 
        this.CompileBinaryExpression(expr);
        return;

      case 22: 
        this.CompileListInitExpression(expr);
        return;

      case 23: 
        this.CompileMemberExpression(expr);
        return;

      case 24: 
        this.CompileMemberInitExpression(expr);
        return;

      case 25: 
        this.CompileBinaryExpression(expr);
        return;

      case 26: 
        this.CompileBinaryExpression(expr);
        return;

      case 27: 
        this.CompileBinaryExpression(expr);
        return;

      case 28: 
        this.CompileUnaryExpression(expr);
        return;

      case 29: 
        this.CompileUnaryExpression(expr);
        return;

      case 30: 
        this.CompileUnaryExpression(expr);
        return;

      case 31: 
        this.CompileNewExpression(expr);
        return;

      case 32: 
        this.CompileNewArrayExpression(expr);
        return;

      case 33: 
        this.CompileNewArrayExpression(expr);
        return;

      case 34: 
        this.CompileUnaryExpression(expr);
        return;

      case 35: 
        this.CompileBinaryExpression(expr);
        return;

      case 36: 
        this.CompileBinaryExpression(expr);
        return;

      case 37: 
        this.CompileOrElseBinaryExpression(expr);
        return;

      case 38: 
        this.CompileParameterExpression(expr);
        return;

      case 39: 
        this.CompileBinaryExpression(expr);
        return;

      case 40: 
        this.CompileQuoteUnaryExpression(expr);
        return;

      case 41: 
        this.CompileBinaryExpression(expr);
        return;

      case 42: 
        this.CompileBinaryExpression(expr);
        return;

      case 43: 
        this.CompileBinaryExpression(expr);
        return;

      case 44: 
        this.CompileUnaryExpression(expr);
        return;

      case 45: 
        this.CompileTypeIsExpression(expr);
        return;

      case 46: 
        this.CompileAssignBinaryExpression(expr, $T0B().op_Equality(expr.get_Type(), $T19().__Type__));
        return;

      case 47: 
        this.CompileBlockExpression(expr, $T0B().op_Equality(expr.get_Type(), $T19().__Type__));
        return;

      case 48: 
        this.CompileDebugInfoExpression(expr);
        return;

      case 49: 
        this.CompileUnaryExpression(expr);
        return;

      case 51: 
        $S12().CallVirtual("CompileDefaultExpression", null, this, expr);
        return;

      case 52: 
        this.CompileExtensionExpression(expr);
        return;

      case 53: 
        this.CompileGotoExpression(expr);
        return;

      case 54: 
        this.CompileUnaryExpression(expr);
        return;

      case 55: 
        this.CompileIndexExpression(expr);
        return;

      case 56: 
        this.CompileLabelExpression(expr);
        return;

      case 57: 
        this.CompileRuntimeVariablesExpression(expr);
        return;

      case 58: 
        this.CompileLoopExpression(expr);
        return;

      case 59: 
        this.CompileSwitchExpression(expr);
        return;

      case 60: 
        this.CompileThrowUnaryExpression(expr, $T0B().op_Equality(expr.get_Type(), $T19().__Type__));
        return;

      case 61: 
        this.CompileTryExpression(expr);
        return;

      case 62: 
        this.CompileUnboxUnaryExpression(expr);
        return;

      case 63: 
      case 64: 
      case 65: 
      case 66: 
      case 67: 
      case 68: 
      case 69: 
      case 70: 
      case 71: 
      case 72: 
      case 73: 
      case 74: 
      case 75: 
      case 76: 
      case 77: 
      case 78: 
      case 79: 
      case 80: 
        this.CompileReducibleExpression(expr);
        return;

      case 81: 
        this.CompileTypeEqualExpression(expr);
        return;

      case 82: 
        this.CompileUnaryExpression(expr);
        return;

      case 83: 
        this.CompileUnaryExpression(expr);
        return;

      case 84: 
        this.CompileUnaryExpression(expr);
        return;

    }
    throw $T15().get_Unreachable();
  };

  function LightCompiler_CompileNotEqual (left, right, liftedResult) {
    this.Compile(left);
    this.Compile(right);
    (this._instructions).EmitNotEqual(left.get_Type(), liftedResult);
  };

  function LightCompiler_CompileNotExpression (node, lifted) {
    this.Compile(node.get_Operand());
    (this._instructions).EmitNot($T24().GetNonNullableType(node.get_Type()), lifted);
  };

  function LightCompiler_CompileOrElseBinaryExpression (expr) {
    this.CompileLogicalBinaryExpression(expr, false);
  };

  function LightCompiler_CompileParameterExpression (expr) {
    var node = $T22().$Cast(expr);
    this.CompileGetVariable(node);
  };

  function LightCompiler_CompileQuotedLambdaExpression (expr) {
    (this._instructions).EmitStore(expr);
  };

  function LightCompiler_CompileQuoteUnaryExpression (expr) {
    var qe = $T29().$Cast(expr);
    this.CompileQuotedLambdaExpression(qe.get_Operand());
  };

  function LightCompiler_CompileReducibleExpression (expr) {
    var nodeType = expr.get_NodeType();
    if (nodeType !== $T14().PreIncrementAssign) {
      throw $T15().get_Unreachable();
    }
    (this._instructions).EmitIncrement(expr.get_Type());
  };

  function LightCompiler_CompileRuntimeVariablesExpression (expr) {
    var node = $T4C().$Cast(expr);
    var enumerator = (node.get_Variables()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var variable = $IM01().Call(enumerator, null);
        this.EnsureAvailableForClosure(variable);
        this.CompileGetBoxedVariable(variable);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    (this._instructions).EmitNewRuntimeVariables((node.get_Variables()).get_Count());
  };

  function LightCompiler_CompileSetVariable (variable, isVoid) {
    var local = this.ResolveLocal(variable);
    if (local.get_InClosure()) {
      if (isVoid) {
        (this._instructions).EmitStoreLocalToClosure(local.Index);
      } else {
        (this._instructions).EmitAssignLocalToClosure(local.Index);
      }
    } else if (local.get_IsBoxed()) {
      if (isVoid) {
        (this._instructions).EmitStoreLocalBoxed(local.Index);
      } else {
        (this._instructions).EmitAssignLocalBoxed(local.Index);
      }
    } else if (isVoid) {
      (this._instructions).EmitStoreLocal(local.Index);
    } else {
      (this._instructions).EmitAssignLocal(local.Index);
    }
  };

  function LightCompiler_CompileShift (nodeType, left, right, lifted) {
    this.Compile(left);
    this.Compile(right);
    if (nodeType !== $T14().LeftShift) {
      if (nodeType !== $T14().RightShift) {
        throw $T15().get_Unreachable();
      }
      (this._instructions).EmitShr($T24().GetNonNullableType(left.get_Type()), lifted);
    } else {
      (this._instructions).EmitShl($T24().GetNonNullableType(left.get_Type()), lifted);
    }
  };

  function LightCompiler_CompileSwitchExpression (expr) {
    var node = $T4D().$Cast(expr);
    if (!(!$T0B().op_Inequality((node.get_SwitchValue()).get_Type(), $T01().__Type__) && !$T1D().op_Inequality(node.get_Comparison(), null))) {
      throw $S07().Construct();
    }
    if (!$T10().All$b1($T0F())(
        node.get_Cases(), 
        $T4E().New($thisType, $thisType.$lCompileSwitchExpression$gb__0, function () { return JSIL.GetMethodInfo($thisType, "$lCompileSwitchExpression$gb__0", new JSIL.MethodSignature($asm01.System.Boolean, [$asm04.System.Linq.Expressions.SwitchCase]), true); })
      )) {
      throw $S07().Construct();
    }
    var end = this.DefineLabel(null);
    var hasValue = $T0B().op_Inequality(node.get_Type(), $T19().__Type__);
    this.Compile(node.get_SwitchValue());
    var caseDict = $S13().Construct();
    var switchIndex = ((this._instructions).get_Count() | 0);
    (this._instructions).EmitSwitch(caseDict);
    if (node.get_DefaultBody() !== null) {
      this.Compile(node.get_DefaultBody());
    }
    (this._instructions).EmitBranch(end.GetLabel(this), false, hasValue);

    for (var i = 0; i < ((node.get_Cases()).get_Count() | 0); i = ((i + 1) | 0)) {
      var switchCase = (node.get_Cases()).get_Item(i);
      var caseOffset = ((((this._instructions).get_Count() | 0) - switchIndex) | 0);
      var enumerator = (switchCase.get_TestValues()).GetEnumerator();
      try {

        while ($IM00().Call(enumerator, null)) {
          var testValue = $T12().$Cast($IM04().Call(enumerator, null));
          caseDict.set_Item($T01().$Cast(testValue.get_Value()), caseOffset);
        }
      } finally {
        if (enumerator !== null) {
          $IM02().Call(enumerator, null);
        }
      }
      this.Compile(switchCase.get_Body());
      if (i < ((((node.get_Cases()).get_Count() | 0) - 1) | 0)) {
        (this._instructions).EmitBranch(end.GetLabel(this), false, hasValue);
      }
    }
    (this._instructions).MarkLabel(end.GetLabel(this));
  };

  function LightCompiler_CompileThrowUnaryExpression (expr, asVoid) {
    var node = $T29().$Cast(expr);
    if (node.get_Operand() === null) {
      this.CompileParameterExpression($T08().prototype.Peek.call(this._exceptionForRethrowStack));
      if (asVoid) {
        (this._instructions).EmitRethrowVoid();
      } else {
        (this._instructions).EmitRethrow();
      }
    } else {
      this.Compile(node.get_Operand());
      if (asVoid) {
        (this._instructions).EmitThrowVoid();
      } else {
        (this._instructions).EmitThrow();
      }
    }
  };

  function LightCompiler_CompileTop$06 (node) {
    var enumerator = (node.get_Parameters()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var p = $IM01().Call(enumerator, null);
        var local = (this._locals).DefineLocal(p, 0);
        (this._instructions).EmitInitializeParameter(local.get_Index());
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    this.Compile(node.get_Body());
    if (!(!$T0B().op_Inequality((node.get_Body()).get_Type(), $T19().__Type__) || !$T0B().op_Equality(node.get_ReturnType(), $T19().__Type__))) {
      (this._instructions).EmitPop();
    }
    return $S14().Construct(this.MakeInterpreter(node.get_Name()), node);
  };

  function LightCompiler_CompileTop$07 (node) {
    var enumerator = $IM05().Call(node.get_Parameters(), null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var p = $IM01().Call(enumerator, null);
        var local = (this._locals).DefineLocal(p, 0);
        (this._instructions).EmitInitializeParameter(local.get_Index());
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    this.Compile(node.get_Body());
    if (!(!$T0B().op_Inequality((node.get_Body()).get_Type(), $T19().__Type__) || !$T0B().op_Equality(node.get_ReturnType(), $T19().__Type__))) {
      (this._instructions).EmitPop();
    }
    return $S15().Construct(this.MakeInterpreter(node.get_Name()), node);
  };

  function LightCompiler_CompileTryExpression (expr) {
    var node = $T53().$Cast(expr);
    var end = (this._instructions).MakeLabel();
    var gotoEnd = (this._instructions).MakeLabel();
    var tryStart = ((this._instructions).get_Count() | 0);
    var startOfFinally = null;
    if (node.get_Finally() !== null) {
      startOfFinally = (this._instructions).MakeLabel();
      (this._instructions).EmitEnterTryFinally(startOfFinally);
    }
    this.PushLabelBlock($T07().Try);
    this.Compile(node.get_Body());
    var hasValue = $T0B().op_Inequality((node.get_Body()).get_Type(), $T19().__Type__);
    var tryEnd = ((this._instructions).get_Count() | 0);
    (this._instructions).MarkLabel(gotoEnd);
    (this._instructions).EmitGoto(end, hasValue, hasValue);
    if (((node.get_Handlers()).get_Count() | 0) > 0) {
      if (!((node.get_Finally() !== null) || (((node.get_Handlers()).get_Count() | 0) !== 1))) {
        var handler = (node.get_Handlers()).get_Item(0);
        if (!((handler.get_Filter() !== null) || 
            !$T0B().op_Equality(handler.get_Test(), $T56().__Type__) || (handler.get_Variable() !== null))) {
          if (this.EndsWithRethrow(handler.get_Body())) {
            if (hasValue) {
              (this._instructions).EmitEnterExceptionHandlerNonVoid();
            } else {
              (this._instructions).EmitEnterExceptionHandlerVoid();
            }
            var handlerLabel = ((this._instructions).MarkRuntimeLabel() | 0);
            var handlerStart = ((this._instructions).get_Count() | 0);
            this.CompileAsVoidRemoveRethrow(handler.get_Body());
            (this._instructions).EmitLeaveFault(hasValue);
            (this._instructions).MarkLabel(end);
            (this._handlers).Add(new ($T57())(tryStart, tryEnd, handlerLabel, handlerStart, null));
            this.PopLabelBlock($T07().Try);
            return;
          }
        }
      }
      var enumerator = (node.get_Handlers()).GetEnumerator();
      try {

        while ($IM00().Call(enumerator, null)) {
          handler = $IM06().Call(enumerator, null);
          this.PushLabelBlock($T07().Catch);
          if (handler.get_Filter() !== null) {
            throw $S07().Construct();
          }
          var parameter = JSIL.Coalesce(handler.get_Variable(), $T0C().Parameter(handler.get_Test()));
          var local = (this._locals).DefineLocal(parameter, (this._instructions).get_Count());
          $T08().prototype.Push.call(this._exceptionForRethrowStack, parameter);
          if (hasValue) {
            (this._instructions).EmitEnterExceptionHandlerNonVoid();
          } else {
            (this._instructions).EmitEnterExceptionHandlerVoid();
          }
          handlerLabel = ((this._instructions).MarkRuntimeLabel() | 0);
          handlerStart = ((this._instructions).get_Count() | 0);
          this.CompileSetVariable(parameter, true);
          this.Compile(handler.get_Body());
          $T08().prototype.Pop.call(this._exceptionForRethrowStack);
          (this._instructions).EmitLeaveExceptionHandler(hasValue, gotoEnd);
          (this._handlers).Add(new ($T57())(tryStart, tryEnd, handlerLabel, handlerStart, handler.get_Test()));
          this.PopLabelBlock($T07().Catch);
          (this._locals).UndefineLocal(local, (this._instructions).get_Count());
        }
      } finally {
        if (enumerator !== null) {
          $IM02().Call(enumerator, null);
        }
      }
      if (node.get_Fault() !== null) {
        throw $S07().Construct();
      }
    }
    if (node.get_Finally() !== null) {
      this.PushLabelBlock($T07().Finally);
      (this._instructions).MarkLabel(startOfFinally);
      (this._instructions).EmitEnterFinally();
      this.CompileAsVoid(node.get_Finally());
      (this._instructions).EmitLeaveFinally();
      this.PopLabelBlock($T07().Finally);
    }
    (this._instructions).MarkLabel(end);
    this.PopLabelBlock($T07().Try);
  };

  function LightCompiler_CompileTypeAsExpression (node) {
    this.Compile(node.get_Operand());
    (this._instructions).EmitTypeAs(node.get_Type());
  };

  function LightCompiler_CompileTypeEqualExpression (expr) {
    var node = $T59().$Cast(expr);
    this.Compile(node.get_Expression());
    $S0A().CallVirtual("EmitLoad", null, this._instructions, node.get_TypeOperand());
    (this._instructions).EmitTypeEquals();
  };

  function LightCompiler_CompileTypeIsExpression (expr) {
    var node = $T59().$Cast(expr);
    this.Compile(node.get_Expression());
    if ($T0B().op_Equality((node.get_Expression()).get_Type(), $T19().__Type__)) {
      (this._instructions).Emit($T5B().Factory.DefaultValue());
    } else if ($T28().IsSealed(node.get_TypeOperand())) {
      $S0A().CallVirtual("EmitLoad", null, this._instructions, node.get_TypeOperand());
      (this._instructions).EmitTypeEquals();
    } else {
      (this._instructions).EmitTypeIs(node.get_TypeOperand());
    }
  };

  function LightCompiler_CompileUnaryExpression (expr) {
    var node = $T29().$Cast(expr);
    if ($T1D().op_Inequality(node.get_Method(), null)) {
      this.Compile(node.get_Operand());
      this.EmitCall(node.get_Method());
    } else {
      var nodeType = node.get_NodeType();
      if (nodeType !== $T14().ArrayLength) {
        switch (nodeType.valueOf()) {
          case 28: 
            this.CompileNegateExpression(node, false, node.get_IsLifted());
            return;

          case 29: 
            this.Compile(node.get_Operand());
            return;

          case 30: 
            this.CompileNegateExpression(node, true, node.get_IsLifted());
            return;

          case 31: 
          case 32: 
          case 33: 
            break;

          case 34: 
            this.CompileNotExpression(node, node.get_IsLifted());
            return;

          default: 
            if (nodeType === $T14().TypeAs) {
              this.CompileTypeAsExpression(node);
              return;
            }
            break;

        }
        throw $S06().Construct((node.get_NodeType()).toString());
      }
      this.Compile(node.get_Operand());
      (this._instructions).EmitGetArrayLength(node.get_Type());
    }
  };

  function LightCompiler_CompileUnboxUnaryExpression (expr) {
    var node = $T29().$Cast(expr);
    this.Compile(node.get_Operand());
  };

  function LightCompiler_CompileVariableAssignment (node, asVoid) {
    this.Compile(node.get_Right());
    var target = $T22().$Cast(node.get_Left());
    this.CompileSetVariable(target, asVoid);
  };

  function LightCompiler_DefineBlockLabels (node) {
    var block = $T1A().$As(node);
    if (block !== null) {
      var i = 0;
      var j = ((block.get_Expressions()).get_Count() | 0);

      while (i < j) {
        var e = (block.get_Expressions()).get_Item(i);
        var label = $T38().$As(e);
        if (label !== null) {
          this.DefineLabel(label.get_Target());
        }
        i = ((i + 1) | 0);
      }
    }
  };

  function LightCompiler_DefineLabel (node) {
    if (node === null) {
      var result2 = new ($T31())(null);
    } else {
      var result = this.EnsureLabel(node);
      result.Define(this._labelBlock);
      result2 = result;
    }
    return result2;
  };

  function LightCompiler_EmitCall$08 (method) {
    this.EmitCall(method, method.GetParameters());
  };

  function LightCompiler_EmitCall$09 (method, parameters, $exception) {
    try {
      var instruction = $T5D().Create(method, parameters);
    } catch ($exception) {
      if ($T5E().$Is($exception)) {
        this._forceCompile = true;
        (this._instructions).Emit(new ($T5F())(((((
                method.get_IsStatic()
                   ? 0
                   : 1)
               | 0) + (parameters.length | 0)) | 0)));
        if ($T0B().op_Inequality(method.get_ReturnType(), $T19().__Type__)) {
          $S0A().CallVirtual("EmitLoad", null, this._instructions, null);
        }
        return;
      } else {
        throw $exception;
      }
    }
    (this._instructions).Emit(instruction);
  };

  function LightCompiler_EndsWithRethrow (expr) {
    if (expr.get_NodeType() === $T14().Throw) {
      var node = $T29().$Cast(expr);
      var result = node.get_Operand() === null;
    } else {
      var block = $T1A().$As(expr);
      result = (block !== null) && 
      this.EndsWithRethrow((block.get_Expressions()).get_Item(((((block.get_Expressions()).get_Count() | 0) - 1) | 0)));
    }
    return result;
  };

  function LightCompiler_EnsureAvailableForClosure (expr) {
    var local = new JSIL.BoxedVariable(null);
    if ((this._locals).TryGetLocalOrClosure(expr, /* ref */ local)) {
      if (!((local.get()).get_InClosure() || (local.get()).get_IsBoxed())) {
        (this._locals).Box(expr, this._instructions);
      }
      var result = local.get();
    } else {
      if (this._parent === null) {
        throw $S05().Construct(JSIL.ConcatString("unbound variable: ", expr));
      }
      (this._parent).EnsureAvailableForClosure(expr);
      result = (this._locals).AddClosureVariable(expr);
    }
    return result;
  };

  function LightCompiler_EnsureLabel (node) {
    var result = new JSIL.BoxedVariable(null);
    if (!$T05().prototype.TryGetValue.call(this._treeLabels, node, /* ref */ result)) {
      result.set($T05().prototype.set_Item.call(this._treeLabels, node, new ($T31())(node)));
    }
    return result.get();
  };

  function LightCompiler_EnsureVariable (variable) {
    if (!(this._locals).ContainsVariable(variable)) {
      this.EnsureAvailableForClosure(variable);
    }
  };

  function LightCompiler_get_Instructions () {
    return this._instructions;
  };

  function LightCompiler_get_Locals () {
    return this._locals;
  };

  function LightCompiler_GetBranchLabel (target) {
    return (this.ReferenceLabel(target)).GetLabel(this);
  };

  function LightCompiler_GetBranchMapping () {
    var newLabelMapping = $S16().Construct((this._treeLabels).get_Count());
    var enumerator = $T05().prototype.GetEnumerator.call(this._treeLabels);
    try {

      while ($IM00().Call(enumerator, null)) {
        var kvp = $IM07().Call(enumerator, null).MemberwiseClone();
        $T60().prototype.set_Item.call(newLabelMapping, 
          kvp.get_Key(), 
          (kvp.get_Value()).GetLabel(this)
        );
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    return newLabelMapping;
  };

  function LightCompiler_MakeInterpreter (lambdaName) {
    if (this._forceCompile) {
      var result = null;
    } else {
      var handlers = $T03().prototype.ToArray.call(this._handlers);
      var debugInfos = $T04().prototype.ToArray.call(this._debugInfos);
      result = new ($T63())(lambdaName, this._locals, this.GetBranchMapping(), (this._instructions).ToArray(), handlers, debugInfos, this._compilationThreshold);
    }
    return result;
  };

  function LightCompiler_PopLabelBlock (kind) {
    this._labelBlock = this._labelBlock.Parent;
  };

  function LightCompiler_PushLabelBlock (type) {
    this._labelBlock = new ($T06())(this._labelBlock, type);
  };

  function LightCompiler_ReferenceLabel (node) {
    var result = this.EnsureLabel(node);
    result.Reference(this._labelBlock);
    return result;
  };

  function LightCompiler_ResolveLocal (variable) {
    var local = new JSIL.BoxedVariable(null);
    if (!(this._locals).TryGetLocalOrClosure(variable, /* ref */ local)) {
      local.set(this.EnsureAvailableForClosure(variable));
    }
    return local.get();
  };

  function LightCompiler_TryPushLabelBlock (node) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var nodeType = node.get_NodeType();
          switch (nodeType.valueOf()) {
            case 8: 
              $label0 = 1 /* goto IL_1D1 */ ;
              continue $labelgroup0;

            case 9: 
              break;

            case 10: 
              if (!$T0B().op_Inequality(node.get_Type(), $T19().__Type__)) {
                this.PushLabelBlock($T07().Statement);
                var result = true;
                return result;
              }
              break;

            default: 
              if (nodeType === $T14().Block) {
                this.PushLabelBlock($T07().Block);
                if (this._labelBlock.Parent.Kind !== $T07().Switch) {
                  this.DefineBlockLabels(node);
                }
                result = true;
                return result;
              }
              switch (nodeType.valueOf()) {
                case 53: 
                case 58: 
                  $label0 = 1 /* goto IL_1D1 */ ;
                  continue $labelgroup0;

                case 56: 
                  if (this._labelBlock.Kind === $T07().Block) {
                    var label = ($T38().$Cast(node)).get_Target();
                    if ((this._labelBlock).ContainsTarget(label)) {
                      result = false;
                      return result;
                    }
                    if (!((this._labelBlock.Parent.Kind !== $T07().Switch) || !(this._labelBlock.Parent).ContainsTarget(label))) {
                      result = false;
                      return result;
                    }
                  }
                  this.PushLabelBlock($T07().Statement);
                  result = true;
                  return result;

                case 59: 
                  this.PushLabelBlock($T07().Switch);
                  var $switch = $T4D().$Cast(node);
                  var enumerator = ($switch.get_Cases()).GetEnumerator();
                  try {

                    while ($IM00().Call(enumerator, null)) {
                      var c = $IM08().Call(enumerator, null);
                      this.DefineBlockLabels(c.get_Body());
                    }
                  } finally {
                    if (enumerator !== null) {
                      $IM02().Call(enumerator, null);
                    }
                  }
                  this.DefineBlockLabels($switch.get_DefaultBody());
                  result = true;
                  return result;

              }
              break;

          }
          if (this._labelBlock.Kind !== $T07().Expression) {
            this.PushLabelBlock($T07().Expression);
            result = true;
            return result;
          }
          result = false;
          return result;

          $label0 = 1 /* goto IL_1D1 */ ;
          continue $labelgroup0;
        case 1: /* IL_1D1 */ 
          this.PushLabelBlock($T07().Statement);
          result = true;
          return result;

          break $labelgroup0;
      }
    }
  };

  function LightCompiler_Unbox (strongBoxExpression) {
    return $S17().CallStatic($T0C(), "Field", null, strongBoxExpression, $T28().GetDeclaredField($T67().__Type__, "Value"));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LightCompiler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      LightCompiler__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type), 
      LightCompiler__ctor$01
    );

    $.Method({Static:true , Public:false}, "$lCompileMethodCallExpression$gb__4", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      LightCompiler_$lCompileMethodCallExpression$gb__4
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lCompileMethodCallExpression$gb__5", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LightCompiler_$lCompileMethodCallExpression$gb__5
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lCompileNewExpression$gb__8", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      LightCompiler_$lCompileNewExpression$gb__8
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lCompileSwitchExpression$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.SwitchCase")]), 
      LightCompiler_$lCompileSwitchExpression$gb__0
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lCompileSwitchExpression$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LightCompiler_$lCompileSwitchExpression$gb__1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]), 
      LightCompiler_Compile$02
    );

    $.Method({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_Compile$03
    );

    $.Method({Static:false, Public:false}, "CompileAndAlsoBinaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileAndAlsoBinaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileArithmetic", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression")
        ]), 
      LightCompiler_CompileArithmetic
    );

    $.Method({Static:false, Public:false}, "CompileAssignBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]), 
      LightCompiler_CompileAssignBinaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileAsVoid", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileAsVoid
    );

    $.Method({Static:false, Public:false}, "CompileAsVoidRemoveRethrow", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileAsVoidRemoveRethrow
    );

    $.Method({Static:false, Public:false}, "CompileBinaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileBinaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileBlockEnd", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalDefinition")])), 
      LightCompiler_CompileBlockEnd
    );

    $.Method({Static:false, Public:false}, "CompileBlockExpression", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]), 
      LightCompiler_CompileBlockExpression
    );

    $.Method({Static:false, Public:false}, "CompileBlockStart", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalDefinition")]), [$asm04.TypeRef("System.Linq.Expressions.BlockExpression")]), 
      LightCompiler_CompileBlockStart
    );

    $.Method({Static:false, Public:false}, "CompileCoalesceBinaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileCoalesceBinaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileComparison", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean
        ]), 
      LightCompiler_CompileComparison
    );

    $.Method({Static:false, Public:false}, "CompileConditionalExpression", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]), 
      LightCompiler_CompileConditionalExpression
    );

    $.Method({Static:false, Public:false}, "CompileConstantExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileConstantExpression
    );

    $.Method({Static:false, Public:false}, "CompileConvertToType", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ]), 
      LightCompiler_CompileConvertToType
    );

    $.Method({Static:false, Public:false}, "CompileConvertUnaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileConvertUnaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileDebugInfoExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileDebugInfoExpression
    );

    $.Method({Static:false, Public:false}, "CompileDefaultExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileDefaultExpression$04
    );

    $.Method({Static:false, Public:false}, "CompileDefaultExpression", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Type")), 
      LightCompiler_CompileDefaultExpression$05
    );

    $.Method({Static:false, Public:false}, "CompileEqual", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $.Boolean
        ]), 
      LightCompiler_CompileEqual
    );

    $.Method({Static:false, Public:false}, "CompileExtensionExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileExtensionExpression
    );

    $.Method({Static:false, Public:true }, "CompileGetBoxedVariable", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.ParameterExpression")), 
      LightCompiler_CompileGetBoxedVariable
    );

    $.Method({Static:false, Public:true }, "CompileGetVariable", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.ParameterExpression")), 
      LightCompiler_CompileGetVariable
    );

    $.Method({Static:false, Public:false}, "CompileGotoExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileGotoExpression
    );

    $.Method({Static:false, Public:false}, "CompileIndexAssignment", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), $.Boolean]), 
      LightCompiler_CompileIndexAssignment
    );

    $.Method({Static:false, Public:false}, "CompileIndexExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileIndexExpression
    );

    $.Method({Static:false, Public:false}, "CompileInvocationExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileInvocationExpression
    );

    $.Method({Static:false, Public:false}, "CompileLabelExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileLabelExpression
    );

    $.Method({Static:false, Public:false}, "CompileLambdaExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileLambdaExpression
    );

    $.Method({Static:false, Public:false}, "CompileListInitExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileListInitExpression
    );

    $.Method({Static:false, Public:false}, "CompileLogical", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean
        ]), 
      LightCompiler_CompileLogical
    );

    $.Method({Static:false, Public:false}, "CompileLogicalBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]), 
      LightCompiler_CompileLogicalBinaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileLoopExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileLoopExpression
    );

    $.Method({Static:false, Public:false}, "CompileMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), $.Boolean]), 
      LightCompiler_CompileMemberAssignment
    );

    $.Method({Static:false, Public:false}, "CompileMemberExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileMemberExpression
    );

    $.Method({Static:false, Public:false}, "CompileMemberInitExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileMemberInitExpression
    );

    $.Method({Static:false, Public:false}, "CompileMethodCallExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileMethodCallExpression
    );

    $.Method({Static:false, Public:false}, "CompileNegateExpression", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), $.Boolean, 
          $.Boolean
        ]), 
      LightCompiler_CompileNegateExpression
    );

    $.Method({Static:false, Public:false}, "CompileNewArrayExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileNewArrayExpression
    );

    $.Method({Static:false, Public:false}, "CompileNewExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileNewExpression
    );

    $.Method({Static:false, Public:false}, "CompileNoLabelPush", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileNoLabelPush
    );

    $.Method({Static:false, Public:false}, "CompileNotEqual", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $.Boolean
        ]), 
      LightCompiler_CompileNotEqual
    );

    $.Method({Static:false, Public:false}, "CompileNotExpression", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), $.Boolean]), 
      LightCompiler_CompileNotExpression
    );

    $.Method({Static:false, Public:false}, "CompileOrElseBinaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileOrElseBinaryExpression
    );

    $.Method({Static:false, Public:true }, "CompileParameterExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileParameterExpression
    );

    $.Method({Static:false, Public:false}, "CompileQuotedLambdaExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileQuotedLambdaExpression
    );

    $.Method({Static:false, Public:false}, "CompileQuoteUnaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileQuoteUnaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileReducibleExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileReducibleExpression
    );

    $.Method({Static:false, Public:false}, "CompileRuntimeVariablesExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileRuntimeVariablesExpression
    );

    $.Method({Static:false, Public:true }, "CompileSetVariable", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Boolean]), 
      LightCompiler_CompileSetVariable
    );

    $.Method({Static:false, Public:false}, "CompileShift", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean
        ]), 
      LightCompiler_CompileShift
    );

    $.Method({Static:false, Public:false}, "CompileSwitchExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileSwitchExpression
    );

    $.Method({Static:false, Public:false}, "CompileThrowUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]), 
      LightCompiler_CompileThrowUnaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileTop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")]), 
      LightCompiler_CompileTop$06
    );

    $.Method({Static:false, Public:false}, "CompileTop", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), [$asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression")]), 
      LightCompiler_CompileTop$07
    );

    $.Method({Static:false, Public:false}, "CompileTryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileTryExpression
    );

    $.Method({Static:false, Public:false}, "CompileTypeAsExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.UnaryExpression")), 
      LightCompiler_CompileTypeAsExpression
    );

    $.Method({Static:false, Public:false}, "CompileTypeEqualExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileTypeEqualExpression
    );

    $.Method({Static:false, Public:false}, "CompileTypeIsExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileTypeIsExpression
    );

    $.Method({Static:false, Public:false}, "CompileUnaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileUnaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileUnboxUnaryExpression", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_CompileUnboxUnaryExpression
    );

    $.Method({Static:false, Public:false}, "CompileVariableAssignment", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), $.Boolean]), 
      LightCompiler_CompileVariableAssignment
    );

    $.Method({Static:false, Public:false}, "DefineBlockLabels", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      LightCompiler_DefineBlockLabels
    );

    $.Method({Static:false, Public:false}, "DefineLabel", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo"), [$asm04.TypeRef("System.Linq.Expressions.LabelTarget")]), 
      LightCompiler_DefineLabel
    );

    $.Method({Static:false, Public:true }, "EmitCall", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Reflection.MethodInfo")), 
      LightCompiler_EmitCall$08
    );

    $.Method({Static:false, Public:true }, "EmitCall", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      LightCompiler_EmitCall$09
    );

    $.Method({Static:false, Public:false}, "EndsWithRethrow", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LightCompiler_EndsWithRethrow
    );

    $.Method({Static:false, Public:false}, "EnsureAvailableForClosure", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LightCompiler_EnsureAvailableForClosure
    );

    $.Method({Static:false, Public:false}, "EnsureLabel", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo"), [$asm04.TypeRef("System.Linq.Expressions.LabelTarget")]), 
      LightCompiler_EnsureLabel
    );

    $.Method({Static:false, Public:false}, "EnsureVariable", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Linq.Expressions.ParameterExpression")), 
      LightCompiler_EnsureVariable
    );

    $.Method({Static:false, Public:true }, "get_Instructions", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList")), 
      LightCompiler_get_Instructions
    );

    $.Method({Static:false, Public:true }, "get_Locals", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables")), 
      LightCompiler_get_Locals
    );

    $.Method({Static:false, Public:true }, "GetBranchLabel", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel"), [$asm04.TypeRef("System.Linq.Expressions.LabelTarget")]), 
      LightCompiler_GetBranchLabel
    );

    $.Method({Static:false, Public:false}, "GetBranchMapping", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")])), 
      LightCompiler_GetBranchMapping
    );

    $.Method({Static:false, Public:false}, "MakeInterpreter", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"), [$.String]), 
      LightCompiler_MakeInterpreter
    );

    $.Method({Static:false, Public:true }, "PopLabelBlock", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeKind")), 
      LightCompiler_PopLabelBlock
    );

    $.Method({Static:false, Public:true }, "PushLabelBlock", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeKind")), 
      LightCompiler_PushLabelBlock
    );

    $.Method({Static:false, Public:false}, "ReferenceLabel", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo"), [$asm04.TypeRef("System.Linq.Expressions.LabelTarget")]), 
      LightCompiler_ReferenceLabel
    );

    $.Method({Static:false, Public:false}, "ResolveLocal", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LightCompiler_ResolveLocal
    );

    $.Method({Static:false, Public:false}, "TryPushLabelBlock", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LightCompiler_TryPushLabelBlock
    );

    $.Method({Static:true , Public:false}, "Unbox", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LightCompiler_Unbox
    );

    $.Constant({Static:true , Public:false}, "DefaultCompilationThreshold", 32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_compilationThreshold", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_instructions", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_handlers", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.ExceptionHandler")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_debugInfos", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.DebugInfo")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_treeLabels", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelInfo")])); 
    $.Field({Static:false, Public:false}, "_labelBlock", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LabelScopeInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_exceptionForRethrowStack", $asm02.TypeRef("System.Collections.Generic.Stack`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false}, "_forceCompile", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_parent", $.Type); 
    $.Field({Static:true , Public:false}, "EmptyLocals", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalDefinition")]), function ($pi) {
        return JSIL.Array.New($asm00.Microsoft.Scripting.Interpreter.LocalDefinition, 0);
      }); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate2", $asm01.TypeRef("System.Func`2", [$asm04.TypeRef("System.Linq.Expressions.SwitchCase"), $.Boolean]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate3", $asm01.TypeRef("System.Func`2", [$asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate6", $asm01.TypeRef("System.Predicate`1", [$asm01.TypeRef("System.Reflection.ParameterInfo")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate7", $asm01.TypeRef("System.Func`2", [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate9", $asm01.TypeRef("System.Predicate`1", [$asm01.TypeRef("System.Reflection.ParameterInfo")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function LightCompiler__cctor () {
      $thisType.EmptyLocals = JSIL.Array.New($T00(), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LightCompiler__cctor
    );

    $.Property({Static:false, Public:true }, "Instructions", $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList"));

    $.Property({Static:false, Public:true }, "Locals", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LightDelegateCreator */ 

(function LightDelegateCreator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.LambdaExpression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.LightLambdaExpression)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightLambda)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };

  function LightDelegateCreator__ctor$00 (interpreter, lambda) {
    this._interpreter = interpreter;
    this._lambda = lambda;
  };

  function LightDelegateCreator__ctor$01 (interpreter, lambda) {
    this._interpreter = interpreter;
    this._lambda = lambda;
  };

  function LightDelegateCreator_CreateDelegate$02 () {
    return this.CreateDelegate(null);
  };

  function LightDelegateCreator_CreateDelegate$03 (closure) {
    return ((new ($T04())(this, closure, this._interpreter._compilationThreshold))).MakeDelegate(this.get_DelegateType());
  };

  function LightDelegateCreator_get_DelegateType () {
    if ($T01().$As(this._lambda) !== null) {
      var type = ($T01().$As(this._lambda)).get_Type();
    } else {
      type = ($T02().$Cast(this._lambda)).get_Type();
    }
    return type;
  };

  function LightDelegateCreator_get_HasClosure () {
    return ((this._interpreter !== null) && (((this._interpreter).get_ClosureSize() | 0) > 0));
  };

  function LightDelegateCreator_get_Interpreter () {
    return this._interpreter;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LightDelegateCreator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"), $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")]), 
      LightDelegateCreator__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"), $asm00.TypeRef("Microsoft.Scripting.Ast.LightLambdaExpression")]), 
      LightDelegateCreator__ctor$01
    );

    $.Method({Static:false, Public:false}, "CreateDelegate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Delegate")), 
      LightDelegateCreator_CreateDelegate$02
    );

    $.Method({Static:false, Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])])]), 
      LightDelegateCreator_CreateDelegate$03
    );

    $.Method({Static:false, Public:false}, "get_DelegateType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      LightDelegateCreator_get_DelegateType
    );

    $.Method({Static:false, Public:false}, "get_HasClosure", 
      JSIL.MethodSignature.Return($.Boolean), 
      LightDelegateCreator_get_HasClosure
    );

    $.Method({Static:false, Public:false}, "get_Interpreter", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter")), 
      LightDelegateCreator_get_Interpreter
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_interpreter", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false}, "Interpreter", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter"));

    $.Property({Static:false, Public:false}, "HasClosure", $.Boolean);

    $.Property({Static:false, Public:false}, "DelegateType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LightLambdaCompileEventArgs */ 

(function LightLambdaCompileEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.EventArgs)) ();
  };

  function LightLambdaCompileEventArgs__ctor (compiled) {
    $T01().prototype._ctor.call(this);
    this.LightLambdaCompileEventArgs$Compiled$value = compiled;
  };

  function LightLambdaCompileEventArgs_get_Compiled () {
    return this.LightLambdaCompileEventArgs$Compiled$value;
  };

  function LightLambdaCompileEventArgs_set_Compiled (value) {
    this.LightLambdaCompileEventArgs$Compiled$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.EventArgs"), 
      Name: "Microsoft.Scripting.Interpreter.LightLambdaCompileEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Delegate")), 
      LightLambdaCompileEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Compiled", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Delegate")), 
      LightLambdaCompileEventArgs_get_Compiled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Compiled", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Delegate")), 
      LightLambdaCompileEventArgs_set_Compiled
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "LightLambdaCompileEventArgs$Compiled$value", $asm01.TypeRef("System.Delegate"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Compiled", $asm01.TypeRef("System.Delegate"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LightLambda */ 

(function LightLambda$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CacheDict$b2.Of($asm01.System.Type, $asm01.System.Func$b2.Of($asm00.Microsoft.Scripting.Interpreter.LightLambda, $asm01.System.Delegate)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightDelegateCreator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.System.Linq.Expressions.NewArrayExpression)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.Utils)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.System.Linq.Expressions.UnaryExpression)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.System.Linq.Expressions.LambdaExpression)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Func$b2.Of($asm00.Microsoft.Scripting.Interpreter.LightLambda, $asm01.System.Delegate))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightLambda_$l$gc__DisplayClass2)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Void)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.DelegateHelpers)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.System.Action)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ThreadLocal$b1_StorageInfo.Of($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.Interpreter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), [
        $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
        $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Return($asm01.TypeRef("System.Delegate")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };

  function LightLambda__ctor (delegateCreator, closure, compilationThreshold) {
    this._delegateCreator = delegateCreator;
    this._closure = closure;
    this._interpreter = delegateCreator.get_Interpreter();
    this._compilationThreshold = (compilationThreshold | 0);
  };

  function LightLambda_CreateCustomDelegate (delegateType) {
    var method = delegateType.GetMethod("Invoke");
    var paramInfos = method.GetParameters();
    var parameters = JSIL.Array.New($T09(), paramInfos.length);
    var parametersAsObject = JSIL.Array.New($T0B(), paramInfos.length);

    for (var i = 0; i < (paramInfos.length | 0); i = ((i + 1) | 0)) {
      var parameter = $T0B().Parameter(
        (paramInfos[i]).get_ParameterType(), 
        (paramInfos[i]).get_Name()
      );
      parameters[i] = parameter;
      parametersAsObject[i] = $T0B().Convert(parameter, $T0D().__Type__);
    }
    var data = $S00().CallStatic($T0B(), "NewArrayInit", null, $T0D().__Type__, parametersAsObject);
    var self = $T0F().Constant(this);
    var runMethod = $thisType.__Type__.GetMethod("Run");
    var body = $T0B().Convert(
      $S01().CallStatic($T0B(), "Call", null, self, runMethod, JSIL.Array.New($T0B(), [data])), 
      method.get_ReturnType()
    );
    var lambda = $S02().CallStatic($T0B(), "Lambda", null, delegateType, body, parameters);
    return $S03().CallVirtual("Compile", null, lambda);
  };

  function LightLambda_GetRunDelegateCtor (delegateType) {
    var fastCtor = new JSIL.BoxedVariable(null);
    var runCache = null;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T14().Enter(runCache = $thisType._runCache, /* ref */ flag);
      if ($T00().prototype.TryGetValue.call($thisType._runCache, delegateType, /* ref */ fastCtor)) {
        var result = fastCtor.get();
      } else {
        result = $thisType.MakeRunDelegateCtor(delegateType);
      }
    } finally {
      if (flag.get()) {
        $T14().Exit(runCache);
      }
    }
    return result;
  };

  function LightLambda_MakeDelegate (delegateType) {
    var fastCtor = $thisType.GetRunDelegateCtor(delegateType);
    if (fastCtor !== null) {
      var result = fastCtor(this);
    } else {
      result = this.CreateCustomDelegate(delegateType);
    }
    return result;
  };

  function LightLambda_MakeFrame () {
    return new ($T16())(this._interpreter, this._closure);
  };

  function LightLambda_MakeRun0$b1 (TRet, lambda) {
    return $asm01.System.Func$b1.Of(TRet).New(lambda, $thisType.prototype.Run0$b1(TRet), function () { return JSIL.GetMethodInfo($thisType, "Run0", new JSIL.MethodSignature("!!0", null, ["TRet"]), false, [TRet]); });
  };

  function LightLambda_MakeRun1$b2 (T0, TRet, lambda) {
    return $asm01.System.Func$b2.Of(T0, TRet).New(lambda, $thisType.prototype.Run1$b2(T0, TRet), function () { return JSIL.GetMethodInfo($thisType, "Run1", new JSIL.MethodSignature("!!1", ["!!0"], ["T0", "TRet"]), false, [T0, TRet]); });
  };

  function LightLambda_MakeRun10$b11 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet, lambda) {
    return $asm04.System.Func$b11.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        TRet
    ).New(lambda, $thisType.prototype.Run10$b11(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run10", new JSIL.MethodSignature("!!10", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun11$b12 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TRet, lambda) {
    return $asm04.System.Func$b12.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, TRet
    ).New(lambda, $thisType.prototype.Run11$b12(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run11", new JSIL.MethodSignature("!!11", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, TRet
        ]); });
  };

  function LightLambda_MakeRun12$b13 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TRet, lambda) {
    return $asm04.System.Func$b13.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        TRet
    ).New(lambda, $thisType.prototype.Run12$b13(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run12", new JSIL.MethodSignature("!!12", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun13$b14 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TRet, lambda) {
    return $asm04.System.Func$b14.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        T12, TRet
    ).New(lambda, $thisType.prototype.Run13$b14(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          T12, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run13", new JSIL.MethodSignature("!!13", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11", 
            "!!12"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "T12", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          T12, TRet
        ]); });
  };

  function LightLambda_MakeRun14$b15 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TRet, lambda) {
    return $asm04.System.Func$b15.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        T12, T13, 
        TRet
    ).New(lambda, $thisType.prototype.Run14$b15(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          T12, T13, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run14", new JSIL.MethodSignature("!!14", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11", 
            "!!12", "!!13"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "T12", "T13", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          T12, T13, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun15$b16 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TRet, lambda) {
    return $asm04.System.Func$b16.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        T12, T13, 
        T14, TRet
    ).New(lambda, $thisType.prototype.Run15$b16(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          T12, T13, T14, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run15", new JSIL.MethodSignature("!!15", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11", 
            "!!12", "!!13", 
            "!!14"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "T12", "T13", "T14", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          T12, T13, 
          T14, TRet
        ]); });
  };

  function LightLambda_MakeRun2$b3 (T0, T1, TRet, lambda) {
    return $asm01.System.Func$b3.Of(
        T0, T1, 
        TRet
    ).New(lambda, $thisType.prototype.Run2$b3(T0, T1, TRet), function () { return JSIL.GetMethodInfo($thisType, "Run2", new JSIL.MethodSignature("!!2", ["!!0", "!!1"], ["T0", "T1", "TRet"]), false, [
          T0, T1, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun3$b4 (T0, T1, T2, TRet, lambda) {
    return $asm01.System.Func$b4.Of(
        T0, T1, 
        T2, TRet
    ).New(lambda, $thisType.prototype.Run3$b4(T0, T1, T2, TRet), function () { return JSIL.GetMethodInfo($thisType, "Run3", new JSIL.MethodSignature("!!3", [
            "!!0", "!!1", 
            "!!2"
          ], ["T0", "T1", "T2", "TRet"]), false, [
          T0, T1, 
          T2, TRet
        ]); });
  };

  function LightLambda_MakeRun4$b5 (T0, T1, T2, T3, TRet, lambda) {
    return $asm01.System.Func$b5.Of(
        T0, T1, 
        T2, T3, 
        TRet
    ).New(lambda, $thisType.prototype.Run4$b5(
          T0, T1, T2, T3, 
          TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run4", new JSIL.MethodSignature("!!4", [
            "!!0", "!!1", 
            "!!2", "!!3"
          ], [
            "T0", "T1", "T2", "T3", 
            "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun5$b6 (T0, T1, T2, T3, T4, TRet, lambda) {
    return $asm01.System.Func$b6.Of(
        T0, T1, 
        T2, T3, 
        T4, TRet
    ).New(lambda, $thisType.prototype.Run5$b6(
          T0, T1, T2, T3, 
          T4, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run5", new JSIL.MethodSignature("!!5", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, TRet
        ]); });
  };

  function LightLambda_MakeRun6$b7 (T0, T1, T2, T3, T4, T5, TRet, lambda) {
    return $asm01.System.Func$b7.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        TRet
    ).New(lambda, $thisType.prototype.Run6$b7(
          T0, T1, T2, T3, 
          T4, T5, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run6", new JSIL.MethodSignature("!!6", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun7$b8 (T0, T1, T2, T3, T4, T5, T6, TRet, lambda) {
    return $asm01.System.Func$b8.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, TRet
    ).New(lambda, $thisType.prototype.Run7$b8(
          T0, T1, T2, T3, 
          T4, T5, T6, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run7", new JSIL.MethodSignature("!!7", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, TRet
        ]); });
  };

  function LightLambda_MakeRun8$b9 (T0, T1, T2, T3, T4, T5, T6, T7, TRet, lambda) {
    return $asm01.System.Func$b9.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        TRet
    ).New(lambda, $thisType.prototype.Run8$b9(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run8", new JSIL.MethodSignature("!!8", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          TRet
        ]); });
  };

  function LightLambda_MakeRun9$b10 (T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet, lambda) {
    return $asm04.System.Func$b10.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, TRet
    ).New(lambda, $thisType.prototype.Run9$b10(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, TRet
      ), function () { return JSIL.GetMethodInfo($thisType, "Run9", new JSIL.MethodSignature("!!9", [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "TRet"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, TRet
        ]); });
  };

  function LightLambda_MakeRunDelegateCtor (delegateType) {
    var $closure0 = new ($T17())();
    $closure0.delegateType = delegateType;
    var method = ($closure0.delegateType).GetMethod("Invoke");
    var paramInfos = method.GetParameters();
    var name = "Run";
    if ((paramInfos.length | 0) >= 16) {
      var result = null;
    } else {
      if ($T04().op_Equality(method.get_ReturnType(), $T19().__Type__)) {
        name = (JSIL.ConcatString(name, "Void"));
        var paramTypes = JSIL.Array.New($T04(), paramInfos.length);
      } else {
        paramTypes = JSIL.Array.New($T04(), (((paramInfos.length | 0) + 1) | 0));
        paramTypes[(((paramTypes.length | 0) - 1) | 0)] = method.get_ReturnType();
      }
      if (!(!$T04().op_Equality(method.get_ReturnType(), $T19().__Type__) || 
          ((paramTypes.length | 0) !== 2) || 
          !((paramInfos[0]).get_ParameterType()).get_IsByRef() || !((paramInfos[1]).get_ParameterType()).get_IsByRef())) {
        var runMethod = $S04().CallVirtual("GetMethod", null, $thisType.__Type__, "RunVoidRef2", $T1B().$Flags("Instance", "NonPublic"));
        paramTypes[0] = ((paramInfos[0]).get_ParameterType()).GetElementType();
        paramTypes[1] = ((paramInfos[1]).get_ParameterType()).GetElementType();
      } else if (!(!$T04().op_Equality(method.get_ReturnType(), $T19().__Type__) || ((paramTypes.length | 0) !== 0))) {
        runMethod = $S04().CallVirtual("GetMethod", null, $thisType.__Type__, "RunVoid0", $T1B().$Flags("Instance", "NonPublic"));
      } else {

        for (var i = 0; i < (paramInfos.length | 0); i = ((i + 1) | 0)) {
          paramTypes[i] = (paramInfos[i]).get_ParameterType();
          if ((paramTypes[i]).get_IsByRef()) {
            result = null;
            return result;
          }
        }
        if ($T04().op_Equality($T1C().MakeDelegate(paramTypes), $closure0.delegateType)) {
          name = (JSIL.ConcatString("Make", name, paramInfos.length));
          var ctorMethod = ($S04().CallVirtual("GetMethod", null, $thisType.__Type__, name, $T1B().$Flags("NonPublic", "Static"))).MakeGenericMethod(paramTypes);
          result = $T00().prototype.set_Item.call($thisType._runCache, $closure0.delegateType, $T1D().CreateDelegate(ctorMethod, $T12().__Type__));
          return result;
        }
        runMethod = $S04().CallVirtual("GetMethod", null, $thisType.__Type__, JSIL.ConcatString(name, paramInfos.length), $T1B().$Flags("Instance", "NonPublic"));
      }
      $closure0.targetMethod = (
        runMethod.get_IsGenericMethodDefinition()
           ? runMethod.MakeGenericMethod(paramTypes)
           : runMethod)
      ;
      var final = $T12().New($closure0, $T17().prototype.$lMakeRunDelegateCtor$gb__1, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Interpreter.LightLambda_$l$gc__DisplayClass2, "$lMakeRunDelegateCtor$gb__1", new JSIL.MethodSignature($asm01.System.Delegate, [$thisType]), false); });
      $T00().prototype.set_Item.call($thisType._runCache, $closure0.delegateType, final);
      result = final;
    }
    return result;
  };

  function LightLambda_MakeRunVoid0 (lambda) {
    return $T1E().New(lambda, $thisType.prototype.RunVoid0, function () { return JSIL.GetMethodInfo($thisType, "RunVoid0", JSIL.MethodSignature.Void, false); });
  };

  function LightLambda_MakeRunVoid1$b1 (T0, lambda) {
    return $asm01.System.Action$b1.Of(T0).New(lambda, $thisType.prototype.RunVoid1$b1(T0), function () { return JSIL.GetMethodInfo($thisType, "RunVoid1", new JSIL.MethodSignature(null, ["!!0"], ["T0"]), false, [T0]); });
  };

  function LightLambda_MakeRunVoid10$b10 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, lambda) {
    return $asm04.System.Action$b10.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9
    ).New(lambda, $thisType.prototype.RunVoid10$b10(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid10", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9
        ]); });
  };

  function LightLambda_MakeRunVoid11$b11 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, lambda) {
    return $asm04.System.Action$b11.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10
    ).New(lambda, $thisType.prototype.RunVoid11$b11(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid11", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10
        ]); });
  };

  function LightLambda_MakeRunVoid12$b12 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, lambda) {
    return $asm04.System.Action$b12.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11
    ).New(lambda, $thisType.prototype.RunVoid12$b12(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid12", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11
        ]); });
  };

  function LightLambda_MakeRunVoid13$b13 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, lambda) {
    return $asm04.System.Action$b13.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        T12
    ).New(lambda, $thisType.prototype.RunVoid13$b13(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          T12
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid13", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11", 
            "!!12"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "T12"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          T12
        ]); });
  };

  function LightLambda_MakeRunVoid14$b14 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, lambda) {
    return $asm04.System.Action$b14.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        T12, T13
    ).New(lambda, $thisType.prototype.RunVoid14$b14(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          T12, T13
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid14", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11", 
            "!!12", "!!13"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "T12", "T13"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          T12, T13
        ]); });
  };

  function LightLambda_MakeRunVoid15$b15 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, lambda) {
    return $asm04.System.Action$b15.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8, T9, 
        T10, T11, 
        T12, T13, 
        T14
    ).New(lambda, $thisType.prototype.RunVoid15$b15(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8, T9, T10, T11, 
          T12, T13, T14
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid15", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8", "!!9", 
            "!!10", "!!11", 
            "!!12", "!!13", 
            "!!14"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8", "T9", "T10", "T11", 
            "T12", "T13", "T14"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8, T9, 
          T10, T11, 
          T12, T13, 
          T14
        ]); });
  };

  function LightLambda_MakeRunVoid2$b2 (T0, T1, lambda) {
    return $asm01.System.Action$b2.Of(T0, T1).New(lambda, $thisType.prototype.RunVoid2$b2(T0, T1), function () { return JSIL.GetMethodInfo($thisType, "RunVoid2", new JSIL.MethodSignature(null, ["!!0", "!!1"], ["T0", "T1"]), false, [T0, T1]); });
  };

  function LightLambda_MakeRunVoid3$b3 (T0, T1, T2, lambda) {
    return $asm01.System.Action$b3.Of(
        T0, T1, 
        T2
    ).New(lambda, $thisType.prototype.RunVoid3$b3(T0, T1, T2), function () { return JSIL.GetMethodInfo($thisType, "RunVoid3", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2"
          ], ["T0", "T1", "T2"]), false, [
          T0, T1, 
          T2
        ]); });
  };

  function LightLambda_MakeRunVoid4$b4 (T0, T1, T2, T3, lambda) {
    return $asm01.System.Action$b4.Of(
        T0, T1, 
        T2, T3
    ).New(lambda, $thisType.prototype.RunVoid4$b4(T0, T1, T2, T3), function () { return JSIL.GetMethodInfo($thisType, "RunVoid4", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3"
          ], ["T0", "T1", "T2", "T3"]), false, [
          T0, T1, 
          T2, T3
        ]); });
  };

  function LightLambda_MakeRunVoid5$b5 (T0, T1, T2, T3, T4, lambda) {
    return $asm01.System.Action$b5.Of(
        T0, T1, 
        T2, T3, 
        T4
    ).New(lambda, $thisType.prototype.RunVoid5$b5(
          T0, T1, T2, T3, 
          T4
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid5", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4
        ]); });
  };

  function LightLambda_MakeRunVoid6$b6 (T0, T1, T2, T3, T4, T5, lambda) {
    return $asm01.System.Action$b6.Of(
        T0, T1, 
        T2, T3, 
        T4, T5
    ).New(lambda, $thisType.prototype.RunVoid6$b6(
          T0, T1, T2, T3, 
          T4, T5
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid6", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5
        ]); });
  };

  function LightLambda_MakeRunVoid7$b7 (T0, T1, T2, T3, T4, T5, T6, lambda) {
    return $asm01.System.Action$b7.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6
    ).New(lambda, $thisType.prototype.RunVoid7$b7(
          T0, T1, T2, T3, 
          T4, T5, T6
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid7", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6
        ]); });
  };

  function LightLambda_MakeRunVoid8$b8 (T0, T1, T2, T3, T4, T5, T6, T7, lambda) {
    return $asm01.System.Action$b8.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7
    ).New(lambda, $thisType.prototype.RunVoid8$b8(
          T0, T1, T2, T3, 
          T4, T5, T6, T7
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid8", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7
        ]); });
  };

  function LightLambda_MakeRunVoid9$b9 (T0, T1, T2, T3, T4, T5, T6, T7, T8, lambda) {
    return $asm04.System.Action$b9.Of(
        T0, T1, 
        T2, T3, 
        T4, T5, 
        T6, T7, 
        T8
    ).New(lambda, $thisType.prototype.RunVoid9$b9(
          T0, T1, T2, T3, 
          T4, T5, T6, T7, 
          T8
      ), function () { return JSIL.GetMethodInfo($thisType, "RunVoid9", new JSIL.MethodSignature(null, [
            "!!0", "!!1", 
            "!!2", "!!3", 
            "!!4", "!!5", 
            "!!6", "!!7", 
            "!!8"
          ], [
            "T0", "T1", "T2", "T3", 
            "T4", "T5", "T6", "T7", 
            "T8"
          ]), false, [
          T0, T1, 
          T2, T3, 
          T4, T5, 
          T6, T7, 
          T8
        ]); });
  };

  function LightLambda_Run0$b1 (TRet) {
    var frame = this.MakeFrame();
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run1$b2 (T0, TRet, arg0) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run10$b11 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run11$b12 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run12$b13 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run13$b14 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    frame.Data[12] = arg12;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run14$b15 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    frame.Data[12] = arg12;
    frame.Data[13] = arg13;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run15$b16 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    frame.Data[12] = arg12;
    frame.Data[13] = arg13;
    frame.Data[14] = arg14;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run2$b3 (T0, T1, TRet, arg0, arg1) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run3$b4 (T0, T1, T2, TRet, arg0, arg1, arg2) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run4$b5 (T0, T1, T2, T3, TRet, arg0, arg1, arg2, arg3) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run5$b6 (T0, T1, T2, T3, T4, TRet, arg0, arg1, arg2, arg3, arg4) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run6$b7 (T0, T1, T2, T3, T4, T5, TRet, arg0, arg1, arg2, arg3, arg4, arg5) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run7$b8 (T0, T1, T2, T3, T4, T5, T6, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run8$b9 (T0, T1, T2, T3, T4, T5, T6, T7, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_Run9$b10 (T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
    return TRet.$Cast(frame.Pop());
  };

  function LightLambda_RunVoid0 () {
    var frame = this.MakeFrame();
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid1$b1 (T0, arg0) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid10$b10 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid11$b11 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid12$b12 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid13$b13 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    frame.Data[12] = arg12;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid14$b14 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    frame.Data[12] = arg12;
    frame.Data[13] = arg13;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid15$b15 (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    frame.Data[9] = arg9;
    frame.Data[10] = arg10;
    frame.Data[11] = arg11;
    frame.Data[12] = arg12;
    frame.Data[13] = arg13;
    frame.Data[14] = arg14;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid2$b2 (T0, T1, arg0, arg1) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid3$b3 (T0, T1, T2, arg0, arg1, arg2) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid4$b4 (T0, T1, T2, T3, arg0, arg1, arg2, arg3) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid5$b5 (T0, T1, T2, T3, T4, arg0, arg1, arg2, arg3, arg4) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid6$b6 (T0, T1, T2, T3, T4, T5, arg0, arg1, arg2, arg3, arg4, arg5) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid7$b7 (T0, T1, T2, T3, T4, T5, T6, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid8$b8 (T0, T1, T2, T3, T4, T5, T6, T7, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoid9$b9 (T0, T1, T2, T3, T4, T5, T6, T7, T8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    var frame = this.MakeFrame();
    frame.Data[0] = arg0;
    frame.Data[1] = arg1;
    frame.Data[2] = arg2;
    frame.Data[3] = arg3;
    frame.Data[4] = arg4;
    frame.Data[5] = arg5;
    frame.Data[6] = arg6;
    frame.Data[7] = arg7;
    frame.Data[8] = arg8;
    var current = frame.Enter();
    try {
      (this._interpreter).Run(frame);
    } finally {
      frame.Leave(current);
    }
  };

  function LightLambda_RunVoidRef2$b2 (T0, T1, /* ref */ arg0, /* ref */ arg1) {
    if (this.TryGetCompiled()) {
      null(/* ref */ arg0, /* ref */ arg1);
    } else {
      var frame = this.MakeFrame();
      frame.Data[0] = JSIL.CloneParameter(T0, arg0.get());
      frame.Data[1] = JSIL.CloneParameter(T1, arg1.get());
      var currentFrame = frame.Enter();
      try {
        (this._interpreter).Run(frame);
      } finally {
        frame.Leave(currentFrame);
        arg0.set(JSIL.CloneParameter(T0, T0.$Cast(frame.Data[0])));
        arg1.set(JSIL.CloneParameter(T1, T1.$Cast(frame.Data[1])));
      }
    }
  };

  function LightLambda_TryGetCompiled () {
    return false;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LightLambda", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])]), 
          $.Int32
        ]), 
      LightLambda__ctor
    );

    $.Method({Static:false, Public:false}, "CreateCustomDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm01.TypeRef("System.Type")]), 
      LightLambda_CreateCustomDelegate
    );

    $.Method({Static:true , Public:false}, "GetRunDelegateCtor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Func`2", [$.Type, $asm01.TypeRef("System.Delegate")]), [$asm01.TypeRef("System.Type")]), 
      LightLambda_GetRunDelegateCtor
    );

    $.Method({Static:false, Public:false}, "MakeDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm01.TypeRef("System.Type")]), 
      LightLambda_MakeDelegate
    );

    $.Method({Static:false, Public:false}, "MakeFrame", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame")), 
      LightLambda_MakeFrame
    );

    $.Method({Static:true , Public:false}, "MakeRun0", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["TRet"]), 
      LightLambda_MakeRun0$b1
    );

    $.Method({Static:true , Public:false}, "MakeRun1", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0", "TRet"]), 
      LightLambda_MakeRun1$b2
    );

    $.Method({Static:true , Public:false}, "MakeRun10", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "TRet"
        ]), 
      LightLambda_MakeRun10$b11
    );

    $.Method({Static:true , Public:false}, "MakeRun11", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "TRet"
        ]), 
      LightLambda_MakeRun11$b12
    );

    $.Method({Static:true , Public:false}, "MakeRun12", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "TRet"
        ]), 
      LightLambda_MakeRun12$b13
    );

    $.Method({Static:true , Public:false}, "MakeRun13", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "TRet"
        ]), 
      LightLambda_MakeRun13$b14
    );

    $.Method({Static:true , Public:false}, "MakeRun14", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13", "TRet"
        ]), 
      LightLambda_MakeRun14$b15
    );

    $.Method({Static:true , Public:false}, "MakeRun15", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13", "T14", "TRet"
        ]), 
      LightLambda_MakeRun15$b16
    );

    $.Method({Static:true , Public:false}, "MakeRun2", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0", "T1", "TRet"]), 
      LightLambda_MakeRun2$b3
    );

    $.Method({Static:true , Public:false}, "MakeRun3", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0", "T1", "T2", "TRet"]), 
      LightLambda_MakeRun3$b4
    );

    $.Method({Static:true , Public:false}, "MakeRun4", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ]), 
      LightLambda_MakeRun4$b5
    );

    $.Method({Static:true , Public:false}, "MakeRun5", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ]), 
      LightLambda_MakeRun5$b6
    );

    $.Method({Static:true , Public:false}, "MakeRun6", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ]), 
      LightLambda_MakeRun6$b7
    );

    $.Method({Static:true , Public:false}, "MakeRun7", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ]), 
      LightLambda_MakeRun7$b8
    );

    $.Method({Static:true , Public:false}, "MakeRun8", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ]), 
      LightLambda_MakeRun8$b9
    );

    $.Method({Static:true , Public:false}, "MakeRun9", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ]), 
      LightLambda_MakeRun9$b10
    );

    $.Method({Static:true , Public:false}, "MakeRunDelegateCtor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Func`2", [$.Type, $asm01.TypeRef("System.Delegate")]), [$asm01.TypeRef("System.Type")]), 
      LightLambda_MakeRunDelegateCtor
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid0", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type]), 
      LightLambda_MakeRunVoid0
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid1", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0"]), 
      LightLambda_MakeRunVoid1$b1
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid10", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9"
        ]), 
      LightLambda_MakeRunVoid10$b10
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid11", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10"
        ]), 
      LightLambda_MakeRunVoid11$b11
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid12", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11"
        ]), 
      LightLambda_MakeRunVoid12$b12
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid13", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12"
        ]), 
      LightLambda_MakeRunVoid13$b13
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid14", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13"
        ]), 
      LightLambda_MakeRunVoid14$b14
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid15", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13", "T14"
        ]), 
      LightLambda_MakeRunVoid15$b15
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid2", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0", "T1"]), 
      LightLambda_MakeRunVoid2$b2
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid3", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0", "T1", "T2"]), 
      LightLambda_MakeRunVoid3$b3
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid4", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], ["T0", "T1", "T2", "T3"]), 
      LightLambda_MakeRunVoid4$b4
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid5", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ]), 
      LightLambda_MakeRunVoid5$b5
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid6", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ]), 
      LightLambda_MakeRunVoid6$b6
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid7", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ]), 
      LightLambda_MakeRunVoid7$b7
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid8", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ]), 
      LightLambda_MakeRunVoid8$b8
    );

    $.Method({Static:true , Public:false}, "MakeRunVoid9", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Type], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ]), 
      LightLambda_MakeRunVoid9$b9
    );

    $.Method({Static:false, Public:false}, "Run0", 
      new JSIL.MethodSignature("!!0", null, ["TRet"]), 
      LightLambda_Run0$b1
    );

    $.Method({Static:false, Public:false}, "Run1", 
      new JSIL.MethodSignature("!!1", ["!!0"], ["T0", "TRet"]), 
      LightLambda_Run1$b2
    );

    $.Method({Static:false, Public:false}, "Run10", 
      new JSIL.MethodSignature("!!10", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "TRet"
        ]), 
      LightLambda_Run10$b11
    );

    $.Method({Static:false, Public:false}, "Run11", 
      new JSIL.MethodSignature("!!11", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "TRet"
        ]), 
      LightLambda_Run11$b12
    );

    $.Method({Static:false, Public:false}, "Run12", 
      new JSIL.MethodSignature("!!12", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "TRet"
        ]), 
      LightLambda_Run12$b13
    );

    $.Method({Static:false, Public:false}, "Run13", 
      new JSIL.MethodSignature("!!13", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11", 
          "!!12"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "TRet"
        ]), 
      LightLambda_Run13$b14
    );

    $.Method({Static:false, Public:false}, "Run14", 
      new JSIL.MethodSignature("!!14", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11", 
          "!!12", "!!13"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13", "TRet"
        ]), 
      LightLambda_Run14$b15
    );

    $.Method({Static:false, Public:false}, "Run15", 
      new JSIL.MethodSignature("!!15", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11", 
          "!!12", "!!13", 
          "!!14"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13", "T14", "TRet"
        ]), 
      LightLambda_Run15$b16
    );

    $.Method({Static:false, Public:false}, "Run2", 
      new JSIL.MethodSignature("!!2", ["!!0", "!!1"], ["T0", "T1", "TRet"]), 
      LightLambda_Run2$b3
    );

    $.Method({Static:false, Public:false}, "Run3", 
      new JSIL.MethodSignature("!!3", [
          "!!0", "!!1", 
          "!!2"
        ], ["T0", "T1", "T2", "TRet"]), 
      LightLambda_Run3$b4
    );

    $.Method({Static:false, Public:false}, "Run4", 
      new JSIL.MethodSignature("!!4", [
          "!!0", "!!1", 
          "!!2", "!!3"
        ], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ]), 
      LightLambda_Run4$b5
    );

    $.Method({Static:false, Public:false}, "Run5", 
      new JSIL.MethodSignature("!!5", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ]), 
      LightLambda_Run5$b6
    );

    $.Method({Static:false, Public:false}, "Run6", 
      new JSIL.MethodSignature("!!6", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ]), 
      LightLambda_Run6$b7
    );

    $.Method({Static:false, Public:false}, "Run7", 
      new JSIL.MethodSignature("!!7", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ]), 
      LightLambda_Run7$b8
    );

    $.Method({Static:false, Public:false}, "Run8", 
      new JSIL.MethodSignature("!!8", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ]), 
      LightLambda_Run8$b9
    );

    $.Method({Static:false, Public:false}, "Run9", 
      new JSIL.MethodSignature("!!9", [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ]), 
      LightLambda_Run9$b10
    );

    $.Method({Static:false, Public:false}, "RunVoid0", 
      JSIL.MethodSignature.Void, 
      LightLambda_RunVoid0
    );

    $.Method({Static:false, Public:false}, "RunVoid1", 
      new JSIL.MethodSignature(null, ["!!0"], ["T0"]), 
      LightLambda_RunVoid1$b1
    );

    $.Method({Static:false, Public:false}, "RunVoid10", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9"
        ]), 
      LightLambda_RunVoid10$b10
    );

    $.Method({Static:false, Public:false}, "RunVoid11", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10"
        ]), 
      LightLambda_RunVoid11$b11
    );

    $.Method({Static:false, Public:false}, "RunVoid12", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11"
        ]), 
      LightLambda_RunVoid12$b12
    );

    $.Method({Static:false, Public:false}, "RunVoid13", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11", 
          "!!12"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12"
        ]), 
      LightLambda_RunVoid13$b13
    );

    $.Method({Static:false, Public:false}, "RunVoid14", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11", 
          "!!12", "!!13"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13"
        ]), 
      LightLambda_RunVoid14$b14
    );

    $.Method({Static:false, Public:false}, "RunVoid15", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8", "!!9", 
          "!!10", "!!11", 
          "!!12", "!!13", 
          "!!14"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "T10", "T11", 
          "T12", "T13", "T14"
        ]), 
      LightLambda_RunVoid15$b15
    );

    $.Method({Static:false, Public:false}, "RunVoid2", 
      new JSIL.MethodSignature(null, ["!!0", "!!1"], ["T0", "T1"]), 
      LightLambda_RunVoid2$b2
    );

    $.Method({Static:false, Public:false}, "RunVoid3", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2"
        ], ["T0", "T1", "T2"]), 
      LightLambda_RunVoid3$b3
    );

    $.Method({Static:false, Public:false}, "RunVoid4", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3"
        ], ["T0", "T1", "T2", "T3"]), 
      LightLambda_RunVoid4$b4
    );

    $.Method({Static:false, Public:false}, "RunVoid5", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ]), 
      LightLambda_RunVoid5$b5
    );

    $.Method({Static:false, Public:false}, "RunVoid6", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ]), 
      LightLambda_RunVoid6$b6
    );

    $.Method({Static:false, Public:false}, "RunVoid7", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ]), 
      LightLambda_RunVoid7$b7
    );

    $.Method({Static:false, Public:false}, "RunVoid8", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ]), 
      LightLambda_RunVoid8$b8
    );

    $.Method({Static:false, Public:false}, "RunVoid9", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!1", 
          "!!2", "!!3", 
          "!!4", "!!5", 
          "!!6", "!!7", 
          "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ]), 
      LightLambda_RunVoid9$b9
    );

    $.Method({Static:false, Public:false}, "RunVoidRef2", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!1"])], ["T0", "T1"]), 
      LightLambda_RunVoidRef2$b2
    );

    $.Method({Static:false, Public:false}, "TryGetCompiled", 
      JSIL.MethodSignature.Return($.Boolean), 
      LightLambda_TryGetCompiled
    );

    $.Constant({Static:true , Public:false}, "_compiled", null); 
    $.Constant({Static:true , Public:false}, "MaxParameters", 16); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_closure", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_interpreter", $asm00.TypeRef("Microsoft.Scripting.Interpreter.Interpreter")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_runCache", $asm00.TypeRef("Microsoft.Scripting.Utils.CacheDict`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Func`2", [$.Type, $asm01.TypeRef("System.Delegate")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateCreator", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LightDelegateCreator")); 
    $.Field({Static:false, Public:false}, "_compilationThreshold", $.Int32); 
    function LightLambda__cctor () {
      $thisType._runCache = new ($T00())(100);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      LightLambda__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LightLambda+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightLambda)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$lMakeRunDelegateCtor$gb__1 (lambda) {
    return $T01().CreateDelegate(this.targetMethod, this.delegateType, lambda);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LightLambda+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$lMakeRunDelegateCtor$gb__1", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LightLambda")]), 
      $l$gc__DisplayClass2_$lMakeRunDelegateCtor$gb__1
    );

    $.Field({Static:false, Public:true }, "targetMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:true }, "delegateType", $asm01.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Interpreter.LocalVariable */ 

(function LocalVariable$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.IndexExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };

  function LocalVariable__ctor (index, closure, boxed) {
    this.Index = (index | 0);
    this._flags = ((
      closure
         ? 2
         : 0)
     | 0) | ((
      boxed
         ? 1
         : 0)
     | 0);
  };

  function LocalVariable_get_InClosure () {
    return (((this._flags | 0) & 2) !== 0);
  };

  function LocalVariable_get_InClosureOrBoxed () {
    return (this.get_InClosure() | this.get_IsBoxed());
  };

  function LocalVariable_get_IsBoxed () {
    return (((this._flags | 0) & 1) !== 0);
  };

  function LocalVariable_LoadFromArray (frameData, closure) {
    var result = $S00().CallStatic($T02(), "ArrayAccess", null, 
      (
        this.get_InClosure()
           ? closure
           : frameData)
      , 
      JSIL.Array.New($T02(), [$T02().Constant(this.Index)])
    );
    return (
      this.get_IsBoxed()
         ? $T02().Convert(result, $T03().__Type__)
         : result)
    ;
  };

  function LocalVariable_set_IsBoxed (value) {
    if (value) {
      this._flags = (this._flags | 0) | 1;
    } else {
      this._flags = (this._flags | 0) & -2;
    }
  };

  function LocalVariable_toString () {
    return $T04().Format(
      "{0}: {1} {2}", 
      this.Index, 
      (
        this.get_IsBoxed()
           ? "boxed"
           : null)
      , 
      (
        this.get_InClosure()
           ? "in closure"
           : null)

    );
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LocalVariable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Boolean
        ]), 
      LocalVariable__ctor
    );

    $.Method({Static:false, Public:true }, "get_InClosure", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalVariable_get_InClosure
    );

    $.Method({Static:false, Public:true }, "get_InClosureOrBoxed", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalVariable_get_InClosureOrBoxed
    );

    $.Method({Static:false, Public:true }, "get_IsBoxed", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalVariable_get_IsBoxed
    );

    $.Method({Static:false, Public:false}, "LoadFromArray", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LocalVariable_LoadFromArray
    );

    $.Method({Static:false, Public:true }, "set_IsBoxed", 
      JSIL.MethodSignature.Action($.Boolean), 
      LocalVariable_set_IsBoxed
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LocalVariable_toString
    );

    $.Constant({Static:true , Public:false}, "IsBoxedFlag", 1); 
    $.Constant({Static:true , Public:false}, "InClosureFlag", 2); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Index", $.Int32); 
    $.Field({Static:false, Public:false}, "_flags", $.Int32); 
    $.Property({Static:false, Public:true }, "IsBoxed", $.Boolean);

    $.Property({Static:false, Public:true }, "InClosure", $.Boolean);

    $.Property({Static:false, Public:true }, "InClosureOrBoxed", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Scripting.Interpreter.LocalDefinition */ 

(function LocalDefinition$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function LocalDefinition__ctor (localIndex, parameter) {
    this._index = (localIndex | 0);
    this._parameter = parameter;
  };

  function LocalDefinition_Object_Equals (obj) {
    if ($thisType.$Is(obj)) {
      var other = $thisType.$Cast(obj);
      var result = ((other.get_Index() | 0) === (this.get_Index() | 0)) && 
      (other.get_Parameter() === this.get_Parameter());
    } else {
      result = false;
    }
    return result;
  };

  function LocalDefinition_get_Index () {
    return this._index;
  };

  function LocalDefinition_get_Parameter () {
    return this._parameter;
  };

  function LocalDefinition_GetHashCode () {
    if (this._parameter === null) {
      var result = 0;
    } else {
      result = ((this._parameter).GetHashCode() | 0) ^ ((this._index).GetHashCode() | 0);
    }
    return result;
  };

  function LocalDefinition_op_Equality (self, other) {
    return (((self.get_Index() | 0) === (other.get_Index() | 0)) && (self.get_Parameter() === other.get_Parameter()));
  };

  function LocalDefinition_op_Inequality (self, other) {
    return (((self.get_Index() | 0) !== (other.get_Index() | 0)) || (self.get_Parameter() !== other.get_Parameter()));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Interpreter.LocalDefinition", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LocalDefinition__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      LocalDefinition_Object_Equals
    );

    $.Method({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32), 
      LocalDefinition_get_Index
    );

    $.Method({Static:false, Public:true }, "get_Parameter", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.ParameterExpression")), 
      LocalDefinition_get_Parameter
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      LocalDefinition_GetHashCode
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      LocalDefinition_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      LocalDefinition_op_Inequality
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameter", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Property({Static:false, Public:true }, "Index", $.Int32);

    $.Property({Static:false, Public:true }, "Parameter", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LocalVariables */ 

(function LocalVariables$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariables_VariableScope))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariable))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariable)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariables_VariableScope)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Interpreter.LocalVariables_VariableScope))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariables_VariableScope)))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariables_VariableScope))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalDefinition)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables+VariableScope")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables+VariableScope")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariables_VariableScope)).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function LocalVariables__ctor () {
    this._variables = $S00().Construct();
  };

  function LocalVariables_AddClosureVariable (variable) {
    if (this._closureVariables === null) {
      this._closureVariables = $S01().Construct();
    }
    var result = new ($T03())((this._closureVariables).get_Count(), true, false);
    (this._closureVariables).Add(variable, result);
    return result;
  };

  function LocalVariables_Box (variable, instructions) {
    var scope = $T00().prototype.get_Item.call(this._variables, variable);
    var local = scope.Variable;
    ($T00().prototype.get_Item.call(this._variables, variable).Variable).set_IsBoxed(true);
    var curChild = 0;

    for (var i = (scope.Start | 0); (i < (scope.Stop | 0)) && (i < (instructions.get_Count() | 0)); i = ((i + 1) | 0)) {
      if (!((scope.ChildScopes === null) || (((scope.ChildScopes).get_Item(curChild).Start | 0) !== i))) {
        var child = (scope.ChildScopes).get_Item(curChild);
        i = (child.Stop | 0);
        curChild = ((curChild + 1) | 0);
      } else {
        instructions.SwitchToBoxed(local.Index, i);
      }
    }
  };

  function LocalVariables_ContainsVariable (variable) {
    return $T00().prototype.ContainsKey.call(this._variables, variable);
  };

  function LocalVariables_CopyLocals () {
    var res = $S02().Construct((this._variables).get_Count());
    var enumerator = $T00().prototype.GetEnumerator.call(this._variables);
    try {

      while ($IM00().Call(enumerator, null)) {
        var keyValue = $IM01().Call(enumerator, null).MemberwiseClone();
        res.set_Item(
          keyValue.get_Key(), 
          keyValue.get_Value().Variable
        );
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
    return res;
  };

  function LocalVariables_DefineLocal (variable, start) {
    var $temp00;
    var existing = new JSIL.BoxedVariable(null);
    $T0C().RequiresNotNull(variable, "variable");
    $T0C().Requires((start | 0) >= 0, "start", "start must be positive");
    var result = new ($T03())(($temp00 = (this._localCount | 0), 
        this._localCount = (((this._localCount | 0) + 1) | 0), 
        $temp00), false, false);
    this._maxLocalCount = ($T0D().Max(this._localCount, this._maxLocalCount) | 0);
    if ($T00().prototype.TryGetValue.call(this._variables, variable, /* ref */ existing)) {
      var newScope = new ($T05())(result, start, existing.get());
      if (existing.get().ChildScopes === null) {
        existing.get().ChildScopes = $S03().Construct();
      }
      (existing.get().ChildScopes).Add(newScope);
    } else {
      newScope = new ($T05())(result, start, null);
    }
    $T00().prototype.set_Item.call(this._variables, variable, newScope);
    return new ($T0E())(result.Index, variable);
  };

  function LocalVariables_get_ClosureVariables () {
    return this._closureVariables;
  };

  function LocalVariables_get_LocalCount () {
    return this._maxLocalCount;
  };

  function LocalVariables_GetLocalIndex ($var) {
    var loc = new JSIL.BoxedVariable(null);
    return (
      $T00().prototype.TryGetValue.call(this._variables, $var, /* ref */ loc)
         ? loc.get().Variable.Index
         : -1)
    ;
  };

  function LocalVariables_GetOrDefineLocal ($var) {
    var index = (this.GetLocalIndex($var) | 0);
    if (index === -1) {
      var result = ((this.DefineLocal($var, 0)).get_Index() | 0);
    } else {
      result = index;
    }
    return result;
  };

  function LocalVariables_TryGetLocalOrClosure ($var, /* ref */ local) {
    var scope = new JSIL.BoxedVariable(null);
    if ($T00().prototype.TryGetValue.call(this._variables, $var, /* ref */ scope)) {
      local.set(scope.get().Variable);
      var result = true;
    } else if (!((this._closureVariables === null) || !(this._closureVariables).TryGetValue($var, /* ref */ local))) {
      result = true;
    } else {
      local.set(null);
      result = false;
    }
    return result;
  };

  function LocalVariables_UndefineLocal (definition, end) {
    var scope = $T00().prototype.get_Item.call(this._variables, definition.get_Parameter());
    scope.Stop = (end | 0);
    if (scope.Parent !== null) {
      $T00().prototype.set_Item.call(this._variables, definition.get_Parameter(), scope.Parent);
    } else {
      $T00().prototype.Remove.call(this._variables, definition.get_Parameter());
    }
    this._localCount = (((this._localCount | 0) - 1) | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LocalVariables", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      LocalVariables__ctor
    );

    $.Method({Static:false, Public:false}, "AddClosureVariable", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LocalVariables_AddClosureVariable
    );

    $.Method({Static:false, Public:false}, "Box", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.InstructionList")]), 
      LocalVariables_Box
    );

    $.Method({Static:false, Public:false}, "ContainsVariable", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LocalVariables_ContainsVariable
    );

    $.Method({Static:false, Public:false}, "CopyLocals", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])), 
      LocalVariables_CopyLocals
    );

    $.Method({Static:false, Public:true }, "DefineLocal", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalDefinition"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]), 
      LocalVariables_DefineLocal
    );

    $.Method({Static:false, Public:false}, "get_ClosureVariables", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])), 
      LocalVariables_get_ClosureVariables
    );

    $.Method({Static:false, Public:true }, "get_LocalCount", 
      JSIL.MethodSignature.Return($.Int32), 
      LocalVariables_get_LocalCount
    );

    $.Method({Static:false, Public:true }, "GetLocalIndex", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LocalVariables_GetLocalIndex
    );

    $.Method({Static:false, Public:true }, "GetOrDefineLocal", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LocalVariables_GetOrDefineLocal
    );

    $.Method({Static:false, Public:true }, "TryGetLocalOrClosure", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])]), 
      LocalVariables_TryGetLocalOrClosure
    );

    $.Method({Static:false, Public:true }, "UndefineLocal", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalDefinition"), $.Int32]), 
      LocalVariables_UndefineLocal
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_variables", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariables+VariableScope")])); 
    $.Field({Static:false, Public:false}, "_closureVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])); 
    $.Field({Static:false, Public:false}, "_localCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_maxLocalCount", $.Int32); 
    $.Property({Static:false, Public:true }, "LocalCount", $.Int32);

    $.Property({Static:false, Public:false}, "ClosureVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LocalVariables+VariableScope */ 

(function VariableScope$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function VariableScope__ctor (variable, start, parent) {
    this.Stop = 2147483647;
    this.Variable = variable;
    this.Start = (start | 0);
    this.Parent = parent;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.LocalVariables+VariableScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable"), $.Int32, 
          $.Type
        ]), 
      VariableScope__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Start", $.Int32); 
    $.Field({Static:false, Public:true }, "Stop", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Variable", $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Parent", $.Type); 
    $.Field({Static:false, Public:true }, "ChildScopes", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Type])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.LoopCompiler */ 

(function LoopCompiler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Linq.Expressions.LoopExpression)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2.Of($asm04.System.Linq.Expressions.LabelTarget, $asm00.Microsoft.Scripting.Interpreter.BranchLabel))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LocalVariable))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionVisitor)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InterpretedFrame)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LoopCompiler_LoopVariable))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LocalVariable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LoopCompiler_LoopVariable))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm04.System.Linq.Expressions.ParameterExpression, $asm00.Microsoft.Scripting.Interpreter.LoopCompiler_LoopVariable))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.Utils)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.ExpressionAccess)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression$b1.Of($asm01.System.Func$b4.Of(
          System.Array.Of($asm01.System.Object), System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)), 
          $asm00.Microsoft.Scripting.Interpreter.InterpretedFrame, $asm01.System.Int32
      )))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Func$b4.Of(
        System.Array.Of($asm01.System.Object), System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)), 
        $asm00.Microsoft.Scripting.Interpreter.InterpretedFrame, $asm01.System.Int32
    ))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.System.Collections.Generic.HashSet$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.System.Linq.Expressions.BinaryExpression)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm04.System.Linq.Expressions.BlockExpression)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm04.System.Linq.Expressions.CatchBlock)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm04.System.Linq.Expressions.GotoExpression)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.BranchLabel)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm04.System.Linq.Expressions.LabelTarget)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm04.System.Linq.Expressions.LambdaExpression)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.System.Linq.Expressions.UnaryExpression)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LoopCompiler_LoopVariable)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LoopCompiler+LoopVariable")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm04.TypeRef("System.Linq.Expressions.Expression")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Func`4", [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Object")]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$asm01.TypeRef("System.Object")])]), 
          $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $asm01.TypeRef("System.Int32")
        ]), null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression")
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
        $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
      ]))) ();
  };

  function LoopCompiler__ctor (loop, labelMapping, locals, closureVariables, loopStartInstructionIndex, loopEndInstructionIndex) {
    $T04().prototype._ctor.call(this);
    this._loop = loop;
    this._outerVariables = locals;
    this._closureVariables = closureVariables;
    this._frameDataVar = $T05().Parameter($T06().__Type__);
    this._frameClosureVar = $T05().Parameter($T07().__Type__);
    this._frameVar = $T05().Parameter($T08().__Type__);
    this._loopVariables = $S00().Construct();
    this._returnLabel = $S01().CallStatic($T05(), "Label", null, $T03().__Type__);
    this._labelMapping = labelMapping;
    this._loopStartInstructionIndex = (loopStartInstructionIndex | 0);
    this._loopEndInstructionIndex = (loopEndInstructionIndex | 0);
  };

  function LoopCompiler_AddTemp (variable) {
    if (this._temps === null) {
      this._temps = $S02().Construct();
    }
    (this._temps).Add(variable);
    return variable;
  };

  function LoopCompiler_CreateDelegate () {
    var local = new JSIL.BoxedVariable(null);
    var loop = $T00().$Cast($S03().CallVirtual("Visit", null, this, this._loop));
    var body = $S04().Construct();
    var finallyClause = $S04().Construct();
    var enumerator = $T09().prototype.GetEnumerator.call(this._loopVariables);

    while ($T0E().prototype.MoveNext.call(enumerator)) {
      var variable = $T0E().prototype.get_Current.call(enumerator).MemberwiseClone();
      if (!(this._outerVariables).TryGetValue(variable.get_Key(), /* ref */ local)) {
        local.set((this._closureVariables).get_Item(variable.get_Key()));
      }
      var elemRef = (local.get()).LoadFromArray(this._frameDataVar, this._frameClosureVar);
      if ((local.get()).get_InClosureOrBoxed()) {
        var box = variable.get_Value().BoxStorage;
        body.Add($T05().Assign(box, elemRef));
        this.AddTemp(box);
      } else {
        body.Add($T05().Assign(
            variable.get_Key(), 
            $T10().Convert(elemRef, (variable.get_Key()).get_Type())
          ));
        if ($T11().$Cast(variable.get_Value().Access & $T11().Write) !== $T11().None) {
          finallyClause.Add($T05().Assign(elemRef, $T10().Box(variable.get_Key())));
        }
        this.AddTemp(variable.get_Key());
      }
    }
    if ((finallyClause.get_Count() | 0) > 0) {
      body.Add($T05().TryFinally(loop, $S05().CallStatic($T05(), "Block", null, finallyClause)));
    } else {
      body.Add(loop);
    }
    body.Add($S06().CallStatic($T05(), "Label", null, this._returnLabel, $T05().Constant((((this._loopEndInstructionIndex | 0) - (this._loopStartInstructionIndex | 0)) | 0))));
    var lambda = $S07().CallStatic($T05(), "Lambda$b1", [$asm01.System.Func$b4.Of(
          System.Array.Of($asm01.System.Object), System.Array.Of($asm04.System.Runtime.CompilerServices.StrongBox$b1.Of($asm01.System.Object)), 
          $asm00.Microsoft.Scripting.Interpreter.InterpretedFrame, $asm01.System.Int32
      )], (
        (this._temps !== null)
           ? $S08().CallStatic($T05(), "Block", null, (this._temps).ToReadOnlyCollection(), body)
           : $S05().CallStatic($T05(), "Block", null, body))
      , JSIL.Array.New($T0A(), [this._frameDataVar, this._frameClosureVar, this._frameVar]));
    return $S09().CallVirtual("Compile", null, lambda);
  };

  function LoopCompiler_EnterVariableScope (variables) {
    if (this._loopLocals === null) {
      this._loopLocals = $S0A().Construct(variables);
      var result = null;
    } else {
      var prevLocals = $S0A().Construct(this._loopLocals);
      (this._loopLocals).UnionWith(variables);
      result = prevLocals;
    }
    return result;
  };

  function LoopCompiler_ExitVariableScope (prevLocals) {
    this._loopLocals = prevLocals;
  };

  function LoopCompiler_VisitBinary (node) {
    if (node.get_CanReduce()) {
      var result = $S03().CallVirtual("Visit", null, this, node.Reduce());
    } else {
      var param = $T0A().$As(node.get_Left());
      if (!((param === null) || (node.get_NodeType() !== $T17().Assign))) {
        var left = this.VisitVariable(param, $T11().Write);
        var right = $S03().CallVirtual("Visit", null, this, node.get_Right());
        if ($T18().op_Inequality(
            left.get_Type(), 
            param.get_Type()
          )) {
          if (right.get_NodeType() !== $T17().Parameter) {
            var rightVar = this.AddTemp($T05().Parameter(right.get_Type()));
            right = $T05().Assign(rightVar, right);
          } else {
            rightVar = right;
          }
          result = $S0B().CallStatic($T05(), "Block", null, $T10().Update(node, left, $T05().Convert(right, left.get_Type())), rightVar);
        } else {
          result = $T10().Update(node, left, right);
        }
      } else {
        result = $T04().prototype.VisitBinary.call(this, node);
      }
    }
    return result;
  };

  function LoopCompiler_VisitBlock (node) {
    var variables = node.get_Variables();
    var prevLocals = this.EnterVariableScope(variables);
    var res = $T04().prototype.VisitBlock.call(this, node);
    this.ExitVariableScope(prevLocals);
    return res;
  };

  function LoopCompiler_VisitCatchBlock (node) {
    if (node.get_Variable() !== null) {
      var prevLocals = this.EnterVariableScope($T14().$Cast(JSIL.Array.New($T0A(), [node.get_Variable()])));
      var res = $T04().prototype.VisitCatchBlock.call(this, node);
      this.ExitVariableScope(prevLocals);
      var result = res;
    } else {
      result = $T04().prototype.VisitCatchBlock.call(this, node);
    }
    return result;
  };

  function LoopCompiler_VisitExtension (node) {
    if (node.get_CanReduce()) {
      var result = $S03().CallVirtual("Visit", null, this, node.Reduce());
    } else {
      result = $T04().prototype.VisitExtension.call(this, node);
    }
    return result;
  };

  function LoopCompiler_VisitGoto (node) {
    var label = new JSIL.BoxedVariable(null);
    var target = node.get_Target();
    var value = $S03().CallVirtual("Visit", null, this, node.get_Value());
    if (!$T01().prototype.TryGetValue.call(this._labelMapping, target, /* ref */ label)) {
      var result = node.Update(target, value);
    } else if (!((((label.get()).get_TargetIndex() | 0) < (this._loopStartInstructionIndex | 0)) || (((label.get()).get_TargetIndex() | 0) >= (this._loopEndInstructionIndex | 0)))) {
      result = node.Update(target, value);
    } else {
      result = $T05().Return(
        this._returnLabel, 
        (
          (value !== null)
             ? $S0C().CallStatic($T05(), "Call", null, 
              this._frameVar, 
              $T08().get_GotoMethod(), 
              $T05().Constant((label.get()).get_LabelIndex()), 
              $T10().Box(value)
            )
             : $S0D().CallStatic($T05(), "Call", null, 
              this._frameVar, 
              $T08().get_VoidGotoMethod(), 
              JSIL.Array.New($T05(), [$T05().Constant((label.get()).get_LabelIndex())])
            ))
        , 
        node.get_Type()
      );
    }
    return result;
  };

  function LoopCompiler_VisitLambda$b1 (T, node) {
    var prevLocals = this.EnterVariableScope(node.get_Parameters());
    try {
      var result = $T04().prototype.VisitLambda$b1(T).call(this, node);
    } finally {
      this.ExitVariableScope(prevLocals);
    }
    return result;
  };

  function LoopCompiler_VisitParameter (node) {
    return this.VisitVariable(node, $T11().Read);
  };

  function LoopCompiler_VisitUnary (node) {
    if (node.get_CanReduce()) {
      var result = $S03().CallVirtual("Visit", null, this, node.Reduce());
    } else {
      result = $T04().prototype.VisitUnary.call(this, node);
    }
    return result;
  };

  function LoopCompiler_VisitVariable (node, access) {
    var existing = new JSIL.BoxedVariable(new ($T21())());
    var loc = new JSIL.BoxedVariable(null);
    if ((this._loopLocals).Contains(node)) {
      var result = node;
    } else {
      if ((this._loopVariables).TryGetValue(node, /* ref */ existing)) {
        var box = existing.get().BoxStorage;
        (this._loopVariables).set_Item(node, new ($T21())($T11().$Cast(existing.get().Access | access), box));
      } else {
        if (!(this._outerVariables).TryGetValue(node, /* ref */ loc) && ((this._closureVariables === null) || 
            !(this._closureVariables).TryGetValue(node, /* ref */ loc))) {
          result = node;
          return result;
        }
        box = (
          (loc.get()).get_InClosureOrBoxed()
             ? $T05().Parameter($T22().__Type__, node.get_Name())
             : null)
        ;
        (this._loopVariables).set_Item(node, new ($T21())(access, box));
      }
      if (box !== null) {
        if ($T11().$Cast(access & $T11().Write) !== $T11().None) {
          result = $T23().Unbox(box);
        } else {
          result = $T05().Convert(
            $T23().Unbox(box), 
            node.get_Type()
          );
        }
      } else {
        result = node;
      }
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "Microsoft.Scripting.Interpreter.LoopCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.LoopExpression"), $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")]), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")]), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")]), 
          $.Int32, $.Int32
        ]), 
      LoopCompiler__ctor
    );

    $.Method({Static:false, Public:false}, "AddTemp", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LoopCompiler_AddTemp
    );

    $.Method({Static:false, Public:false}, "CreateDelegate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Func`4", [
            $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.StrongBox`1", [$.Object])]), 
            $asm00.TypeRef("Microsoft.Scripting.Interpreter.InterpretedFrame"), $.Int32
          ])), 
      LoopCompiler_CreateDelegate
    );

    $.Method({Static:false, Public:false}, "EnterVariableScope", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])]), 
      LoopCompiler_EnterVariableScope
    );

    $.Method({Static:false, Public:false}, "ExitVariableScope", 
      JSIL.MethodSignature.Action($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])), 
      LoopCompiler_ExitVariableScope
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression")]), 
      LoopCompiler_VisitBinary
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.BlockExpression")]), 
      LoopCompiler_VisitBlock
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm04.TypeRef("System.Linq.Expressions.CatchBlock")]), 
      LoopCompiler_VisitCatchBlock
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      LoopCompiler_VisitExtension
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.GotoExpression")]), 
      LoopCompiler_VisitGoto
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"]), 
      LoopCompiler_VisitLambda$b1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LoopCompiler_VisitParameter
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.UnaryExpression")]), 
      LoopCompiler_VisitUnary
    );

    $.Method({Static:false, Public:false}, "VisitVariable", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Ast.ExpressionAccess")]), 
      LoopCompiler_VisitVariable
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_frameDataVar", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_frameClosureVar", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_frameVar", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_returnLabel", $asm04.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_outerVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_closureVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LocalVariable")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_loop", $asm04.TypeRef("System.Linq.Expressions.LoopExpression")); 
    $.Field({Static:false, Public:false}, "_temps", $asm04.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_loopVariables", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.LoopCompiler+LoopVariable")])); 
    $.Field({Static:false, Public:false}, "_loopLocals", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_labelMapping", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$asm04.TypeRef("System.Linq.Expressions.LabelTarget"), $asm00.TypeRef("Microsoft.Scripting.Interpreter.BranchLabel")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_loopStartInstructionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_loopEndInstructionIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Scripting.Interpreter.LoopCompiler+LoopVariable */ 

(function LoopVariable$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.ExpressionAccess)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function LoopVariable__ctor (access, box) {
    this.Access = access;
    this.BoxStorage = box;
  };

  function LoopVariable_toString () {
    return JSIL.ConcatString((this.Access).toString(), " ", this.BoxStorage);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Interpreter.LoopCompiler+LoopVariable", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Ast.ExpressionAccess"), $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
      LoopVariable__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      LoopVariable_toString
    );

    $.Field({Static:false, Public:true }, "Access", $asm00.TypeRef("Microsoft.Scripting.Ast.ExpressionAccess")); 
    $.Field({Static:false, Public:true }, "BoxStorage", $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Interpreter.RuntimeVariables */ 

(function RuntimeVariables$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm04.System.Runtime.CompilerServices.IStrongBox))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.IStrongBox)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.IStrongBox.get_Value)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.IStrongBox.set_Value)) ();
  };

  function RuntimeVariables__ctor (boxes) {
    this._boxes = boxes;
  };

  function RuntimeVariables_Create (boxes) {
    return new $thisType(boxes);
  };

  function RuntimeVariables_System_Runtime_CompilerServices_IRuntimeVariables_get_Count () {
    return this._boxes.length;
  };

  function RuntimeVariables_System_Runtime_CompilerServices_IRuntimeVariables_get_Item (index) {
    return $IM00().Call(this._boxes[index], null);
  };

  function RuntimeVariables_System_Runtime_CompilerServices_IRuntimeVariables_set_Item (index, value) {
    $IM01().Call(this._boxes[index], null, value);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Interpreter.RuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.IStrongBox")])), 
      RuntimeVariables__ctor
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.IStrongBox")])]), 
      RuntimeVariables_Create
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeVariables_System_Runtime_CompilerServices_IRuntimeVariables_get_Count
    )
      .Overrides($asm04.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "get_Count");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      RuntimeVariables_System_Runtime_CompilerServices_IRuntimeVariables_get_Item
    )
      .Overrides($asm04.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "get_Item");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      RuntimeVariables_System_Runtime_CompilerServices_IRuntimeVariables_set_Item
    )
      .Overrides($asm04.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), "set_Item");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxes", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Runtime.CompilerServices.IStrongBox")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.MultiRuntimeAwareAttribute */ 

(function MultiRuntimeAwareAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function MultiRuntimeAwareAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Scripting.MultiRuntimeAwareAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MultiRuntimeAwareAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Field]; });

})();

/* class Microsoft.Scripting.PerfTrack */ 

(function PerfTrack$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Scripting.PerfTrack_Categories, $asm01.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.IO.TextWriter)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ArrayUtils)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.Int32))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm00.Microsoft.Scripting.PerfTrack_Categories, $asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32)))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm00.Microsoft.Scripting.PerfTrack_Categories, $asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32)))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm00.Microsoft.Scripting.PerfTrack_Categories, $asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32)))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Int32))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.PerfTrack_Categories)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Double)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm00.Microsoft.Scripting.PerfTrack_Categories, $asm01.System.Int32))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm00.Microsoft.Scripting.PerfTrack_Categories, $asm01.System.Int32))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Scripting.DebugOptions)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Scripting.PerfTrack+Categories"), $asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $jsilcore.TypeRef("System.Array", ["!!1"])], ["TKey", "TValue"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.Object")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.String")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Scripting.PerfTrack+Categories"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")])]), null))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Int32")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function PerfTrack_AddHistograms$b1 (TKey, result, addend) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of(TKey, $asm01.System.Int32)).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of(TKey, $asm01.System.Int32)).get_Current;
    var $im02 = $asm01.System.Collections.Generic.IDictionary$b2.Of(TKey, $asm01.System.Int32).set_Item;
    var $im03 = $asm01.System.Collections.Generic.IDictionary$b2.Of(TKey, $asm01.System.Int32).TryGetValue;
    var value = new JSIL.BoxedVariable(0);
    var enumerator = $im00.Call(addend, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var entry = $im01.Call(enumerator, null).MemberwiseClone();
        $im02.Call(result, null, 
          JSIL.CloneParameter(TKey, entry.get_Key()), 
          (((entry.get_Value() | 0) + ((
              $im03.Call(result, null, JSIL.CloneParameter(TKey, entry.get_Key()), /* ref */ value)
                 ? value.get()
                 : 0)
             | 0)) | 0)
        );
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
  };

  function PerfTrack_DumpHistogram$b1 (TKey, histogram, output) {
    var $im00 = $asm01.System.Collections.Generic.IDictionary$b2.Of(TKey, $asm01.System.Int32).get_Keys;
    var $im01 = $asm01.System.Collections.Generic.IDictionary$b2.Of(TKey, $asm01.System.Int32).get_Values;
    var keys = $S01().CallStatic($T06(), "MakeArray$b1", [TKey], $im00.Call(histogram, null));
    var values = $S02().CallStatic($T06(), "MakeArray$b1", [$asm01.System.Int32], $im01.Call(histogram, null));
    $S03().CallStatic($T08(), "Sort$b2", [$asm01.System.Int32, TKey], values, keys);

    for (var i = 0; i < (keys.length | 0); i = ((i + 1) | 0)) {
      $S04().CallVirtual("WriteLine", null, output, "{0} {1}", JSIL.CloneParameter(TKey, keys[i]), values[i]);
    }
  };

  function PerfTrack_DumpStats (output) {
    if (($thisType.totalEvents | 0) !== 0) {
      output.WriteLine();
      $S05().CallVirtual("WriteLine", null, output, "---- Performance Details ----");
      output.WriteLine();
      var enumerator = $T0A().prototype.GetEnumerator.call($thisType._events);

      while ($T09().prototype.MoveNext.call(enumerator)) {
        var kvpCategories = $T09().prototype.get_Current.call(enumerator).MemberwiseClone();
        if (((kvpCategories.get_Value()).get_Count() | 0) > 0) {
          $S05().CallVirtual("WriteLine", null, output, JSIL.ConcatString("Category : ", kvpCategories.get_Key()));
          $thisType.DumpHistogram$b1($T0D())(kvpCategories.get_Value(), output);
          output.WriteLine();
        }
      }
      output.WriteLine();
      $S05().CallVirtual("WriteLine", null, output, "---- Performance Summary ----");
      output.WriteLine();
      var knownTimes = 0;
      var enumerator2 = $T00().prototype.GetEnumerator.call($thisType.summaryStats);

    $loop1: 
      while ($T10().prototype.MoveNext.call(enumerator2)) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 
              var kvp = $T10().prototype.get_Current.call(enumerator2).MemberwiseClone();
              switch ((kvp.get_Key()).valueOf()) {
                case 2: 
                  output.WriteLine(
                    "Total Exception ({0}) = {1}  (throwtime = ~{2} secs)", 
                    kvp.get_Key(), 
                    kvp.get_Value(), 
                    (+(kvp.get_Value()) * 2.5365656E-05)
                  );
                  knownTimes += +(kvp.get_Value()) * 2.5365656E-05;
                  break;

                case 3: 
                  $label0 = 1 /* goto IL_1F6 */ ;
                  continue $labelgroup0;

                case 4: 
                  $S04().CallVirtual("WriteLine", null, output, 
                    "Total field = {0} (time = ~{1} secs)", 
                    kvp.get_Value(), 
                    (+(kvp.get_Value()) * 1.8080093E-06)
                  );
                  knownTimes += +(kvp.get_Value()) * 1.8080093E-06;
                  break;

                case 5: 
                  $S04().CallVirtual("WriteLine", null, output, 
                    "Total calls = {0} (calltime = ~{1} secs)", 
                    kvp.get_Value(), 
                    (+(kvp.get_Value()) * 5.1442355E-06)
                  );
                  knownTimes += +(kvp.get_Value()) * 5.1442355E-06;
                  break;

                default: 
                  $label0 = 1 /* goto IL_1F6 */ ;
                  continue $labelgroup0;

              }
              continue $loop1;

            case 1: /* IL_1F6 */ 
              $S04().CallVirtual("WriteLine", null, output, 
                "Total {1} = {0}", 
                kvp.get_Value(), 
                kvp.get_Key()
              );

              break $labelgroup0;
          }
        }
      }
      output.WriteLine();
      $S06().CallVirtual("WriteLine", null, output, "Total Known Times: {0}", knownTimes);
    }
  };

  function PerfTrack_IncrementEntry$b1 (TKey, histogram, key) {
    var $im00 = $asm01.System.Collections.Generic.IDictionary$b2.Of(TKey, $asm01.System.Int32).TryGetValue;
    var $im01 = $asm01.System.Collections.Generic.IDictionary$b2.Of(TKey, $asm01.System.Int32).set_Item;
    var value = new JSIL.BoxedVariable(0);
    $im00.Call(histogram, null, JSIL.CloneParameter(TKey, key), /* ref */ value);
    $im01.Call(histogram, null, JSIL.CloneParameter(TKey, key), (((value.get() | 0) + 1) | 0));
  };

  function PerfTrack_MakeEventsDictionary () {
    var result = $S07().Construct();

    for (var i = 0; i <= 17; i = ((i + 1) | 0)) {
      result.set_Item($T0E().$Cast(i), $S08().Construct());
    }
    return result;
  };

  function PerfTrack_NoteEvent (category, key) {
    var v = new JSIL.BoxedVariable(0);
    var obj = null;
    var flag = new JSIL.BoxedVariable(false);
    if ($T14().get_TrackPerformance()) {
      var categoryEvents = $thisType._events.get_Item(category);
      $thisType.totalEvents = ((($thisType.totalEvents | 0) + 1) | 0);
      flag.set(false);
      try {
        $T15().Enter(obj = categoryEvents, /* ref */ flag);
        var name = key.toString();
        var ex = $T16().$As(key);
        if (ex !== null) {
          name = (ex.GetType()).toString();
        }
        if (!categoryEvents.TryGetValue(name, /* ref */ v)) {
          categoryEvents.set_Item(name, 1);
        } else {
          categoryEvents.set_Item(name, (((v.get() | 0) + 1) | 0));
        }
        if (!$thisType.summaryStats.TryGetValue(category, /* ref */ v)) {
          $thisType.summaryStats.set_Item(category, 1);
        } else {
          $thisType.summaryStats.set_Item(category, (((v.get() | 0) + 1) | 0));
        }
      } finally {
        if (flag.get()) {
          $T15().Exit(obj);
        }
      }
    }
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.PerfTrack", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "AddHistograms", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IDictionary`2", ["!!0", $.Int32]), $asm01.TypeRef("System.Collections.Generic.IDictionary`2", ["!!0", $.Int32])], ["TKey"]), 
      PerfTrack_AddHistograms$b1
    );

    $.Method({Static:true , Public:true }, "DumpHistogram", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IDictionary`2", ["!!0", $.Int32]), $asm01.TypeRef("System.IO.TextWriter")], ["TKey"]), 
      PerfTrack_DumpHistogram$b1
    );

    $.Method({Static:true , Public:true }, "DumpStats", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.IO.TextWriter")), 
      PerfTrack_DumpStats
    );

    $.Method({Static:true , Public:true }, "IncrementEntry", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IDictionary`2", ["!!0", $.Int32]), "!!0"], ["TKey"]), 
      PerfTrack_IncrementEntry$b1
    );

    $.Method({Static:true , Public:false}, "MakeEventsDictionary", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Scripting.PerfTrack+Categories"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])])), 
      PerfTrack_MakeEventsDictionary
    );

    $.Method({Static:true , Public:true }, "NoteEvent", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.PerfTrack+Categories"), $.Object]), 
      PerfTrack_NoteEvent
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:true , Public:false}, "totalEvents", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_events", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Scripting.PerfTrack+Categories"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "summaryStats", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm00.TypeRef("Microsoft.Scripting.PerfTrack+Categories"), $.Int32])); 
    function PerfTrack__cctor () {
      $thisType._events = $thisType.MakeEventsDictionary();
      $thisType.summaryStats = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PerfTrack__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Scripting.PerfTrack+Categories */ 

JSIL.MakeEnum(
  "Microsoft.Scripting.PerfTrack+Categories", false, {
    Temporary: 0, 
    ReflectedTypes: 1, 
    Exceptions: 2, 
    Properties: 3, 
    Fields: 4, 
    Methods: 5, 
    Compiler: 6, 
    DelegateCreate: 7, 
    DictInvoke: 8, 
    OperatorInvoke: 9, 
    OverAllocate: 10, 
    Rules: 11, 
    RuleEvaluation: 12, 
    Binding: 13, 
    BindingSlow: 14, 
    BindingFast: 15, 
    BindingTarget: 16, 
    Count: 17
  }, false
);

JSIL.DeclareNamespace("Microsoft.Scripting.Runtime");
/* class Microsoft.Scripting.Runtime.DynamicNull */ 

(function DynamicNull$Members () {
  var $, $thisType;
  function DynamicNull__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Runtime.DynamicNull", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      DynamicNull__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Runtime.ExceptionHelpers */ 

(function ExceptionHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  function ExceptionHelpers_UpdateForRethrow (rethrow) {
    return rethrow;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Runtime.ExceptionHelpers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "UpdateForRethrow", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Exception")]), 
      ExceptionHelpers_UpdateForRethrow
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers */ 

(function ScriptingRuntimeHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.CompilerHelpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IDictionary)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Reflection.EventInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Int64)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.UInt64)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.DateTime)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Object))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.String))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Object))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Object))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Scripting.Error)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CachedBindingInfo)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.MissingMemberException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.Microsoft.Scripting.ArgumentTypeException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.String")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.MissingMemberException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.ArgumentTypeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.ICollection.get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IDictionary.Contains)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Object).GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Object).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ScriptingRuntimeHelpers_BooleanToObject (value) {
    return (
      value
         ? $thisType.True
         : $thisType.False)
    ;
  };

  function ScriptingRuntimeHelpers_CannotConvertError (toType, value) {
    return $thisType.SimpleTypeError($T03().Format(
        "Cannot convert {0}({1}) to {2}", 
        ($T05().GetType(value)).get_Name(), 
        value, 
        toType.get_Name()
      ));
  };

  function ScriptingRuntimeHelpers_CharToString (ch) {
    if ((ch.charCodeAt(0) | 0) < (("\xff").charCodeAt(0) | 0)) {
      var result = $thisType.chars[ch.charCodeAt(0)];
    } else {
      result = $S00().Construct(ch, 1);
    }
    return result;
  };

  function ScriptingRuntimeHelpers_CheckDictionaryMembers (dict, names) {
    if (($IM00().Call(dict, null) | 0) !== (names.length | 0)) {
      var result = false;
    } else {

      for (var i = 0; i < (names.length | 0); i = ((i + 1) | 0)) {
        var name = names[i];
        if (!$IM01().Call(dict, null, name)) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  };

  function ScriptingRuntimeHelpers_CreateArray$b1 (T, args) {
    return JSIL.Array.New(T, args);
  };

  function ScriptingRuntimeHelpers_CreateInstance$b1 (T) {
    return (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;
  };

  function ScriptingRuntimeHelpers_GetEventHandlerType (eventInfo) {
    $T0C().RequiresNotNull(eventInfo, "eventInfo");
    return eventInfo.get_EventHandlerType();
  };

  function ScriptingRuntimeHelpers_GetPrimitiveDefaultValue (type) {
    switch (($T0D().GetTypeCode(type)).valueOf()) {
      case 3: 
        var result = $thisType.False;
        break;

      case 4: 
        result = "\0";
        break;

      case 5: 
        result = 0;
        break;

      case 6: 
        result = 0;
        break;

      case 7: 
        result = 0;
        break;

      case 8: 
        result = 0;
        break;

      case 9: 
        result = $thisType.Int32ToObject(0);
        break;

      case 10: 
        result = 0;
        break;

      case 11: 
        result = $T0E().Create(0, 0, 0);
        break;

      case 12: 
        result = $T0F().Create(0, 0, 0);
        break;

      case 13: 
        result = 0;
        break;

      case 14: 
        result = 0;
        break;

      case 15: 
        result = 0;
        break;

      case 16: 
        result = new ($T10())();
        break;

      default: 
        result = null;
        break;

    }
    return result;
  };

  function ScriptingRuntimeHelpers_GetStringMembers (members) {
    var res = $S01().Construct();
    var enumerator = $IM02().Call(members, null);
    try {

      while ($IM03().Call(enumerator, null)) {
        var o = $IM04().Call(enumerator, null);
        var str = $T03().$As(o);
        if (str !== null) {
          res.Add(str);
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM05().Call(enumerator, null);
      }
    }
    return res;
  };

  function ScriptingRuntimeHelpers_IncorrectBoxType$b1 (T, received) {
    throw $T17().UnexpectedType(
      ("StrongBox<" + T.get_Name() + ">"), 
      ($T05().GetType(received)).get_Name()
    );
  };

  function ScriptingRuntimeHelpers_Int32ToObject (value) {
    if (!(((value | 0) >= 1000) || ((value | 0) < -100))) {
      var result = $thisType.cache[(((value | 0) - -100) | 0)];
    } else {
      result = value;
    }
    return result;
  };

  function ScriptingRuntimeHelpers_InterpretedCallSiteTest (restrictionResult, bindingInfo) {
    if (restrictionResult) {
      var bindInfo = $T18().$Cast(bindingInfo);
      if ((bindInfo.CompilationThreshold | 0) >= 0) {
        bindInfo.CompilationThreshold = (((bindInfo.CompilationThreshold | 0) - 1) | 0);
        var result = true;
      } else {
        result = bindInfo.CheckCompiled();
      }
    } else {
      result = false;
    }
    return result;
  };

  function ScriptingRuntimeHelpers_MakeCache () {
    var result = JSIL.Array.New($T02(), 1100);

    for (var i = 0; i < (result.length | 0); i = ((i + 1) | 0)) {
      result[i] = ((i + -100) | 0);
    }
    return result;
  };

  function ScriptingRuntimeHelpers_MakeIncorrectBoxTypeError (type, received) {
    return $T17().UnexpectedType(
      ("StrongBox<" + type.get_Name() + ">"), 
      ($T05().GetType(received)).get_Name()
    );
  };

  function ScriptingRuntimeHelpers_MakeSingleCharStrings () {
    var result = JSIL.Array.New($T03(), 255);

    for (var ch = "\0"; (ch.charCodeAt(0) | 0) < (result.length | 0); ch = String.fromCharCode((ch.charCodeAt(0) | 0) + (("\x01").charCodeAt(0) | 0))) {
      result[ch.charCodeAt(0)] = $S00().Construct(ch, 1);
    }
    return result;
  };

  function ScriptingRuntimeHelpers_ReadOnlyAssignError (field, fieldName) {
    if (field) {
      throw $T17().FieldReadonly(fieldName);
    }
    throw $T17().PropertyReadonly(fieldName);
  };

  function ScriptingRuntimeHelpers_SimpleAttributeError (message) {
    return $S02().Construct(message);
  };

  function ScriptingRuntimeHelpers_SimpleTypeError (message) {
    return $S03().Construct(message);
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "BooleanToObject", 
      new JSIL.MethodSignature($.Object, [$.Boolean]), 
      ScriptingRuntimeHelpers_BooleanToObject
    );

    $.Method({Static:true , Public:true }, "CannotConvertError", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type"), $.Object]), 
      ScriptingRuntimeHelpers_CannotConvertError
    );

    $.Method({Static:true , Public:true }, "CharToString", 
      new JSIL.MethodSignature($.String, [$.Char]), 
      ScriptingRuntimeHelpers_CharToString
    );

    $.Method({Static:true , Public:true }, "CheckDictionaryMembers", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.IDictionary"), $jsilcore.TypeRef("System.Array", [$.String])]), 
      ScriptingRuntimeHelpers_CheckDictionaryMembers
    );

    $.Method({Static:true , Public:true }, "CreateArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$.Int32], ["T"]), 
      ScriptingRuntimeHelpers_CreateArray$b1
    );

    $.Method({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature("!!0", null, ["T"]), 
      ScriptingRuntimeHelpers_CreateInstance$b1
    );

    $.Method({Static:true , Public:true }, "GetEventHandlerType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Reflection.EventInfo")]), 
      ScriptingRuntimeHelpers_GetEventHandlerType
    );

    $.Method({Static:true , Public:false}, "GetPrimitiveDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")]), 
      ScriptingRuntimeHelpers_GetPrimitiveDefaultValue
    );

    $.Method({Static:true , Public:true }, "GetStringMembers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object])]), 
      ScriptingRuntimeHelpers_GetStringMembers
    );

    $.Method({Static:true , Public:true }, "IncorrectBoxType", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"]), 
      ScriptingRuntimeHelpers_IncorrectBoxType$b1
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["use MakeIncorrectBoxTypeError instead"]; });

    $.Method({Static:true , Public:true }, "Int32ToObject", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      ScriptingRuntimeHelpers_Int32ToObject
    );

    $.Method({Static:true , Public:true }, "InterpretedCallSiteTest", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Object]), 
      ScriptingRuntimeHelpers_InterpretedCallSiteTest
    );

    $.Method({Static:true , Public:false}, "MakeCache", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object])), 
      ScriptingRuntimeHelpers_MakeCache
    );

    $.Method({Static:true , Public:true }, "MakeIncorrectBoxTypeError", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type"), $.Object]), 
      ScriptingRuntimeHelpers_MakeIncorrectBoxTypeError
    );

    $.Method({Static:true , Public:false}, "MakeSingleCharStrings", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      ScriptingRuntimeHelpers_MakeSingleCharStrings
    );

    $.Method({Static:true , Public:true }, "ReadOnlyAssignError", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $.String]), 
      ScriptingRuntimeHelpers_ReadOnlyAssignError
    );

    $.Method({Static:true , Public:true }, "SimpleAttributeError", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String]), 
      ScriptingRuntimeHelpers_SimpleAttributeError
    );

    $.Method({Static:true , Public:true }, "SimpleTypeError", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.ArgumentTypeException"), [$.String]), 
      ScriptingRuntimeHelpers_SimpleTypeError
    );

    $.Constant({Static:true , Public:false}, "MIN_CACHE", -100); 
    $.Constant({Static:true , Public:false}, "MAX_CACHE", 1000); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "cache", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "True", $.Object); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "False", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BooleanToObjectMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Int32ToObjectMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "chars", $jsilcore.TypeRef("System.Array", [$.String])); 
    function ScriptingRuntimeHelpers__cctor () {
      $thisType.cache = $thisType.MakeCache();
      $thisType.True = true;
      $thisType.False = false;
      $thisType.BooleanToObjectMethod = $thisType.__Type__.GetMethod("BooleanToObject");
      $thisType.Int32ToObjectMethod = $thisType.__Type__.GetMethod("Int32ToObject");
      $thisType.chars = $thisType.MakeSingleCharStrings();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ScriptingRuntimeHelpers__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Scripting.Utils");
/* class Microsoft.Scripting.Utils.ArrayUtils */ 

(function ArrayUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.String))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ], ["T"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.String")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
        $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32"), 
        $jsilcore.TypeRef("System.Array", ["!!0"])
      ], ["T"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Int32")], ["T"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ArrayUtils_Append$b1 (T, $array, item) {
    var array = new JSIL.BoxedVariable($array);
    $T03().Resize$b1(T)(/* ref */ array, (
        (array.get() === null)
           ? 1
           : (((array.get().length | 0) + 1) | 0))
    );
    array.get()[(((array.get().length | 0) - 1) | 0)] = item;
    return array.get();
  };

  function ArrayUtils_AppendRange$b1$00 (T, array, items) {
    return $S00().CallStatic($thisType, "AppendRange$b1", [T], array, items, 0);
  };

  function ArrayUtils_AppendRange$b1$01 (T, $array, items, additionalItemCount) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IList$b1.Of(T).get_Item;
    var array = new JSIL.BoxedVariable($array);
    if ((additionalItemCount | 0) < 0) {
      throw $S01().Construct("additionalItemCount");
    }
    var i = ((
      (array.get() === null)
         ? 0
         : array.get().length)
     | 0);
    $T03().Resize$b1(T)(/* ref */ array, ((((i + ($im00.Call(items, null) | 0)) | 0) + (additionalItemCount | 0)) | 0));
    var j = 0;

    while (j < ($im00.Call(items, null) | 0)) {
      array.get()[i] = JSIL.CloneParameter(T, $im01.Call(items, null, j));
      j = ((j + 1) | 0);
      i = ((i + 1) | 0);
    }
    return array.get();
  };

  function ArrayUtils_Concatenate$b1 (T, array1, array2) {
    var columnsCount = (array1.length1 | 0);
    var row1Count = (array1.length0 | 0);
    var row2Count = (array2.length0 | 0);
    var result = JSIL.MultidimensionalArray.New(T, ((row1Count + row2Count) | 0), columnsCount);

    for (var i = 0; i < row1Count; i = ((i + 1) | 0)) {

      for (var j = 0; j < columnsCount; j = ((j + 1) | 0)) {
        result.Set(i, j, JSIL.CloneParameter(T, array1.Get(i, j)));
      }
    }

    for (i = 0; i < row2Count; i = ((i + 1) | 0)) {

      for (j = 0; j < columnsCount; j = ((j + 1) | 0)) {
        result.Set(((i + row1Count) | 0), j, JSIL.CloneParameter(T, array2.Get(i, j)));
      }
    }
    return result;
  };

  function ArrayUtils_ConvertAll$b2 (TInput, TOutput, input, conv) {
    $T06().RequiresNotNull(input, "input");
    $T06().RequiresNotNull(conv, "conv");
    var res = JSIL.Array.New(TOutput, input.length);

    for (var i = 0; i < (input.length | 0); i = ((i + 1) | 0)) {
      res[i] = JSIL.CloneParameter(TOutput, conv(JSIL.CloneParameter(TInput, input[i])));
    }
    return res;
  };

  function ArrayUtils_Copy$b1 (T, array) {
    return (
      ((array.length | 0) > 0)
         ? System.Array.Of(T).$Cast(JSIL.Array.Clone(array))
         : array)
    ;
  };

  function ArrayUtils_GetValueHashCode$b1$02 (T, array) {
    return $S02().CallStatic($thisType, "GetValueHashCode$b1", [T], array, 0, array.length);
  };

  function ArrayUtils_GetValueHashCode$b1$03 (T, array, start, count) {
    $T06().RequiresNotNull(array, "array");
    $S03().CallStatic($T06(), "RequiresArrayRange", null, 
      array.length, 
      start, 
      count, 
      "start", 
      "count"
    );
    if ((count | 0) === 0) {
      var result2 = 0;
    } else {
      var result = ((new JSIL.ArrayElementReference(array, start)).GetHashCode() | 0);

      for (var i = 1; i < (count | 0); i = ((i + 1) | 0)) {
        result = ((result << 5) | (result >> 27)) ^ ((new JSIL.ArrayElementReference(array, (((start | 0) + i) | 0))).GetHashCode() | 0);
      }
      result2 = result;
    }
    return result2;
  };

  function ArrayUtils_Insert$b1$04 (T, item, list) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    var res = JSIL.Array.New(T, ((($im00.Call(list, null) | 0) + 1) | 0));
    res[0] = item;
    $im01.Call(list, null, res, 1);
    return res;
  };

  function ArrayUtils_Insert$b1$05 (T, item1, item2, list) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    var res = JSIL.Array.New(T, ((($im00.Call(list, null) | 0) + 2) | 0));
    res[0] = item1;
    res[1] = item2;
    $im01.Call(list, null, res, 2);
    return res;
  };

  function ArrayUtils_Insert$b1$06 (T, item, array) {
    var result = $thisType.ShiftRight$b1(T)(array, 1);
    result[0] = item;
    return result;
  };

  function ArrayUtils_Insert$b1$07 (T, item1, item2, array) {
    var result = $thisType.ShiftRight$b1(T)(array, 2);
    result[0] = item1;
    result[1] = item2;
    return result;
  };

  function ArrayUtils_InsertAt$b1$08 (T, list, index, items) {
    return $S04().CallStatic($thisType, "InsertAt$b1", [T], $S05().CallStatic($thisType, "MakeArray$b1", [T], list), index, items);
  };

  function ArrayUtils_InsertAt$b1$09 (T, array, index, items) {
    $T06().RequiresNotNull(array, "array");
    $T06().RequiresNotNull(items, "items");
    $T06().Requires(((index | 0) >= 0) && ((index | 0) <= (array.length | 0)), "index");
    if ((items.length | 0) === 0) {
      var result2 = $thisType.Copy$b1(T)(array);
    } else {
      var result = JSIL.Array.New(T, (((array.length | 0) + (items.length | 0)) | 0));
      if ((index | 0) > 0) {
        $S06().CallStatic($T03(), "Copy", null, 
          array, 
          0, 
          result, 
          0, 
          index
        );
      }
      $S06().CallStatic($T03(), "Copy", null, 
        items, 
        0, 
        result, 
        index, 
        items.length
      );
      var remaining = (((array.length | 0) - (index | 0)) | 0);
      if (remaining > 0) {
        $S06().CallStatic($T03(), "Copy", null, 
          array, 
          (((array.length | 0) - remaining) | 0), 
          result, 
          (((result.length | 0) - remaining) | 0), 
          remaining
        );
      }
      result2 = result;
    }
    return result2;
  };

  function ArrayUtils_MakeArray$b1$0A (T, list) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    if (($im00.Call(list, null) | 0) === 0) {
      var result = JSIL.Array.New(T, 0);
    } else {
      var res = JSIL.Array.New(T, $im00.Call(list, null));
      $im01.Call(list, null, res, 0);
      result = res;
    }
    return result;
  };

  function ArrayUtils_MakeArray$b1$0B (T, elements, reservedSlotsBefore, reservedSlotsAfter) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    if ((reservedSlotsAfter | 0) < 0) {
      throw $S01().Construct("reservedSlotsAfter");
    }
    if ((reservedSlotsBefore | 0) < 0) {
      throw $S01().Construct("reservedSlotsBefore");
    }
    if (elements === null) {
      var result2 = JSIL.Array.New(T, (((reservedSlotsBefore | 0) + (reservedSlotsAfter | 0)) | 0));
    } else {
      var result = JSIL.Array.New(T, (((((reservedSlotsBefore | 0) + ($im00.Call(elements, null) | 0)) | 0) + (reservedSlotsAfter | 0)) | 0));
      $im01.Call(elements, null, result, reservedSlotsBefore);
      result2 = result;
    }
    return result2;
  };

  function ArrayUtils_PrintTable (output, table) {
    $T06().RequiresNotNull(output, "output");
    $T06().RequiresNotNull(table, "table");
    var max_width = 0;

    for (var i = 0; i < (table.length0 | 0); i = ((i + 1) | 0)) {
      if ((table.Get(i, 0).length | 0) > max_width) {
        max_width = (table.Get(i, 0).length | 0);
      }
    }

    for (i = 0; i < (table.length0 | 0); i = ((i + 1) | 0)) {
      $S07().CallVirtual("Append", null, output, " ");
      $S07().CallVirtual("Append", null, output, table.Get(i, 0));

      for (var j = (table.Get(i, 0).length | 0); j < ((max_width + 1) | 0); j = ((j + 1) | 0)) {
        $S08().CallVirtual("Append", null, output, " ");
      }
      output.AppendLine(table.Get(i, 1));
    }
  };

  function ArrayUtils_RemoveAt$b1$0C (T, list, indexToRemove) {
    return $S09().CallStatic($thisType, "RemoveAt$b1", [T], $S05().CallStatic($thisType, "MakeArray$b1", [T], list), indexToRemove);
  };

  function ArrayUtils_RemoveAt$b1$0D (T, array, indexToRemove) {
    $T06().RequiresNotNull(array, "array");
    $T06().Requires(((indexToRemove | 0) >= 0) && ((indexToRemove | 0) < (array.length | 0)), "index");
    var result = JSIL.Array.New(T, (((array.length | 0) - 1) | 0));
    if ((indexToRemove | 0) > 0) {
      $S06().CallStatic($T03(), "Copy", null, 
        array, 
        0, 
        result, 
        0, 
        indexToRemove
      );
    }
    var remaining = (((((array.length | 0) - (indexToRemove | 0)) | 0) - 1) | 0);
    if (remaining > 0) {
      $S06().CallStatic($T03(), "Copy", null, 
        array, 
        (((array.length | 0) - remaining) | 0), 
        result, 
        (((result.length | 0) - remaining) | 0), 
        remaining
      );
    }
    return result;
  };

  function ArrayUtils_RemoveFirst$b1$0E (T, list) {
    return $thisType.ShiftLeft$b1(T)($S05().CallStatic($thisType, "MakeArray$b1", [T], list), 1);
  };

  function ArrayUtils_RemoveFirst$b1$0F (T, array) {
    return $thisType.ShiftLeft$b1(T)(array, 1);
  };

  function ArrayUtils_RemoveLast$b1 (T, $array) {
    var array = new JSIL.BoxedVariable($array);
    $T06().RequiresNotNull(array.get(), "array");
    $T03().Resize$b1(T)(/* ref */ array, (((array.get().length | 0) - 1) | 0));
    return array.get();
  };

  function ArrayUtils_Reverse$b1 (T, array) {
    var res = JSIL.Array.New(T, array.length);

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      res[(((((array.length | 0) - i) | 0) - 1) | 0)] = JSIL.CloneParameter(T, array[i]);
    }
    return res;
  };

  function ArrayUtils_RotateRight$b1 (T, array, count) {
    $T06().RequiresNotNull(array, "array");
    if (!(((count | 0) >= 0) && ((count | 0) <= (array.length | 0)))) {
      throw $S01().Construct("count");
    }
    var result = JSIL.Array.New(T, array.length);
    var sizeOfShiftedArray = (((array.length | 0) - (count | 0)) | 0);
    $S06().CallStatic($T03(), "Copy", null, 
      array, 
      0, 
      result, 
      count, 
      sizeOfShiftedArray
    );
    $S06().CallStatic($T03(), "Copy", null, 
      array, 
      sizeOfShiftedArray, 
      result, 
      0, 
      count
    );
    return result;
  };

  function ArrayUtils_ShiftLeft$b1 (T, array, count) {
    $T06().RequiresNotNull(array, "array");
    if ((count | 0) < 0) {
      throw $S01().Construct("count");
    }
    var result = JSIL.Array.New(T, (((array.length | 0) - (count | 0)) | 0));
    $S06().CallStatic($T03(), "Copy", null, 
      array, 
      count, 
      result, 
      0, 
      result.length
    );
    return result;
  };

  function ArrayUtils_ShiftRight$b1 (T, array, count) {
    $T06().RequiresNotNull(array, "array");
    if ((count | 0) < 0) {
      throw $S01().Construct("count");
    }
    var result = JSIL.Array.New(T, (((array.length | 0) + (count | 0)) | 0));
    $S06().CallStatic($T03(), "Copy", null, 
      array, 
      0, 
      result, 
      count, 
      array.length
    );
    return result;
  };

  function ArrayUtils_SwapLastTwo$b1 (T, array) {
    var temp = array[(((array.length | 0) - 1) | 0)];
    array[(((array.length | 0) - 1) | 0)] = JSIL.CloneParameter(T, array[(((array.length | 0) - 2) | 0)]);
    array[(((array.length | 0) - 2) | 0)] = JSIL.CloneParameter(T, temp);
  };

  function ArrayUtils_ToArray$b1 (T, list) {
    return JSIL.Coalesce(System.Array.Of(T).$As(list), $S05().CallStatic($thisType, "MakeArray$b1", [T], list));
  };

  function ArrayUtils_ToArray$b2 (TElement, TResult, list, convertor) {
    var $temp00;
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(TElement).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(TElement).GetEnumerator;
    var $im02 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(TElement).get_Current;
    var res = System.Array.Of(TResult).$As(list);
    if (res === null) {
      res = JSIL.Array.New(TResult, $im00.Call(list, null));
      var i = 0;
      var enumerator = $im01.Call(list, null);
      try {

        while ($IM00().Call(enumerator, null)) {
          var obj = JSIL.CloneParameter(TElement, $im02.Call(enumerator, null));
          res[($temp00 = i, 
            i = ((i + 1) | 0), 
            $temp00)] = JSIL.CloneParameter(TResult, convertor(JSIL.CloneParameter(TElement, obj)));
        }
      } finally {
        if (enumerator !== null) {
          $IM01().Call(enumerator, null);
        }
      }
    }
    return res;
  };

  function ArrayUtils_ToComparer$b1 (T, comparison) {
    return new ($asm00.Microsoft.Scripting.Utils.ArrayUtils_FunctorComparer$b1.Of(T)) (comparison);
  };

  function ArrayUtils_ValueEquals$b1 (T, array, other) {
    if ((other.length | 0) !== (array.length | 0)) {
      var result = false;
    } else {

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        if (!(JSIL.ObjectEquals(array[i], other[i]))) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.ArrayUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Append", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), "!!0"], ["T"]), 
      ArrayUtils_Append$b1
    );

    $.Method({Static:true , Public:true }, "AppendRange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"]), 
      ArrayUtils_AppendRange$b1$00
    );

    $.Method({Static:true , Public:true }, "AppendRange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Int32
        ], ["T"]), 
      ArrayUtils_AppendRange$b1$01
    );

    $.Method({Static:true , Public:true }, "Concatenate", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_Concatenate$b1
    );

    $.Method({Static:true , Public:true }, "ConvertAll", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TInput", "TOutput"]), 
      ArrayUtils_ConvertAll$b2
    );

    $.Method({Static:true , Public:true }, "Copy", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_Copy$b1
    );

    $.Method({Static:true , Public:true }, "GetValueHashCode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_GetValueHashCode$b1$02
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetValueHashCode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      ArrayUtils_GetValueHashCode$b1$03
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "Insert", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), ["!!0", $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"]), 
      ArrayUtils_Insert$b1$04
    );

    $.Method({Static:true , Public:true }, "Insert", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          "!!0", "!!0", 
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"])
        ], ["T"]), 
      ArrayUtils_Insert$b1$05
    );

    $.Method({Static:true , Public:true }, "Insert", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), ["!!0", $jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_Insert$b1$06
    );

    $.Method({Static:true , Public:true }, "Insert", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          "!!0", "!!0", 
          $jsilcore.TypeRef("System.Array", ["!!0"])
        ], ["T"]), 
      ArrayUtils_Insert$b1$07
    );

    $.Method({Static:true , Public:true }, "InsertAt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $jsilcore.TypeRef("System.Array", ["!!0"])
        ], ["T"]), 
      ArrayUtils_InsertAt$b1$08
    )
      .Parameter(2, "items", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:true }, "InsertAt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          $jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32, 
          $jsilcore.TypeRef("System.Array", ["!!0"])
        ], ["T"]), 
      ArrayUtils_InsertAt$b1$09
    )
      .Parameter(2, "items", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:true }, "MakeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]), 
      ArrayUtils_MakeArray$b1$0A
    );

    $.Method({Static:true , Public:true }, "MakeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      ArrayUtils_MakeArray$b1$0B
    );

    $.Method({Static:true , Public:true }, "PrintTable", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("System.Array", [$.String])]), 
      ArrayUtils_PrintTable
    );

    $.Method({Static:true , Public:true }, "RemoveAt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32], ["T"]), 
      ArrayUtils_RemoveAt$b1$0C
    );

    $.Method({Static:true , Public:true }, "RemoveAt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"]), 
      ArrayUtils_RemoveAt$b1$0D
    );

    $.Method({Static:true , Public:true }, "RemoveFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"]), 
      ArrayUtils_RemoveFirst$b1$0E
    );

    $.Method({Static:true , Public:true }, "RemoveFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_RemoveFirst$b1$0F
    );

    $.Method({Static:true , Public:true }, "RemoveLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_RemoveLast$b1
    );

    $.Method({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_Reverse$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "RotateRight", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"]), 
      ArrayUtils_RotateRight$b1
    );

    $.Method({Static:true , Public:true }, "ShiftLeft", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"]), 
      ArrayUtils_ShiftLeft$b1
    );

    $.Method({Static:true , Public:true }, "ShiftRight", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"]), 
      ArrayUtils_ShiftRight$b1
    );

    $.Method({Static:true , Public:true }, "SwapLastTwo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_SwapLastTwo$b1
    );

    $.Method({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]), 
      ArrayUtils_ToArray$b1
    );

    $.Method({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TElement", "TResult"]), 
      ArrayUtils_ToArray$b2
    );

    $.Method({Static:true , Public:true }, "ToComparer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), [$asm01.TypeRef("System.Comparison`1", ["!!0"])], ["T"]), 
      ArrayUtils_ToComparer$b1
    );

    $.Method({Static:true , Public:true }, "ValueEquals", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", ["!!0"]), $jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      ArrayUtils_ValueEquals$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyStrings", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm01.System.String, 0);
      }); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyObjects", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm01.System.Object, 0);
      }); 
    function ArrayUtils__cctor () {
      $thisType.EmptyStrings = JSIL.Array.New($T00(), 0);
      $thisType.EmptyObjects = JSIL.Array.New($T01(), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ArrayUtils__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.ArrayUtils+FunctorComparer`1 */ 

(function FunctorComparer$b1$Members () {
  var $, $thisType;
  function FunctorComparer$b1__ctor (comparison) {
    this._comparison = comparison;
  };

  function FunctorComparer$b1_Compare (x, y) {
    return this._comparison(x, y);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ArrayUtils+FunctorComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Comparison`1", [$.GenericParameter("T")])]), 
      FunctorComparer$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T"), $.GenericParameter("T")]), 
      FunctorComparer$b1_Compare
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_comparison", $asm01.TypeRef("System.Comparison`1", [$.GenericParameter("T")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.Assert */ 

(function Assert$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.System.Diagnostics.Debug)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Func$b1.Of($asm01.System.Boolean))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function Assert_get_Unreachable () {
    $T00().Assert(false, "Unreachable");
    return $S00().Construct("Code supposed to be unreachable");
  };

  function Assert_IsTrue (predicate) {
    $T03().RequiresNotNull(predicate, "predicate");
    $T00().Assert(predicate());
  };

  function Assert_NotEmpty (str) {
    $T00().Assert(!$T04().IsNullOrEmpty(str));
  };

  function Assert_NotEmpty$b1 (T, array) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    $T00().Assert((array !== null) && (($im00.Call(array, null) | 0) > 0));
  };

  function Assert_NotNull$00 ($var) {
    $T00().Assert($var !== null);
  };

  function Assert_NotNull$01 (var1, var2) {
    $T00().Assert((var1 !== null) && (var2 !== null));
  };

  function Assert_NotNull$02 (var1, var2, var3) {
    $T00().Assert(!((var1 === null) || 
        (var2 === null)) && (var3 !== null));
  };

  function Assert_NotNull$03 (var1, var2, var3, var4) {
    $T00().Assert(!((var1 === null) || 
        (var2 === null) || 
        (var3 === null)) && (var4 !== null));
  };

  function Assert_NotNullItems$b1 (T, items) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    $T00().Assert(items !== null);
    var enumerator = $im00.Call(items, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var item = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        $T00().Assert(item !== null);
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.Assert", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "get_Unreachable", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Assert_get_Unreachable
    );

    $.Method({Static:true , Public:true }, "IsTrue", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Func`1", [$.Boolean])), 
      Assert_IsTrue
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotEmpty", 
      JSIL.MethodSignature.Action($.String), 
      Assert_NotEmpty
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotEmpty", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]), 
      Assert_NotEmpty$b1
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotNull", 
      JSIL.MethodSignature.Action($.Object), 
      Assert_NotNull$00
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotNull", 
      new JSIL.MethodSignature(null, [$.Object, $.Object]), 
      Assert_NotNull$01
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotNull", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object
        ]), 
      Assert_NotNull$02
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotNull", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      Assert_NotNull$03
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "NotNullItems", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      Assert_NotNullItems$b1
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Property({Static:true , Public:true }, "Unreachable", $asm01.TypeRef("System.Exception"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CacheDict`2 */ 

(function CacheDict$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.KeyNotFoundException"), null))) ();
  };

  function CacheDict$b2__ctor (maxSize) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$thisType.TKey.get(this), $asm00.TypeRef("Microsoft.Scripting.Utils.CacheDict`2+KeyInfo", [$thisType.TKey.get(this), $thisType.TValue.get(this)])]), null);
    this._dict = $s00.Construct();
    this._list = new ($asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1.Of($thisType.TKey.get(this))) ();
    this._maxSize = (maxSize | 0);
  };

  function CacheDict$b2_Add (key, value) {
    var keyInfo = new JSIL.BoxedVariable(new ($asm00.Microsoft.Scripting.Utils.CacheDict$b2_KeyInfo.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) ());
    if ((this._dict).TryGetValue(JSIL.CloneParameter($thisType.TKey.get(this), key), /* ref */ keyInfo)) {
      $asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1.Of($thisType.TKey.get(this)).prototype.Remove.call(this._list, keyInfo.get().List);
    } else if (((this._list).get_Count() | 0) === (this._maxSize | 0)) {
      var node = (this._list).get_Last();
      $asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1.Of($thisType.TKey.get(this)).prototype.RemoveLast.call(this._list);
      var res = (this._dict).Remove(JSIL.CloneParameter($thisType.TKey.get(this), node.CustomLinkedListNode$b1$Value$value));
    }
    var listNode = new ($asm00.Microsoft.Scripting.Utils.CustomLinkedListNode$b1.Of($thisType.TKey.get(this))) (JSIL.CloneParameter($thisType.TKey.get(this), key));
    $asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1.Of($thisType.TKey.get(this)).prototype.AddFirst.call(this._list, listNode);
    (this._dict).set_Item(key, new ($asm00.Microsoft.Scripting.Utils.CacheDict$b2_KeyInfo.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (value, listNode));
  };

  function CacheDict$b2_get_Item (key) {
    var res = new JSIL.BoxedVariable((
        $thisType.TValue.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.TValue.get(this))
           : null)
    );
    if ($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.TryGetValue.call(this, key, /* ref */ res)) {
      return res.get();
    }
    throw $S00().Construct();
  };

  function CacheDict$b2_set_Item (key, value) {
    $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.Add.call(this, key, value);
  };

  function CacheDict$b2_TryGetValue (key, /* ref */ value) {
    var storedValue = new JSIL.BoxedVariable(new ($asm00.Microsoft.Scripting.Utils.CacheDict$b2_KeyInfo.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) ());
    if ((this._dict).TryGetValue(key, /* ref */ storedValue)) {
      var node = storedValue.get().List;
      if (node.CustomLinkedListNode$b1$Previous$value !== null) {
        $asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1.Of($thisType.TKey.get(this)).prototype.Remove.call(this._list, node);
        $asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1.Of($thisType.TKey.get(this)).prototype.AddFirst.call(this._list, node);
      }
      value.set(JSIL.CloneParameter(this.TValue, storedValue.get().Value));
      var result = true;
    } else {
      value.set((
          $thisType.TValue.get(this).IsValueType
             ? JSIL.CreateInstanceOfType($thisType.TValue.get(this))
             : null)
      );
      result = false;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CacheDict`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      CacheDict$b2__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      CacheDict$b2_Add
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")]), 
      CacheDict$b2_get_Item
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      CacheDict$b2_set_Item
    );

    $.Method({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])]), 
      CacheDict$b2_TryGetValue
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm00.TypeRef("Microsoft.Scripting.Utils.CacheDict`2+KeyInfo", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedList`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxSize", $.Int32); 
    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("TValue"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Scripting.Utils.CacheDict`2+KeyInfo */ 

(function KeyInfo$Members () {
  var $, $thisType;
  function KeyInfo__ctor (value, list) {
    this.Value = value;
    this.List = list;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Utils.CacheDict`2+KeyInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TValue"), $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("TKey")])]), 
      KeyInfo__ctor
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.GenericParameter("TValue")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "List", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CustomLinkedList`1 */ 

(function CustomLinkedList$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function CustomLinkedList$b1__ctor () {
  };

  function CustomLinkedList$b1_AddFirst (node) {
    if (node.CustomLinkedListNode$b1$List$value !== null) {
      throw $S00().Construct("Node belongs to another list");
    }
    if (this._firstNode !== null) {
      this._firstNode.CustomLinkedListNode$b1$Previous$value = node;
    }
    node.CustomLinkedListNode$b1$List$value = this;
    node.CustomLinkedListNode$b1$Next$value = this._firstNode;
    this._count = (((this._count | 0) + 1) | 0);
    this._firstNode = node;
    if (this._lastNode === null) {
      this._lastNode = node;
    }
  };

  function CustomLinkedList$b1_get_Count () {
    return this._count;
  };

  function CustomLinkedList$b1_get_Last () {
    return this._lastNode;
  };

  function CustomLinkedList$b1_GetEnumerator () {
    var $lGetEnumerator$gd__ = new ($asm00.Microsoft.Scripting.Utils.CustomLinkedList$b1_$lGetEnumerator$gd__0.Of($thisType.T.get(this))) (0);
    $lGetEnumerator$gd__.$l$g4__this = this;
    return $lGetEnumerator$gd__;
  };

  function CustomLinkedList$b1_Remove (node) {
    if (node === null) {
      throw $S01().Construct("node is null");
    }
    if (node.CustomLinkedListNode$b1$List$value !== this) {
      throw $S00().Construct("Node belongs to another list");
    }
    if (node.CustomLinkedListNode$b1$Previous$value !== null) {
      node.CustomLinkedListNode$b1$Previous$value.CustomLinkedListNode$b1$Next$value = node.CustomLinkedListNode$b1$Next$value;
    } else {
      this._firstNode = node.CustomLinkedListNode$b1$Next$value;
    }
    if (node.CustomLinkedListNode$b1$Next$value !== null) {
      node.CustomLinkedListNode$b1$Next$value.CustomLinkedListNode$b1$Previous$value = node.CustomLinkedListNode$b1$Previous$value;
    } else {
      this._lastNode = node.CustomLinkedListNode$b1$Previous$value;
    }
    this._count = (((this._count | 0) - 1) | 0);
    node.CustomLinkedListNode$b1$List$value = null;
    node.CustomLinkedListNode$b1$Next$value = null;
    node.CustomLinkedListNode$b1$Previous$value = null;
  };

  function CustomLinkedList$b1_RemoveLast () {
    if ((this._count | 0) === 0) {
      throw $S00().Construct("List empty");
    }
    var node = this._lastNode;
    this._lastNode = this._lastNode.CustomLinkedListNode$b1$Previous$value;
    this._lastNode.CustomLinkedListNode$b1$Next$value = null;
    node.CustomLinkedListNode$b1$List$value = null;
    node.CustomLinkedListNode$b1$Previous$value = null;
    this._count = (((this._count | 0) - 1) | 0);
    if (this._lastNode === null) {
      this._firstNode = null;
    }
  };

  function CustomLinkedList$b1_System_Collections_IEnumerable_GetEnumerator () {
    return this.GetEnumerator();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CustomLinkedList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CustomLinkedList$b1__ctor
    );

    $.Method({Static:false, Public:true }, "AddFirst", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])]), 
      CustomLinkedList$b1_AddFirst
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      CustomLinkedList$b1_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Last", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]), null), 
      CustomLinkedList$b1_get_Last
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      CustomLinkedList$b1_GetEnumerator
    );

    $.Method({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])]), 
      CustomLinkedList$b1_Remove
    );

    $.Method({Static:false, Public:true }, "RemoveLast", 
      JSIL.MethodSignature.Void, 
      CustomLinkedList$b1_RemoveLast
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      CustomLinkedList$b1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_firstNode", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "_lastNode", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "_count", $.Int32); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Last", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CustomLinkedList`1+<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function $lGetEnumerator$gd__0__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
  };

  function $lGetEnumerator$gd__0_MoveNext () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 0: 
              this.$l$g1__state = -1;
              this.$lcurrent$g5__1 = this.$l$g4__this._firstNode;
              break;

            case 1: 
              this.$l$g1__state = -1;
              this.$lcurrent$g5__1 = this.$lcurrent$g5__1.CustomLinkedListNode$b1$Next$value;
              break;

            default: 
              $label0 = 1 /* goto IL_7F */ ;
              continue $labelgroup0;

          }
          if (this.$lcurrent$g5__1 !== null) {
            this.$l$g2__current = JSIL.CloneParameter($thisType.T.get(this), this.$lcurrent$g5__1.CustomLinkedListNode$b1$Value$value);
            this.$l$g1__state = 1;
            var result = true;
            return result;
          }

          $label0 = 1 /* goto IL_7F */ ;
          continue $labelgroup0;
        case 1: /* IL_7F */ 
          result = false;
          return result;

          break $labelgroup0;
      }
    }
  };

  function $lGetEnumerator$gd__0_System_Collections_Generic_IEnumerator$lT$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetEnumerator$gd__0_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetEnumerator$gd__0_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lGetEnumerator$gd__0_System_IDisposable_Dispose () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CustomLinkedList`1+<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetEnumerator$gd__0__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetEnumerator$gd__0_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      $lGetEnumerator$gd__0_System_Collections_Generic_IEnumerator$lT$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetEnumerator$gd__0_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetEnumerator$gd__0_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetEnumerator$gd__0_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedList`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "$lcurrent$g5__1", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.CustomLinkedListNode`1 */ 

(function CustomLinkedListNode$b1$Members () {
  var $, $thisType;
  function CustomLinkedListNode$b1__ctor (value) {
    this.CustomLinkedListNode$b1$Value$value = value;
  };

  function CustomLinkedListNode$b1_get_List () {
    return this.CustomLinkedListNode$b1$List$value;
  };

  function CustomLinkedListNode$b1_get_Next () {
    return this.CustomLinkedListNode$b1$Next$value;
  };

  function CustomLinkedListNode$b1_get_Previous () {
    return this.CustomLinkedListNode$b1$Previous$value;
  };

  function CustomLinkedListNode$b1_get_Value () {
    return this.CustomLinkedListNode$b1$Value$value;
  };

  function CustomLinkedListNode$b1_set_List (value) {
    this.CustomLinkedListNode$b1$List$value = value;
  };

  function CustomLinkedListNode$b1_set_Next (value) {
    this.CustomLinkedListNode$b1$Next$value = value;
  };

  function CustomLinkedListNode$b1_set_Previous (value) {
    this.CustomLinkedListNode$b1$Previous$value = value;
  };

  function CustomLinkedListNode$b1_set_Value (value) {
    this.CustomLinkedListNode$b1$Value$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CustomLinkedListNode`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      CustomLinkedListNode$b1__ctor
    );

    $.Method({Static:false, Public:true }, "get_List", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedList`1", [$.GenericParameter("T")]), null), 
      CustomLinkedListNode$b1_get_List
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Next", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]), null), 
      CustomLinkedListNode$b1_get_Next
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Previous", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]), null), 
      CustomLinkedListNode$b1_get_Previous
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      CustomLinkedListNode$b1_get_Value
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_List", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedList`1", [$.GenericParameter("T")])]), 
      CustomLinkedListNode$b1_set_List
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Next", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])]), 
      CustomLinkedListNode$b1_set_Next
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Previous", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")])]), 
      CustomLinkedListNode$b1_set_Previous
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      CustomLinkedListNode$b1_set_Value
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CustomLinkedListNode$b1$Previous$value", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CustomLinkedListNode$b1$Next$value", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CustomLinkedListNode$b1$List$value", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedList`1", [$.GenericParameter("T")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CustomLinkedListNode$b1$Value$value", $.GenericParameter("T"))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Previous", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Next", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedListNode`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "List", $asm00.TypeRef("Microsoft.Scripting.Utils.CustomLinkedList`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("T"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CollectionExtensions */ 

(function CollectionExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Array"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function CollectionExtensions_AddFirst$b1 (T, list, item) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    var res = JSIL.Array.New(T, ((($im00.Call(list, null) | 0) + 1) | 0));
    res[0] = item;
    $im01.Call(list, null, res, 1);
    return res;
  };

  function CollectionExtensions_AddLast$b1 (T, list, item) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    var res = JSIL.Array.New(T, ((($im00.Call(list, null) | 0) + 1) | 0));
    $im01.Call(list, null, res, 0);
    res[list.Count] = item;
    return res;
  };

  function CollectionExtensions_ListEquals$b1 (T, first, second) {
    var $s00 = new JSIL.MethodSignature($asm01.System.Boolean, [T, T]);
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im02 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    if (($im00.Call(first, null) | 0) !== ($im00.Call(second, null) | 0)) {
      var result = false;
    } else {
      var cmp = $asm01.System.Collections.Generic.EqualityComparer$b1.Of(T).get_Default();
      var f = $im01.Call(first, null);
      var s = $im01.Call(second, null);

      while ($IM00().Call(f, null)) {
        $IM00().Call(s, null);
        if (!$s00.CallVirtual("Equals", null, cmp, 
            JSIL.CloneParameter(T, $im02.Call(f, null)), 
            JSIL.CloneParameter(T, $im02.Call(s, null))
          )) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  };

  function CollectionExtensions_ListHashCode$b1 (T, list) {
    var $s00 = new JSIL.MethodSignature($asm01.System.Int32, [T]);
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var cmp = $asm01.System.Collections.Generic.EqualityComparer$b1.Of(T).get_Default();
    var h = 6551;
    var enumerator = $im00.Call(list, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var t = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        h = h ^ ((h << 5) ^ ($s00.CallVirtual("GetHashCode", null, cmp, JSIL.CloneParameter(T, t)) | 0));
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    return h;
  };

  function CollectionExtensions_Map$b2 (T, U, collection, select) {
    var $temp00;
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im02 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var count = ($im00.Call(collection, null) | 0);
    var result = JSIL.Array.New(U, count);
    count = 0;
    var enumerator = $im01.Call(collection, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var t = JSIL.CloneParameter(T, $im02.Call(enumerator, null));
        result[($temp00 = count, 
          count = ((count + 1) | 0), 
          $temp00)] = JSIL.CloneParameter(U, select(JSIL.CloneParameter(T, t)));
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    return result;
  };

  function CollectionExtensions_RemoveAt$b1 (T, array, indexToRemove) {
    var result = JSIL.Array.New(T, (((array.length | 0) - 1) | 0));
    if ((indexToRemove | 0) > 0) {
      $S00().CallStatic($T05(), "Copy", null, 
        array, 
        0, 
        result, 
        0, 
        indexToRemove
      );
    }
    var remaining = (((((array.length | 0) - (indexToRemove | 0)) | 0) - 1) | 0);
    if (remaining > 0) {
      $S00().CallStatic($T05(), "Copy", null, 
        array, 
        (((array.length | 0) - remaining) | 0), 
        result, 
        (((result.length | 0) - remaining) | 0), 
        remaining
      );
    }
    return result;
  };

  function CollectionExtensions_RemoveFirst$b1 (T, array) {
    var result = JSIL.Array.New(T, (((array.length | 0) - 1) | 0));
    $S00().CallStatic($T05(), "Copy", null, 
      array, 
      1, 
      result, 
      0, 
      result.length
    );
    return result;
  };

  function CollectionExtensions_RemoveLast$b1 (T, array) {
    var result = JSIL.Array.New(T, (((array.length | 0) - 1) | 0));
    $S00().CallStatic($T05(), "Copy", null, 
      array, 
      0, 
      result, 
      0, 
      result.length
    );
    return result;
  };

  function CollectionExtensions_RotateRight$b1 (T, array, count) {
    var result = JSIL.Array.New(T, array.length);
    var sizeOfShiftedArray = (((array.length | 0) - (count | 0)) | 0);
    $S00().CallStatic($T05(), "Copy", null, 
      array, 
      0, 
      result, 
      count, 
      sizeOfShiftedArray
    );
    $S00().CallStatic($T05(), "Copy", null, 
      array, 
      sizeOfShiftedArray, 
      result, 
      0, 
      count
    );
    return result;
  };

  function CollectionExtensions_ToReadOnly$b1 (T, enumerable) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [T]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [T])]);
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    if (enumerable === null) {
      var result = $asm00.Microsoft.Scripting.Utils.EmptyReadOnlyCollection$b1.Of(T).Instance;
    } else {
      var roCollection = $asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T).$As(enumerable);
      if (roCollection !== null) {
        result = roCollection;
      } else {
        var collection = $asm01.System.Collections.Generic.ICollection$b1.Of(T).$As(enumerable);
        if (collection !== null) {
          var count = ($im00.Call(collection, null) | 0);
          if (count === 0) {
            result = $asm00.Microsoft.Scripting.Utils.EmptyReadOnlyCollection$b1.Of(T).Instance;
          } else {
            var array = JSIL.Array.New(T, count);
            $im01.Call(collection, null, array, 0);
            result = new ($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T)) ($asm01.System.Collections.Generic.IList$b1.Of(T).$Cast(array));
          }
        } else {
          result = new ($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T)) ($asm01.System.Collections.Generic.IList$b1.Of(T).$Cast($asm01.System.Collections.Generic.List$b1.Of(T).prototype.ToArray.call($s00.Construct(enumerable))));
        }
      }
    }
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.CollectionExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AddFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"]), 
      CollectionExtensions_AddFirst$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "AddLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"]), 
      CollectionExtensions_AddLast$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "ListEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"]), 
      CollectionExtensions_ListEquals$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "ListHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      CollectionExtensions_ListHashCode$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"]), 
      CollectionExtensions_Map$b2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "RemoveAt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"]), 
      CollectionExtensions_RemoveAt$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "RemoveFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      CollectionExtensions_RemoveFirst$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "RemoveLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]), 
      CollectionExtensions_RemoveLast$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "RotateRight", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"]), 
      CollectionExtensions_RotateRight$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "ToReadOnly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      CollectionExtensions_ToReadOnly$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.EmptyReadOnlyCollection`1 */ 

(function EmptyReadOnlyCollection$b1$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.EmptyReadOnlyCollection`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false}, "Instance", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")])); 
    function EmptyReadOnlyCollection$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).Instance = new ($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($thisType.T.get(this))) ($asm01.System.Collections.Generic.IList$b1.Of($thisType.T.get(this)).$Cast(JSIL.Array.New($thisType.T.get(this), 0)));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EmptyReadOnlyCollection$b1__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.EmptyArray`1 */ 

(function EmptyArray$b1$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.EmptyArray`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false}, "Instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    function EmptyArray$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).Instance = JSIL.Array.New($thisType.T.get(this), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EmptyArray$b1__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.EnumerableWrapper */ 

(function EnumerableWrapper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerable.GetEnumerator)) ();
  };

  function EnumerableWrapper__ctor (o) {
    this._wrappedObject = o;
  };

  function EnumerableWrapper_GetEnumerator () {
    return $IM00().Call(this._wrappedObject, null);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.EnumerableWrapper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.IEnumerable")), 
      EnumerableWrapper__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      EnumerableWrapper_GetEnumerator
    );

    $.Field({Static:false, Public:false}, "_wrappedObject", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CollectionUtils */ 

(function CollectionUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Int32))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionUtils_DictionaryEnumerator)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Array)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm01.TypeRef("System.Comparison`1", ["!!0"])], ["T"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Int32).GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Int32).get_Current)) ();
  };

  function CollectionUtils_AddRange$b1$00 (T, collection, items) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var $im02 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).Add;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresNotNull(items, "items");
    var list = $asm01.System.Collections.Generic.List$b1.Of(T).$As(collection);
    if (list !== null) {
      $asm01.System.Collections.Generic.List$b1.Of(T).prototype.AddRange.call(list, items);
    } else {
      var enumerator = $im00.Call(items, null);
      try {

        while ($IM00().Call(enumerator, null)) {
          var item = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
          $im02.Call(collection, null, JSIL.CloneParameter(T, item));
        }
      } finally {
        if (enumerator !== null) {
          $IM01().Call(enumerator, null);
        }
      }
    }
  };

  function CollectionUtils_AddRange$b1$01 (T, list, items) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var $im02 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).Add;
    var enumerator = $im00.Call(items, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var item = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        $im02.Call(list, null, JSIL.CloneParameter(T, item));
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
  };

  function CollectionUtils_Cast$b2 (S, T, sequence) {
    var $lCast$gd__ = new ($asm00.Microsoft.Scripting.Utils.CollectionUtils_$lCast$gd__0$b2.Of(S, T)) (-2);
    $lCast$gd__.$l$g3__sequence = sequence;
    return $lCast$gd__;
  };

  function CollectionUtils_ConvertAll$b2 (T, TRet, collection, predicate) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [TRet]), [$asm01.System.Int32]);
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im02 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresNotNull(predicate, "predicate");
    var res = $s00.Construct($im00.Call(collection, null));
    var enumerator = $im01.Call(collection, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var item = JSIL.CloneParameter(T, $im02.Call(enumerator, null));
        res.Add(JSIL.CloneParameter(TRet, predicate(JSIL.CloneParameter(T, item))));
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    return res;
  };

  function CollectionUtils_CountOf$b1 (T, list, item) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IList$b1.Of(T).get_Item;
    var $im02 = $asm01.System.IEquatable$b1.Of(T).Equals;
    if (list === null) {
      var result2 = 0;
    } else {
      var result = 0;

      for (var i = 0; i < ($im00.Call(list, null) | 0); i = ((i + 1) | 0)) {
        var t = JSIL.CloneParameter(T, $im01.Call(list, null, i));
        if ($im02.Call(t, null, item)) {
          result = ((result + 1) | 0);
        }
      }
      result2 = result;
    }
    return result2;
  };

  function CollectionUtils_CreateSetComparer$b1 (T) {
    return $asm04.System.Collections.Generic.HashSet$b1.Of(T).CreateSetComparer();
  };

  function CollectionUtils_FindIndex$b1 (T, collection, predicate) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IList$b1.Of(T).get_Item;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresNotNull(predicate, "predicate");

    for (var i = 0; i < ($im00.Call(collection, null) | 0); i = ((i + 1) | 0)) {
      if (predicate(JSIL.CloneParameter(T, $im01.Call(collection, null, i)))) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  };

  function CollectionUtils_GetRange$b1 (T, list, index, count) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [T]), [$asm01.System.Int32]);
    var $im00 = $asm01.System.Collections.Generic.IList$b1.Of(T).get_Item;
    $T01().RequiresNotNull(list, "list");
    $T01().RequiresArrayRange$b1(T)(
      list, 
      index, 
      count, 
      "index", 
      "count"
    );
    var result = $s00.Construct(count);
    var stop = (((index | 0) + (count | 0)) | 0);

    for (var i = (index | 0); i < stop; i = ((i + 1) | 0)) {
      result.Add(JSIL.CloneParameter(T, $im00.Call(list, null, i)));
    }
    return result;
  };

  function CollectionUtils_InsertRange$b1 (T, collection, index, items) {
    var $temp00;
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    var $im02 = $asm01.System.Collections.Generic.IList$b1.Of(T).Insert;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresNotNull(items, "items");
    $T01().RequiresArrayInsertIndex$b1(T)(collection, index, "index");
    var list = $asm01.System.Collections.Generic.List$b1.Of(T).$As(collection);
    if (list !== null) {
      $asm01.System.Collections.Generic.List$b1.Of(T).prototype.InsertRange.call(list, index, items);
    } else {
      var i = (index | 0);
      var enumerator = $im00.Call(items, null);
      try {

        while ($IM00().Call(enumerator, null)) {
          var obj = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
          $im02.Call(collection, null, ($temp00 = i, 
              i = ((i + 1) | 0), 
              $temp00), JSIL.CloneParameter(T, obj));
        }
      } finally {
        if (enumerator !== null) {
          $IM01().Call(enumerator, null);
        }
      }
    }
  };

  function CollectionUtils_MakeList$b1 (T, item) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [T]), null);
    return ($s00.Construct()).__Initialize__([[item]]);
  };

  function CollectionUtils_Max (values) {
    $T01().RequiresNotNull(values, "values");
    var result = -2147483648;
    var enumerator = $IM02().Call(values, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var value = ($IM03().Call(enumerator, null) | 0);
        if (value > result) {
          result = value;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    return result;
  };

  function CollectionUtils_RemoveRange$b1 (T, collection, index, count) {
    var $im00 = $asm01.System.Collections.Generic.IList$b1.Of(T).RemoveAt;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresArrayRange$b1(T)(
      collection, 
      index, 
      count, 
      "index", 
      "count"
    );
    var list = $asm01.System.Collections.Generic.List$b1.Of(T).$As(collection);
    if (list !== null) {
      $asm01.System.Collections.Generic.List$b1.Of(T).prototype.RemoveRange.call(list, index, count);
    } else {

      for (var i = (((((index | 0) + (count | 0)) | 0) - 1) | 0); i >= (index | 0); i = ((i - 1) | 0)) {
        $im00.Call(collection, null, i);
      }
    }
  };

  function CollectionUtils_ToCovariant$b2$02 (T, TSuper, enumerable) {
    return new ($asm00.Microsoft.Scripting.Utils.CollectionUtils_CovariantConvertor$b2.Of(T, TSuper)) (enumerable);
  };

  function CollectionUtils_ToCovariant$b2$03 (T, TSuper, enumerator) {
    var $lToCovariant$gd__d = new ($asm00.Microsoft.Scripting.Utils.CollectionUtils_$lToCovariant$gd__d$b2.Of(T, TSuper)) (0);
    $lToCovariant$gd__d.enumerator = enumerator;
    return $lToCovariant$gd__d;
  };

  function CollectionUtils_ToDictionaryEnumerator (enumerator) {
    return new ($T08())(enumerator);
  };

  function CollectionUtils_ToEnumerable$b1 (T, enumerable) {
    var $lToEnumerable$gd__ = new ($asm00.Microsoft.Scripting.Utils.CollectionUtils_$lToEnumerable$gd__6$b1.Of(T)) (-2);
    $lToEnumerable$gd__.$l$g3__enumerable = enumerable;
    return $lToEnumerable$gd__;
  };

  function CollectionUtils_ToReverseArray$b1 (T, list) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IList$b1.Of(T).get_Item;
    $T01().RequiresNotNull(list, "list");
    var result = JSIL.Array.New(T, $im00.Call(list, null));

    for (var i = 0; i < (result.length | 0); i = ((i + 1) | 0)) {
      result[i] = JSIL.CloneParameter(T, $im01.Call(list, null, (((((result.length | 0) - 1) | 0) - i) | 0)));
    }
    return result;
  };

  function CollectionUtils_ToSortedList$b1 (T, collection, comparison) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).CopyTo;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresNotNull(comparison, "comparison");
    var array = JSIL.Array.New(T, $im00.Call(collection, null));
    $im01.Call(collection, null, array, 0);
    $S00().CallStatic($T0A(), "Sort$b1", [T], array, comparison);
    return $asm01.System.Collections.Generic.IList$b1.Of(T).$Cast(array);
  };

  function CollectionUtils_TrueForAll$b1 (T, collection, predicate) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    $T01().RequiresNotNull(collection, "collection");
    $T01().RequiresNotNull(predicate, "predicate");
    var enumerator = $im00.Call(collection, null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var item = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        if (!predicate(JSIL.CloneParameter(T, item))) {
          var result = false;
          return result;
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    result = true;
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.CollectionUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      CollectionUtils_AddRange$b1$00
    );

    $.Method({Static:true , Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"]), 
      CollectionUtils_AddRange$b1$01
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["S", "T"]), 
      CollectionUtils_Cast$b2
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ConvertAll", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "TRet"]), 
      CollectionUtils_ConvertAll$b2
    );

    $.Method({Static:true , Public:true }, "CountOf", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"]), 
      CollectionUtils_CountOf$b1
    );

    $.Method({Static:true , Public:true }, "CreateSetComparer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm04.TypeRef("System.Collections.Generic.HashSet`1", ["!!0"])]), null, ["T"]), 
      CollectionUtils_CreateSetComparer$b1
    );

    $.Method({Static:true , Public:true }, "FindIndex", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm01.TypeRef("System.Predicate`1", ["!!0"])], ["T"]), 
      CollectionUtils_FindIndex$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetRange", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      CollectionUtils_GetRange$b1
    );

    $.Method({Static:true , Public:true }, "InsertRange", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])
        ], ["T"]), 
      CollectionUtils_InsertRange$b1
    );

    $.Method({Static:true , Public:true }, "MakeList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"]), ["!!0"], ["T"]), 
      CollectionUtils_MakeList$b1
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])]), 
      CollectionUtils_Max
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "RemoveRange", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.Int32
        ], ["T"]), 
      CollectionUtils_RemoveRange$b1
    );

    $.Method({Static:true , Public:true }, "ToCovariant", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T", "TSuper"]), 
      CollectionUtils_ToCovariant$b2$02
    );

    $.Method({Static:true , Public:true }, "ToCovariant", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!0"])], ["T", "TSuper"]), 
      CollectionUtils_ToCovariant$b2$03
    );

    $.Method({Static:true , Public:true }, "ToDictionaryEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IDictionaryEnumerator"), [$asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])])]), 
      CollectionUtils_ToDictionaryEnumerator
    );

    $.Method({Static:true , Public:true }, "ToEnumerable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.IEnumerable")], ["T"]), 
      CollectionUtils_ToEnumerable$b1
    );

    $.Method({Static:true , Public:true }, "ToReverseArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"]), 
      CollectionUtils_ToReverseArray$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToSortedList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm01.TypeRef("System.Comparison`1", ["!!0"])], ["T"]), 
      CollectionUtils_ToSortedList$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "TrueForAll", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Predicate`1", ["!!0"])], ["T"]), 
      CollectionUtils_TrueForAll$b1
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.CollectionUtils+CovariantConvertor`2 */ 

(function CovariantConvertor$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionUtils)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!0"])], ["T", "TSuper"]))) ();
  };

  function CovariantConvertor$b2__ctor (enumerable) {
    $T00().RequiresNotNull(enumerable, "enumerable");
    this._enumerable = enumerable;
  };

  function CovariantConvertor$b2_GetEnumerator () {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of($thisType.T.get(this)).GetEnumerator;
    return $S00().CallStatic($T01(), "ToCovariant$b2", [$thisType.T.get(this), $thisType.TSuper.get(this)], $im00.Call(this._enumerable, null));
  };

  function CovariantConvertor$b2_System_Collections_IEnumerable_GetEnumerator () {
    return this.GetEnumerator();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CollectionUtils+CovariantConvertor`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "TSuper"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])]), 
      CovariantConvertor$b2__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSuper")]), null), 
      CovariantConvertor$b2_GetEnumerator
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      CovariantConvertor$b2_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "_enumerable", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSuper")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CollectionUtils+DictionaryEnumerator */ 

(function DictionaryEnumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.DictionaryEntry)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)).get_Current)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.Reset)) ();
  };

  function DictionaryEnumerator__ctor (enumerator) {
    this._enumerator = enumerator;
  };

  function DictionaryEnumerator_get_Current () {
    return this.get_Entry();
  };

  function DictionaryEnumerator_get_Entry () {
    var current = $IM00().Call(this._enumerator, null).MemberwiseClone();
    var arg_27_0 = current.get_Key();
    current = $IM00().Call(this._enumerator, null).MemberwiseClone();
    return new ($T03())(arg_27_0, current.get_Value());
  };

  function DictionaryEnumerator_get_Key () {
    var current = $IM00().Call(this._enumerator, null);
    return current.get_Key();
  };

  function DictionaryEnumerator_get_Value () {
    var current = $IM00().Call(this._enumerator, null);
    return current.get_Value();
  };

  function DictionaryEnumerator_MoveNext () {
    return $IM01().Call(this._enumerator, null);
  };

  function DictionaryEnumerator_Reset () {
    $IM02().Call(this._enumerator, null);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CollectionUtils+DictionaryEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])])), 
      DictionaryEnumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      DictionaryEnumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.DictionaryEntry")), 
      DictionaryEnumerator_get_Entry
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object), 
      DictionaryEnumerator_get_Key
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object), 
      DictionaryEnumerator_get_Value
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      DictionaryEnumerator_MoveNext
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void, 
      DictionaryEnumerator_Reset
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_enumerator", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm01.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CollectionUtils+<Cast>d__0`2 */ 

(function $lCast$gd__0$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };

  function $lCast$gd__0$b2__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lCast$gd__0$b2_$l$gm__Finally3 () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap2 !== null) {
      $IM00().Call(this.$l$g7__wrap2, null);
    }
  };

  function $lCast$gd__0$b2_MoveNext ($exception) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of($thisType.S.get(this)).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of($thisType.S.get(this)).get_Current;
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$l$g7__wrap2 = $im00.Call(this.sequence, null);
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_7F */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_7F */ ;
                continue $labelgroup0;

            }
            $label0 = 2 /* goto IL_96 */ ;
            continue $labelgroup0;

          case 1: /* IL_7F */ 
            if ($IM01().Call(this.$l$g7__wrap2, null)) {
              this.$litem$g5__1 = JSIL.CloneParameter($thisType.S.get(this), $im01.Call(this.$l$g7__wrap2, null));
              this.$l$g2__current = JSIL.CloneParameter($thisType.S.get(this), $thisType.T.get(this).$Cast(this.$litem$g5__1));
              this.$l$g1__state = 2;
              var result = true;
              return result;
            }
            this.$l$gm__Finally3();

            $label0 = 2 /* goto IL_96 */ ;
            continue $labelgroup0;
          case 2: /* IL_96 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lCast$gd__0$b2_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lCast$gd__ = this;
    } else {
      $lCast$gd__ = new ($thisType.Of($thisType.S.get(this), $thisType.T.get(this))) (0);
    }
    $lCast$gd__.sequence = this.$l$g3__sequence;
    return $lCast$gd__;
  };

  function $lCast$gd__0$b2_System_Collections_Generic_IEnumerator$lT$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lCast$gd__0$b2_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lT$g_GetEnumerator();
  };

  function $lCast$gd__0$b2_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lCast$gd__0$b2_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lCast$gd__0$b2_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      default: 
        return;

    }
    try {
    } finally {
      this.$l$gm__Finally3();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CollectionUtils+<Cast>d__0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["S", "T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lCast$gd__0$b2__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally3", 
      JSIL.MethodSignature.Void, 
      $lCast$gd__0$b2_$l$gm__Finally3
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lCast$gd__0$b2_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      $lCast$gd__0$b2_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      $lCast$gd__0$b2_System_Collections_Generic_IEnumerator$lT$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lCast$gd__0$b2_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lCast$gd__0$b2_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lCast$gd__0$b2_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lCast$gd__0$b2_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "sequence", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("S")])); 
    $.Field({Static:false, Public:true }, "$l$g3__sequence", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("S")])); 
    $.Field({Static:false, Public:true }, "$litem$g5__1", $.GenericParameter("S")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap2", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("S")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.CollectionUtils+<ToEnumerable>d__6`1 */ 

(function $lToEnumerable$gd__6$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.IEnumerator.get_Current)) ();
  };

  function $lToEnumerable$gd__6$b1__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lToEnumerable$gd__6$b1_$l$gm__Finallya () {
    this.$l$g1__state = -1;
    this.$l$g7__wrap9 = $T02().$As(this.$l$g7__wrap8);
    if (this.$l$g7__wrap9 !== null) {
      $IM00().Call(this.$l$g7__wrap9, null);
    }
  };

  function $lToEnumerable$gd__6$b1_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                this.$l$g7__wrap8 = $IM01().Call(this.enumerable, null);
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_7A */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_7A */ ;
                continue $labelgroup0;

            }
            $label0 = 2 /* goto IL_91 */ ;
            continue $labelgroup0;

          case 1: /* IL_7A */ 
            if ($IM02().Call(this.$l$g7__wrap8, null)) {
              this.$litem$g5__7 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($IM03().Call(this.$l$g7__wrap8, null)));
              this.$l$g2__current = JSIL.CloneParameter($thisType.T.get(this), this.$litem$g5__7);
              this.$l$g1__state = 2;
              var result = true;
              return result;
            }
            this.$l$gm__Finallya();

            $label0 = 2 /* goto IL_91 */ ;
            continue $labelgroup0;
          case 2: /* IL_91 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lToEnumerable$gd__6$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lToEnumerable$gd__ = this;
    } else {
      $lToEnumerable$gd__ = new ($thisType.Of($thisType.T.get(this))) (0);
    }
    $lToEnumerable$gd__.enumerable = this.$l$g3__enumerable;
    return $lToEnumerable$gd__;
  };

  function $lToEnumerable$gd__6$b1_System_Collections_Generic_IEnumerator$lT$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lToEnumerable$gd__6$b1_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lT$g_GetEnumerator();
  };

  function $lToEnumerable$gd__6$b1_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lToEnumerable$gd__6$b1_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lToEnumerable$gd__6$b1_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      default: 
        return;

    }
    try {
    } finally {
      this.$l$gm__Finallya();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CollectionUtils+<ToEnumerable>d__6`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lToEnumerable$gd__6$b1__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finallya", 
      JSIL.MethodSignature.Void, 
      $lToEnumerable$gd__6$b1_$l$gm__Finallya
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lToEnumerable$gd__6$b1_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      $lToEnumerable$gd__6$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      $lToEnumerable$gd__6$b1_System_Collections_Generic_IEnumerator$lT$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lToEnumerable$gd__6$b1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lToEnumerable$gd__6$b1_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lToEnumerable$gd__6$b1_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lToEnumerable$gd__6$b1_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "enumerable", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "$l$g3__enumerable", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "$litem$g5__7", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap8", $asm01.TypeRef("System.Collections.IEnumerator")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap9", $asm01.TypeRef("System.IDisposable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.CollectionUtils+<ToCovariant>d__d`2 */ 

(function $lToCovariant$gd__d$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };

  function $lToCovariant$gd__d$b2__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
  };

  function $lToCovariant$gd__d$b2_MoveNext () {
    var $im00 = $asm01.System.Collections.Generic.IEnumerator$b1.Of($thisType.T.get(this)).get_Current;

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 0: 
              this.$l$g1__state = -1;
              $T01().RequiresNotNull(this.enumerator, "enumerator");
              break;

            case 1: 
              this.$l$g1__state = -1;
              break;

            default: 
              $label0 = 1 /* goto IL_77 */ ;
              continue $labelgroup0;

          }
          if ($IM00().Call(this.enumerator, null)) {
            this.$l$g2__current = JSIL.CloneParameter($thisType.T.get(this), $thisType.TSuper.get(this).$Cast($im00.Call(this.enumerator, null)));
            this.$l$g1__state = 1;
            var result = true;
            return result;
          }

          $label0 = 1 /* goto IL_77 */ ;
          continue $labelgroup0;
        case 1: /* IL_77 */ 
          result = false;
          return result;

          break $labelgroup0;
      }
    }
  };

  function $lToCovariant$gd__d$b2_System_Collections_Generic_IEnumerator$lTSuper$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lToCovariant$gd__d$b2_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lToCovariant$gd__d$b2_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lToCovariant$gd__d$b2_System_IDisposable_Dispose () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CollectionUtils+<ToCovariant>d__d`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "TSuper"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lToCovariant$gd__d$b2__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lToCovariant$gd__d$b2_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSuper$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSuper"), null), 
      $lToCovariant$gd__d$b2_System_Collections_Generic_IEnumerator$lTSuper$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSuper")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lToCovariant$gd__d$b2_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lToCovariant$gd__d$b2_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lToCovariant$gd__d$b2_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSuper")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:true }, "enumerator", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSuper$g.Current", $.GenericParameter("TSuper"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSuper")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ContractUtils */ 

(function ContractUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Strings)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IList)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.ICollection)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ExceptionUtils)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.Int32"), 
        $asm01.TypeRef("System.Int32"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.String")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.ICollection.get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ContractUtils_Assert (precondition) {
  };

  function ContractUtils_Ensures$00 (condition) {
  };

  function ContractUtils_Ensures$01 (condition, message) {
  };

  function ContractUtils_Invariant$02 (condition) {
  };

  function ContractUtils_Invariant$03 (condition, message) {
  };

  function ContractUtils_Old$b1 (T, value) {
    return value;
  };

  function ContractUtils_Parameter$b1 (T, /* ref */ value) {
    value.set((
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
    );
    return value.get();
  };

  function ContractUtils_Requires$04 (precondition) {
    if (!precondition) {
      throw $S00().Construct($T04().get_MethodPreconditionViolated());
    }
  };

  function ContractUtils_Requires$05 (precondition, paramName) {
    if (!precondition) {
      throw $S01().Construct($T04().get_InvalidArgumentValue(), paramName);
    }
  };

  function ContractUtils_Requires$06 (precondition, paramName, message) {
    if (!precondition) {
      throw $S01().Construct(message, paramName);
    }
  };

  function ContractUtils_RequiresArrayIndex$b1 (T, array, index, indexName) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    $thisType.RequiresArrayIndex($im00.Call(array, null), index, indexName);
  };

  function ContractUtils_RequiresArrayIndex (arraySize, index, indexName) {
    if (!(((index | 0) >= 0) && ((index | 0) < (arraySize | 0)))) {
      throw $S02().Construct(indexName);
    }
  };

  function ContractUtils_RequiresArrayInsertIndex$b1 (T, array, index, indexName) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    $thisType.RequiresArrayInsertIndex($im00.Call(array, null), index, indexName);
  };

  function ContractUtils_RequiresArrayInsertIndex (arraySize, index, indexName) {
    if (!(((index | 0) >= 0) && ((index | 0) <= (arraySize | 0)))) {
      throw $S02().Construct(indexName);
    }
  };

  function ContractUtils_RequiresArrayRange$b1 (T, array, offset, count, offsetName, countName) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    $S03().CallStatic($thisType, "RequiresArrayRange", null, 
      $im00.Call(array, null), 
      offset, 
      count, 
      offsetName, 
      countName
    );
  };

  function ContractUtils_RequiresArrayRange$07 (arraySize, offset, count, offsetName, countName) {
    if ((count | 0) < 0) {
      throw $S02().Construct(countName);
    }
    if (!(((offset | 0) >= 0) && ((((arraySize | 0) - (offset | 0)) | 0) >= (count | 0)))) {
      throw $S02().Construct(offsetName);
    }
  };

  function ContractUtils_RequiresArrayRange$08 (str, offset, count, offsetName, countName) {
    if ((count | 0) < 0) {
      throw $S02().Construct(countName);
    }
    if (!(((offset | 0) >= 0) && ((((str.length | 0) - (offset | 0)) | 0) >= (count | 0)))) {
      throw $S02().Construct(offsetName);
    }
  };

  function ContractUtils_RequiresListRange (array, offset, count, offsetName, countName) {
    if ((count | 0) < 0) {
      throw $S02().Construct(countName);
    }
    if (!(((offset | 0) >= 0) && (((($IM00().Call(array, null) | 0) - (offset | 0)) | 0) >= (count | 0)))) {
      throw $S02().Construct(offsetName);
    }
  };

  function ContractUtils_RequiresNotEmpty (str, paramName) {
    $thisType.RequiresNotNull(str, paramName);
    if ((str.length | 0) === 0) {
      throw $S01().Construct($T04().get_NonEmptyStringRequired(), paramName);
    }
  };

  function ContractUtils_RequiresNotEmpty$b1 (T, collection, paramName) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    $thisType.RequiresNotNull(collection, paramName);
    if (($im00.Call(collection, null) | 0) === 0) {
      throw $S01().Construct($T04().get_NonEmptyCollectionRequired(), paramName);
    }
  };

  function ContractUtils_RequiresNotNull (value, paramName) {
    if (value === null) {
      throw $S04().Construct(paramName);
    }
  };

  function ContractUtils_RequiresNotNullItems$b1$09 (T, array, arrayName) {
    var $im00 = $asm01.System.Collections.Generic.ICollection$b1.Of(T).get_Count;
    var $im01 = $asm01.System.Collections.Generic.IList$b1.Of(T).get_Item;
    $thisType.RequiresNotNull(array, arrayName);

    for (var i = 0; i < ($im00.Call(array, null) | 0); i = ((i + 1) | 0)) {
      if ($im01.Call(array, null, i) === null) {
        throw $T0B().MakeArgumentItemNullException(i, arrayName);
      }
    }
  };

  function ContractUtils_RequiresNotNullItems$b1$0A (T, collection, collectionName) {
    var $im00 = $asm01.System.Collections.Generic.IEnumerable$b1.Of(T).GetEnumerator;
    var $im01 = $asm01.System.Collections.Generic.IEnumerator$b1.Of(T).get_Current;
    $thisType.RequiresNotNull(collection, collectionName);
    var i = 0;
    var enumerator = $im00.Call(collection, null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var item = JSIL.CloneParameter(T, $im01.Call(enumerator, null));
        if (item === null) {
          throw $T0B().MakeArgumentItemNullException(i, collectionName);
        }
        i = ((i + 1) | 0);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  };

  function ContractUtils_Result$b1 (T) {
    return (
      T.IsValueType
         ? JSIL.CreateInstanceOfType(T)
         : null)
    ;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.ContractUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Assert", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContractUtils_Assert
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "Ensures", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContractUtils_Ensures$00
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["FALSE"]; });

    $.Method({Static:true , Public:true }, "Ensures", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String]), 
      ContractUtils_Ensures$01
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["FALSE"]; });

    $.Method({Static:true , Public:true }, "Invariant", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContractUtils_Invariant$02
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["FALSE"]; });

    $.Method({Static:true , Public:true }, "Invariant", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String]), 
      ContractUtils_Invariant$03
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["FALSE"]; });

    $.Method({Static:true , Public:true }, "Old", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      ContractUtils_Old$b1
    );

    $.Method({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature("!!0", [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"]), 
      ContractUtils_Parameter$b1
    );

    $.Method({Static:true , Public:true }, "Requires", 
      JSIL.MethodSignature.Action($.Boolean), 
      ContractUtils_Requires$04
    );

    $.Method({Static:true , Public:true }, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String]), 
      ContractUtils_Requires$05
    );

    $.Method({Static:true , Public:true }, "Requires", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.String
        ]), 
      ContractUtils_Requires$06
    );

    $.Method({Static:true , Public:true }, "RequiresArrayIndex", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.String
        ], ["T"]), 
      ContractUtils_RequiresArrayIndex$b1
    );

    $.Method({Static:true , Public:true }, "RequiresArrayIndex", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ]), 
      ContractUtils_RequiresArrayIndex
    );

    $.Method({Static:true , Public:true }, "RequiresArrayInsertIndex", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.String
        ], ["T"]), 
      ContractUtils_RequiresArrayInsertIndex$b1
    );

    $.Method({Static:true , Public:true }, "RequiresArrayInsertIndex", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ]), 
      ContractUtils_RequiresArrayInsertIndex
    );

    $.Method({Static:true , Public:true }, "RequiresArrayRange", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.Int32, $.String, 
          $.String
        ], ["T"]), 
      ContractUtils_RequiresArrayRange$b1
    );

    $.Method({Static:true , Public:true }, "RequiresArrayRange", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.String, 
          $.String
        ]), 
      ContractUtils_RequiresArrayRange$07
    );

    $.Method({Static:true , Public:true }, "RequiresArrayRange", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.String, 
          $.String
        ]), 
      ContractUtils_RequiresArrayRange$08
    );

    $.Method({Static:true , Public:true }, "RequiresListRange", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.IList"), $.Int32, 
          $.Int32, $.String, 
          $.String
        ]), 
      ContractUtils_RequiresListRange
    );

    $.Method({Static:true , Public:true }, "RequiresNotEmpty", 
      new JSIL.MethodSignature(null, [$.String, $.String]), 
      ContractUtils_RequiresNotEmpty
    );

    $.Method({Static:true , Public:true }, "RequiresNotEmpty", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $.String], ["T"]), 
      ContractUtils_RequiresNotEmpty$b1
    );

    $.Method({Static:true , Public:true }, "RequiresNotNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String]), 
      ContractUtils_RequiresNotNull
    );

    $.Method({Static:true , Public:true }, "RequiresNotNullItems", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.String], ["T"]), 
      ContractUtils_RequiresNotNullItems$b1$09
    );

    $.Method({Static:true , Public:true }, "RequiresNotNullItems", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.String], ["T"]), 
      ContractUtils_RequiresNotNullItems$b1$0A
    );

    $.Method({Static:true , Public:true }, "Result", 
      new JSIL.MethodSignature("!!0", null, ["T"]), 
      ContractUtils_Result$b1
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.DynamicUtils */ 

(function DynamicUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm04.System.Dynamic.DynamicMetaObject))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.System.Dynamic.DynamicMetaObject)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.System.Dynamic.DynamicMetaObjectBinder)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.System.Dynamic.IDynamicMetaObjectProvider)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.System.Dynamic.BindingRestrictions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Dynamic.BindingRestrictions"), 
        $asm01.TypeRef("System.Object")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm04.System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject)) ();
  };

  function DynamicUtils_GetExpressions (objects) {
    $T01().RequiresNotNull(objects, "objects");
    var res = JSIL.Array.New($T03(), objects.length);

    for (var i = 0; i < (objects.length | 0); i = ((i + 1) | 0)) {
      var mo = objects[i];
      res[i] = (
        (mo !== null)
           ? mo.get_Expression()
           : null)
      ;
    }
    return res;
  };

  function DynamicUtils_LightBind$b1 (T, binder, args, compilationThreshold) {
    $T01().RequiresNotNull(binder, "binder");
    $T01().RequiresNotNull(args, "args");
    return $asm00.Microsoft.Scripting.Utils.DynamicUtils_GenericInterpretedBinder$b1.Of(T).prototype.Bind.call($asm00.Microsoft.Scripting.Utils.DynamicUtils_GenericInterpretedBinder$b1.Of(T).Instance, binder, (
        ((compilationThreshold | 0) < 0)
           ? 32
           : compilationThreshold)
      , args);
  };

  function DynamicUtils_ObjectToMetaObject (argValue, parameterExpression) {
    var ido = $T0A().$As(argValue);
    if (ido !== null) {
      var result = $IM00().Call(ido, null, parameterExpression);
    } else {
      result = $S00().Construct(parameterExpression, $T0B().Empty, argValue);
    }
    return result;
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.DynamicUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetExpressions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Dynamic.DynamicMetaObject")])]), 
      DynamicUtils_GetExpressions
    );

    $.Method({Static:true , Public:true }, "LightBind", 
      new JSIL.MethodSignature("!!0", [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ], ["T"]), 
      DynamicUtils_LightBind$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ObjectToMetaObject", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Dynamic.DynamicMetaObject"), [$.Object, $asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      DynamicUtils_ObjectToMetaObject
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.DynamicUtils+GenericInterpretedBinder`1 */ 

(function GenericInterpretedBinder$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of($asm04.System.Linq.Expressions.Expression))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.System.Linq.Expressions.ParameterExpression)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.System.Runtime.CompilerServices.CallSiteBinder)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.System.Dynamic.DynamicMetaObjectBinder)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.System.Dynamic.DynamicMetaObject)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm04.System.Linq.Expressions.ParameterExpression))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm04.System.Dynamic.DynamicMetaObject))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.System.Dynamic.BindingRestrictions)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.System.Linq.Expressions.ConditionalExpression)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.Microsoft.Scripting.Ast.Utils)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.CompilerHelpers)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [$asm01.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm04.TypeRef("System.Linq.Expressions.LabelTarget")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.InvocationExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.PropertyInfo")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
        $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.String"), 
        $asm01.TypeRef("System.Boolean"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
      ], ["TDelegate"]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), $asm01.TypeRef("System.Int32")], ["T"]))) ();
  };

  function GenericInterpretedBinder$b1__ctor () {
    var invokeMethod = $thisType.T.get(this).GetMethod("Invoke");
    var methodParams = invokeMethod.GetParameters();
    var prms = $S00().Construct(methodParams.length);
    var invokePrms = $S01().Construct(methodParams.length);

    for (var i = 0; i < (methodParams.length | 0); i = ((i + 1) | 0)) {
      var param = $T08().Parameter((methodParams[i]).get_ParameterType());
      if (i === 0) {
        invokePrms.Add($T08().Convert(param, $asm04.System.Runtime.CompilerServices.CallSite$b1.Of($thisType.T.get(this)).__Type__));
      } else {
        invokePrms.Add(param);
      }
      prms.Add(param);
    }
    this._parameters = prms.ToReadOnlyCollection();
    this._updateExpression = $S02().CallStatic($T08(), "Block", null, 
      $S03().CallStatic($T08(), "Label", null, $T0A().get_UpdateLabel()), 
      $S04().CallStatic($T08(), "Invoke", null, 
        $S05().CallStatic($T08(), "Property", null, 
          invokePrms.get_Item(0), 
          $T0B().GetDeclaredProperty($asm04.System.Runtime.CompilerServices.CallSite$b1.Of($thisType.T.get(this)).__Type__, "Update")
        ), 
        invokePrms.ToReadOnlyCollection()
      )
    );
  };

  function GenericInterpretedBinder$b1_Bind (binder, compilationThreshold, args) {
    if (!(($asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1.Of($thisType.T.get(this)).LastInterpretedFailure === null) || ($asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1.Of($thisType.T.get(this)).LastInterpretedFailure.Binder !== binder))) {
      var res = $asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1.Of($thisType.T.get(this)).LastInterpretedFailure.CompiledTarget;
      $asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1.Of($thisType.T.get(this)).LastInterpretedFailure = null;
      var result = JSIL.CloneParameter($thisType.T.get(this), res);
    } else {
      var bindingInfo = new ($asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1.Of($thisType.T.get(this))) (binder, compilationThreshold);
      var targetMO = $T0E().Create(args[0], (this._parameters).get_Item(1));
      var argsMO = JSIL.Array.New($T0E(), (((args.length | 0) - 1) | 0));

      for (var i = 0; i < (argsMO.length | 0); i = ((i + 1) | 0)) {
        argsMO[i] = $T0E().Create(args[((i + 1) | 0)], (this._parameters).get_Item(((i + 2) | 0)));
      }
      var binding = binder.Bind(targetMO, argsMO);
      result = JSIL.CloneParameter($thisType.T.get(this), $thisType.Of($thisType.T.get(this)).prototype.CreateDelegate.call(this, binding, bindingInfo));
    }
    return result;
  };

  function GenericInterpretedBinder$b1_Compile (obj, bindingInfo) {
    var restrictions = (obj.get_Restrictions()).ToExpression();
    var body = $T08().Condition(new ($asm00.Microsoft.Scripting.Utils.DynamicUtils_GenericInterpretedBinder$b1_InterpretedRuleHitCheckExpression.Of($thisType.T.get(this))) (restrictions, bindingInfo), $T13().Convert(
        obj.get_Expression(), 
        (this._updateExpression).get_Type()
      ), this._updateExpression);
    var res = $S06().CallStatic($T08(), "Lambda$b1", [$thisType.T.get(this)], body, "CallSite.Target", true, this._parameters);
    bindingInfo.Target = res;
    return res;
  };

  function GenericInterpretedBinder$b1_CreateDelegate (binding, bindingInfo) {
    return $S07().CallStatic($T14(), "LightCompile$b1", [$thisType.T.get(this)], $thisType.Of($thisType.T.get(this)).prototype.Compile.call(this, binding, bindingInfo), 2147483647);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.DynamicUtils+GenericInterpretedBinder`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      GenericInterpretedBinder$b1__ctor
    );

    $.Method({Static:false, Public:true }, "Bind", 
      new JSIL.MethodSignature($.GenericParameter("T"), [
          $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ]), 
      GenericInterpretedBinder$b1_Bind
    );

    $.Method({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("T")]), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo`1", [$.GenericParameter("T")])]), 
      GenericInterpretedBinder$b1_Compile
    );

    $.Method({Static:false, Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm04.TypeRef("System.Dynamic.DynamicMetaObject"), $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo`1", [$.GenericParameter("T")])]), 
      GenericInterpretedBinder$b1_CreateDelegate
    );

    $.Field({Static:true , Public:true }, "Instance", $asm00.TypeRef("Microsoft.Scripting.Utils.DynamicUtils+GenericInterpretedBinder`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_updateExpression", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    function GenericInterpretedBinder$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).Instance = new ($thisType.Of($thisType.T.get(this))) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GenericInterpretedBinder$b1__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.DynamicUtils+GenericInterpretedBinder`1+InterpretedRuleHitCheckExpression */ 

(function InterpretedRuleHitCheckExpression$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CachedBindingInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.LightCompiler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Interpreter.InstructionList)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.System.Linq.Expressions.ExpressionVisitor)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm01.TypeRef("System.Object")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")]))) ();
  };

  function InterpretedRuleHitCheckExpression__ctor (test, bindingInfo) {
    $T02().prototype._ctor.call(this);
    this._test = test;
    this._bindingInfo = bindingInfo;
  };

  function InterpretedRuleHitCheckExpression_AddInstructions (compiler) {
    compiler.Compile(this._test);
    $S00().CallVirtual("EmitLoad", null, compiler.get_Instructions(), this._bindingInfo);
    compiler.EmitCall($thisType.Of($thisType.T.get(this)).InterpretedCallSiteTest);
  };

  function InterpretedRuleHitCheckExpression_get_CanReduce () {
    return true;
  };

  function InterpretedRuleHitCheckExpression_get_NodeType () {
    return $T06().Extension;
  };

  function InterpretedRuleHitCheckExpression_get_Type () {
    return $T07().__Type__;
  };

  function InterpretedRuleHitCheckExpression_Reduce () {
    return this._test;
  };

  function InterpretedRuleHitCheckExpression_VisitChildren (visitor) {
    var test = $S01().CallVirtual("Visit", null, visitor, this._test);
    if (test !== this._test) {
      var result = new ($thisType.Of($thisType.T.get(this))) (test, this._bindingInfo);
    } else {
      result = this;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "Microsoft.Scripting.Utils.DynamicUtils+GenericInterpretedBinder`1+InterpretedRuleHitCheckExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo")]), 
      InterpretedRuleHitCheckExpression__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "AddInstructions", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Scripting.Interpreter.LightCompiler")), 
      InterpretedRuleHitCheckExpression_AddInstructions
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      JSIL.MethodSignature.Return($.Boolean), 
      InterpretedRuleHitCheckExpression_get_CanReduce
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.ExpressionType")), 
      InterpretedRuleHitCheckExpression_get_NodeType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      InterpretedRuleHitCheckExpression_get_Type
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Reduce", 
      JSIL.MethodSignature.Return($asm04.TypeRef("System.Linq.Expressions.Expression")), 
      InterpretedRuleHitCheckExpression_Reduce
    );

    $.Method({Static:false, Public:false, Virtual:true }, "VisitChildren", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ExpressionVisitor")]), 
      InterpretedRuleHitCheckExpression_VisitChildren
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindingInfo", $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "InterpretedCallSiteTest", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    function InterpretedRuleHitCheckExpression__cctor () {
      $thisType.Of($thisType.T.get(this)).InterpretedCallSiteTest = $T01().__Type__.GetMethod("InterpretedCallSiteTest");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      InterpretedRuleHitCheckExpression__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm04.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Scripting.Interpreter.IInstructionProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CachedBindingInfo */ 

(function CachedBindingInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Dynamic.DynamicMetaObjectBinder)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };

  function CachedBindingInfo__ctor (binder, compilationThreshold) {
    this.Binder = binder;
    this.CompilationThreshold = (compilationThreshold | 0);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CachedBindingInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32]), 
      CachedBindingInfo__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Binder", $asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder")); 
    $.Field({Static:false, Public:true }, "CompilationThreshold", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CachedBindingInfo`1 */ 

(function CachedBindingInfo$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.System.Dynamic.DynamicMetaObjectBinder)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CachedBindingInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Threading.ThreadPool)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Threading.WaitCallback)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function CachedBindingInfo$b1__ctor (binder, compilationThreshold) {
    $T02().prototype._ctor.call(this, binder, compilationThreshold);
  };

  function CachedBindingInfo$b1_CheckCompiled () {
    if (this.Target !== null) {
      var $closure0 = new ($asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1_$l$gc__DisplayClass2.Of($thisType.T.get(this))) ();
      $closure0.$l$g4__this = this;
      $closure0.lambda = $T03().Exchange$b1($asm04.System.Linq.Expressions.Expression$b1.Of($thisType.T.get(this)))(/* ref */ new JSIL.MemberReference(this, "Target"), null);
      if ($closure0.lambda !== null) {
        $T04().QueueUserWorkItem($T05().New($closure0, $asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1_$l$gc__DisplayClass2.Of($thisType.T.get(this)).prototype.$lCheckCompiled$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.CachedBindingInfo$b1_$l$gc__DisplayClass2.Of($thisType.T.get(this)), "$lCheckCompiled$gb__0", JSIL.MethodSignature.Action($.Object), false); }));
      }
    }
    if (this.CompiledTarget !== null) {
      $thisType.Of($thisType.T.get(this)).LastInterpretedFailure = this;
      var result = false;
    } else {
      result = true;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo"), 
      Name: "Microsoft.Scripting.Utils.CachedBindingInfo`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.Int32]), 
      CachedBindingInfo$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CheckCompiled", 
      JSIL.MethodSignature.Return($.Boolean), 
      CachedBindingInfo$b1_CheckCompiled
    );

    $.Field({Static:false, Public:true }, "CompiledTarget", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "Target", $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("T")])); 
    $.Field({Static:true , Public:true }, "LastInterpretedFailure", $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo`1", [$.GenericParameter("T")]))
      .Attribute($asm01.TypeRef("System.ThreadStaticAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.CachedBindingInfo`1+<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };

  function $l$gc__DisplayClass2__ctor () {
  };

  function $l$gc__DisplayClass2_$lCheckCompiled$gb__0 (x) {
    var $s00 = new JSIL.MethodSignature($thisType.T.get(this), null);
    this.$l$g4__this.CompiledTarget = JSIL.CloneParameter($thisType.T.get(this), $s00.CallVirtual("Compile", null, this.lambda));
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.CachedBindingInfo`1+<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass2__ctor
    );

    $.Method({Static:false, Public:true }, "$lCheckCompiled$gb__0", 
      JSIL.MethodSignature.Action($.Object), 
      $l$gc__DisplayClass2_$lCheckCompiled$gb__0
    );

    $.Field({Static:false, Public:true }, "lambda", $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Scripting.Utils.CachedBindingInfo`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Strings */ 

(function Strings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Globalization.CultureInfo)) ();
  };

  function Strings_CanotEmitConstant (p0, p1) {
    return $thisType.FormatString("Cannot emit constant {0} ({1})", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_CantAddCasing (p0) {
    return $thisType.FormatString("can't add another casing for identifier {0}", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_CantAddIdentifier (p0) {
    return $thisType.FormatString("can't add new identifier {0}", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_CantCreateDefaultTypeFor (p0) {
    return $thisType.FormatString("Cannot create default value for type {0}.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_ExpectedBoundEvent (p0) {
    return $thisType.FormatString("expected bound event, got {0}.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_ExtensionMustBePublic (p0) {
    return $thisType.FormatString("Extension type {0} must be public.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_FieldReadonly (p0) {
    return $thisType.FormatString("Field {0} is read-only", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_FormatString (format, args) {
    return $T01().Format($T03().get_CurrentCulture(), format, args);
  };

  function Strings_get_AlreadyInitialized () {
    return "Already initialized.";
  };

  function Strings_get_ArrayTypeMustBeArray () {
    return "arrayType must be an array type";
  };

  function Strings_get_CannotChangeNonCachingValue () {
    return "Cannot change non-caching value.";
  };

  function Strings_get_CannotHaveFaultAndFinally () {
    return "Can not have fault and finally.";
  };

  function Strings_get_CantReadProperty () {
    return "can't read from property";
  };

  function Strings_get_CantWriteProperty () {
    return "can't write to property";
  };

  function Strings_get_CountCannotBeNegative () {
    return "Count must be non-negative.";
  };

  function Strings_get_DictionaryNotHashable () {
    return "Dictionaries are not hashable.";
  };

  function Strings_get_EmptyStringIsInvalidPath () {
    return "Empty string is not a valid path.";
  };

  function Strings_get_EnumerationFinished () {
    return "Enumeration already finished.";
  };

  function Strings_get_EnumerationNotStarted () {
    return "Enumeration has not started. Call MoveNext.";
  };

  function Strings_get_ExpectedStaticProperty () {
    return "expected only static property";
  };

  function Strings_get_FaultAlreadyDefined () {
    return "Fault already defined.";
  };

  function Strings_get_FieldDoesNotExist () {
    return "Field doesn't exist on provided type";
  };

  function Strings_get_FinallyAlreadyDefined () {
    return "Finally already defined.";
  };

  function Strings_get_FirstArgumentMustBeCallSite () {
    return "RuleBuilder can only be used with delegates whose first argument is CallSite.";
  };

  function Strings_get_GenNonSerializableBinder () {
    return "Generating code from non-serializable CallSiteBinder.";
  };

  function Strings_get_GlobalsMustBeUnique () {
    return "Global/top-level local variable names must be unique.";
  };

  function Strings_get_InvalidArgumentValue () {
    return "Invalid argument value";
  };

  function Strings_get_InvalidAsmNameOrExtension () {
    return "Invalid assembly name or file extension.";
  };

  function Strings_get_InvalidDelegate () {
    return "Invalid delegate type (Invoke method not found).";
  };

  function Strings_get_InvalidOutputDir () {
    return "Invalid output directory.";
  };

  function Strings_get_InvalidParamNumForService () {
    return "Invalid number of parameters for the service.";
  };

  function Strings_get_InvalidPath () {
    return "pecified path is invalid.";
  };

  function Strings_get_LanguageRegistered () {
    return "language already registered.";
  };

  function Strings_get_MethodOrOperatorNotImplemented () {
    return "The method or operation is not implemented.";
  };

  function Strings_get_MethodPreconditionViolated () {
    return "Method precondition violated";
  };

  function Strings_get_MissingTarget () {
    return "Missing Target.";
  };

  function Strings_get_MissingTest () {
    return "Missing Test.";
  };

  function Strings_get_MustBeExceptionInstance () {
    return "must by an Exception instance";
  };

  function Strings_get_MustHaveCodeOrTarget () {
    return "Either code or target must be specified.";
  };

  function Strings_get_MustReturnScopeExtension () {
    return "CreateScopeExtension must return a scope extension.";
  };

  function Strings_get_NoCodeToCompile () {
    return "No code to compile.";
  };

  function Strings_get_NoDefaultValue () {
    return "No default value for a given type.";
  };

  function Strings_get_NoException () {
    return "No exception.";
  };

  function Strings_get_NoInstanceForCall () {
    return "no instance for call.";
  };

  function Strings_get_NonEmptyCollectionRequired () {
    return "Non-empty collection required";
  };

  function Strings_get_NonEmptyStringRequired () {
    return "Non-empty string required";
  };

  function Strings_get_PropertyDoesNotExist () {
    return "Property doesn't exist on the provided type";
  };

  function Strings_get_QueueEmpty () {
    return "Queue empty.";
  };

  function Strings_get_TypeDoesNotHaveConstructorForTheSignature () {
    return "Type doesn't have constructor with a given signature";
  };

  function Strings_get_TypeDoesNotHaveMethodForName () {
    return "Type doesn't have a method with a given name.";
  };

  function Strings_get_TypeDoesNotHaveMethodForNameSignature () {
    return "Type doesn't have a method with a given name and signature.";
  };

  function Strings_get_TypeOfExpressionMustBeBool () {
    return "Type of the expression must be bool";
  };

  function Strings_get_TypeOfTestMustBeBool () {
    return "Type of test must be bool";
  };

  function Strings_get_UnknownLanguageProviderType () {
    return "Specified language provider type is not registered.";
  };

  function Strings_IllegalNew_GenericParams (p0) {
    return $thisType.FormatString("Cannot create instance of {0} because it contains generic parameters", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_InvalidArgumentType (p0, p1) {
    return $thisType.FormatString("Invalid type of argument {0}; expecting {1}.", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_InvalidCast (p0, p1) {
    return $thisType.FormatString("Cannot cast from type '{0}' to type '{1}", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_InvalidCtorImplementation (p0, p1) {
    return $thisType.FormatString("Type '{0}' doesn't provide a suitable public constructor or its implementation is faulty: {1}", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_InvalidOperation (p0) {
    return $thisType.FormatString("Invalid operation: '{0}'", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_InvalidOperation_ContainsGenericParameters (p0, p1) {
    return $thisType.FormatString("Cannot access member {1} declared on type {0} because the type contains generic parameters.", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_InvalidStreamType (p0) {
    return $thisType.FormatString("Invalid stream type: {0}.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_MemberWriteOnly (p0) {
    return $thisType.FormatString("can only write to member {0}.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_MissingType (p0) {
    return $thisType.FormatString("Type '{0}' is missing or cannot be loaded.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_NameNotDefined (p0) {
    return $thisType.FormatString("name '{0}' not defined", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_NoCallableMethods (p0, p1) {
    return $thisType.FormatString("{0}.{1} has no publiclly visible method.", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_NoExplicitCast (p0, p1) {
    return $thisType.FormatString("No explicit cast from {0} to {1}", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_NoImplicitCast (p0, p1) {
    return $thisType.FormatString("No implicit cast from {0} to {1}", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_NonGenericWithGenericGroup (p0) {
    return $thisType.FormatString("The operation requires a non-generic type for {0}, but this represents generic types only", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_PropertyReadonly (p0) {
    return $thisType.FormatString("Property {0} is read-only", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_StaticAccessFromInstanceError (p0, p1) {
    return $thisType.FormatString("static property \"{0}\" of \"{1}\" can only be read through a type, not an instance", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_StaticAssignmentFromInstanceError (p0, p1) {
    return $thisType.FormatString("static property \"{0}\" of \"{1}\" can only be assigned to through a type, not an instance", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_TypeParameterIsNotDelegate (p0) {
    return $thisType.FormatString("Type parameter is {0}. Expected a delegate.", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_UnexpectedEvent (p0, p1, p2, p3) {
    return $thisType.FormatString("Expected event from {0}.{1}, got event from {2}.{3}.", JSIL.Array.New($T00(), [p0, p1, p2, p3]));
  };

  function Strings_UnexpectedType (p0, p1) {
    return $thisType.FormatString("Expected type {0}, got {1}.", JSIL.Array.New($T00(), [p0, p1]));
  };

  function Strings_UnhandledConvert (p0) {
    return $thisType.FormatString("Unhandled convert: {0}", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_UnknownMemberType (p0) {
    return $thisType.FormatString("unknown member type: '{0}'. ", JSIL.Array.New($T00(), [p0]));
  };

  function Strings_VerificationException (p0, p1, p2) {
    return $thisType.FormatString("Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n", JSIL.Array.New($T00(), [p0, p1, p2]));
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Strings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "CanotEmitConstant", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_CanotEmitConstant
    );

    $.Method({Static:true , Public:false}, "CantAddCasing", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_CantAddCasing
    );

    $.Method({Static:true , Public:false}, "CantAddIdentifier", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_CantAddIdentifier
    );

    $.Method({Static:true , Public:false}, "CantCreateDefaultTypeFor", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_CantCreateDefaultTypeFor
    );

    $.Method({Static:true , Public:false}, "ExpectedBoundEvent", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_ExpectedBoundEvent
    );

    $.Method({Static:true , Public:false}, "ExtensionMustBePublic", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_ExtensionMustBePublic
    );

    $.Method({Static:true , Public:false}, "FieldReadonly", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_FieldReadonly
    );

    $.Method({Static:true , Public:false}, "FormatString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])]), 
      Strings_FormatString
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:false}, "get_AlreadyInitialized", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_AlreadyInitialized
    );

    $.Method({Static:true , Public:false}, "get_ArrayTypeMustBeArray", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_ArrayTypeMustBeArray
    );

    $.Method({Static:true , Public:false}, "get_CannotChangeNonCachingValue", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_CannotChangeNonCachingValue
    );

    $.Method({Static:true , Public:false}, "get_CannotHaveFaultAndFinally", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_CannotHaveFaultAndFinally
    );

    $.Method({Static:true , Public:false}, "get_CantReadProperty", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_CantReadProperty
    );

    $.Method({Static:true , Public:false}, "get_CantWriteProperty", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_CantWriteProperty
    );

    $.Method({Static:true , Public:false}, "get_CountCannotBeNegative", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_CountCannotBeNegative
    );

    $.Method({Static:true , Public:false}, "get_DictionaryNotHashable", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_DictionaryNotHashable
    );

    $.Method({Static:true , Public:false}, "get_EmptyStringIsInvalidPath", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_EmptyStringIsInvalidPath
    );

    $.Method({Static:true , Public:false}, "get_EnumerationFinished", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_EnumerationFinished
    );

    $.Method({Static:true , Public:false}, "get_EnumerationNotStarted", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_EnumerationNotStarted
    );

    $.Method({Static:true , Public:false}, "get_ExpectedStaticProperty", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_ExpectedStaticProperty
    );

    $.Method({Static:true , Public:false}, "get_FaultAlreadyDefined", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_FaultAlreadyDefined
    );

    $.Method({Static:true , Public:false}, "get_FieldDoesNotExist", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_FieldDoesNotExist
    );

    $.Method({Static:true , Public:false}, "get_FinallyAlreadyDefined", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_FinallyAlreadyDefined
    );

    $.Method({Static:true , Public:false}, "get_FirstArgumentMustBeCallSite", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_FirstArgumentMustBeCallSite
    );

    $.Method({Static:true , Public:false}, "get_GenNonSerializableBinder", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_GenNonSerializableBinder
    );

    $.Method({Static:true , Public:false}, "get_GlobalsMustBeUnique", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_GlobalsMustBeUnique
    );

    $.Method({Static:true , Public:false}, "get_InvalidArgumentValue", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_InvalidArgumentValue
    );

    $.Method({Static:true , Public:false}, "get_InvalidAsmNameOrExtension", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_InvalidAsmNameOrExtension
    );

    $.Method({Static:true , Public:false}, "get_InvalidDelegate", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_InvalidDelegate
    );

    $.Method({Static:true , Public:false}, "get_InvalidOutputDir", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_InvalidOutputDir
    );

    $.Method({Static:true , Public:false}, "get_InvalidParamNumForService", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_InvalidParamNumForService
    );

    $.Method({Static:true , Public:false}, "get_InvalidPath", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_InvalidPath
    );

    $.Method({Static:true , Public:false}, "get_LanguageRegistered", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_LanguageRegistered
    );

    $.Method({Static:true , Public:false}, "get_MethodOrOperatorNotImplemented", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MethodOrOperatorNotImplemented
    );

    $.Method({Static:true , Public:false}, "get_MethodPreconditionViolated", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MethodPreconditionViolated
    );

    $.Method({Static:true , Public:false}, "get_MissingTarget", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MissingTarget
    );

    $.Method({Static:true , Public:false}, "get_MissingTest", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MissingTest
    );

    $.Method({Static:true , Public:false}, "get_MustBeExceptionInstance", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MustBeExceptionInstance
    );

    $.Method({Static:true , Public:false}, "get_MustHaveCodeOrTarget", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MustHaveCodeOrTarget
    );

    $.Method({Static:true , Public:false}, "get_MustReturnScopeExtension", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_MustReturnScopeExtension
    );

    $.Method({Static:true , Public:false}, "get_NoCodeToCompile", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_NoCodeToCompile
    );

    $.Method({Static:true , Public:false}, "get_NoDefaultValue", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_NoDefaultValue
    );

    $.Method({Static:true , Public:false}, "get_NoException", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_NoException
    );

    $.Method({Static:true , Public:false}, "get_NoInstanceForCall", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_NoInstanceForCall
    );

    $.Method({Static:true , Public:false}, "get_NonEmptyCollectionRequired", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_NonEmptyCollectionRequired
    );

    $.Method({Static:true , Public:false}, "get_NonEmptyStringRequired", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_NonEmptyStringRequired
    );

    $.Method({Static:true , Public:false}, "get_PropertyDoesNotExist", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_PropertyDoesNotExist
    );

    $.Method({Static:true , Public:false}, "get_QueueEmpty", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_QueueEmpty
    );

    $.Method({Static:true , Public:false}, "get_TypeDoesNotHaveConstructorForTheSignature", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_TypeDoesNotHaveConstructorForTheSignature
    );

    $.Method({Static:true , Public:false}, "get_TypeDoesNotHaveMethodForName", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_TypeDoesNotHaveMethodForName
    );

    $.Method({Static:true , Public:false}, "get_TypeDoesNotHaveMethodForNameSignature", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_TypeDoesNotHaveMethodForNameSignature
    );

    $.Method({Static:true , Public:false}, "get_TypeOfExpressionMustBeBool", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_TypeOfExpressionMustBeBool
    );

    $.Method({Static:true , Public:false}, "get_TypeOfTestMustBeBool", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_TypeOfTestMustBeBool
    );

    $.Method({Static:true , Public:false}, "get_UnknownLanguageProviderType", 
      JSIL.MethodSignature.Return($.String), 
      Strings_get_UnknownLanguageProviderType
    );

    $.Method({Static:true , Public:false}, "IllegalNew_GenericParams", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_IllegalNew_GenericParams
    );

    $.Method({Static:true , Public:false}, "InvalidArgumentType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_InvalidArgumentType
    );

    $.Method({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_InvalidCast
    );

    $.Method({Static:true , Public:false}, "InvalidCtorImplementation", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_InvalidCtorImplementation
    );

    $.Method({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_InvalidOperation
    );

    $.Method({Static:true , Public:false}, "InvalidOperation_ContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_InvalidOperation_ContainsGenericParameters
    );

    $.Method({Static:true , Public:false}, "InvalidStreamType", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_InvalidStreamType
    );

    $.Method({Static:true , Public:false}, "MemberWriteOnly", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_MemberWriteOnly
    );

    $.Method({Static:true , Public:false}, "MissingType", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_MissingType
    );

    $.Method({Static:true , Public:false}, "NameNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_NameNotDefined
    );

    $.Method({Static:true , Public:false}, "NoCallableMethods", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_NoCallableMethods
    );

    $.Method({Static:true , Public:false}, "NoExplicitCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_NoExplicitCast
    );

    $.Method({Static:true , Public:false}, "NoImplicitCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_NoImplicitCast
    );

    $.Method({Static:true , Public:false}, "NonGenericWithGenericGroup", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_NonGenericWithGenericGroup
    );

    $.Method({Static:true , Public:false}, "PropertyReadonly", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_PropertyReadonly
    );

    $.Method({Static:true , Public:false}, "StaticAccessFromInstanceError", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_StaticAccessFromInstanceError
    );

    $.Method({Static:true , Public:false}, "StaticAssignmentFromInstanceError", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_StaticAssignmentFromInstanceError
    );

    $.Method({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_TypeParameterIsNotDelegate
    );

    $.Method({Static:true , Public:false}, "UnexpectedEvent", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      Strings_UnexpectedEvent
    );

    $.Method({Static:true , Public:false}, "UnexpectedType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object]), 
      Strings_UnexpectedType
    );

    $.Method({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_UnhandledConvert
    );

    $.Method({Static:true , Public:false}, "UnknownMemberType", 
      new JSIL.MethodSignature($.String, [$.Object]), 
      Strings_UnknownMemberType
    );

    $.Method({Static:true , Public:false}, "VerificationException", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ]), 
      Strings_VerificationException
    );

    $.Property({Static:true , Public:false}, "MethodPreconditionViolated", $.String);

    $.Property({Static:true , Public:false}, "InvalidArgumentValue", $.String);

    $.Property({Static:true , Public:false}, "NonEmptyStringRequired", $.String);

    $.Property({Static:true , Public:false}, "NonEmptyCollectionRequired", $.String);

    $.Property({Static:true , Public:false}, "MustBeExceptionInstance", $.String);

    $.Property({Static:true , Public:false}, "TypeOfTestMustBeBool", $.String);

    $.Property({Static:true , Public:false}, "TypeOfExpressionMustBeBool", $.String);

    $.Property({Static:true , Public:false}, "EmptyStringIsInvalidPath", $.String);

    $.Property({Static:true , Public:false}, "InvalidDelegate", $.String);

    $.Property({Static:true , Public:false}, "ExpectedStaticProperty", $.String);

    $.Property({Static:true , Public:false}, "PropertyDoesNotExist", $.String);

    $.Property({Static:true , Public:false}, "FieldDoesNotExist", $.String);

    $.Property({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", $.String);

    $.Property({Static:true , Public:false}, "TypeDoesNotHaveMethodForName", $.String);

    $.Property({Static:true , Public:false}, "TypeDoesNotHaveMethodForNameSignature", $.String);

    $.Property({Static:true , Public:false}, "CountCannotBeNegative", $.String);

    $.Property({Static:true , Public:false}, "ArrayTypeMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "MustHaveCodeOrTarget", $.String);

    $.Property({Static:true , Public:false}, "FirstArgumentMustBeCallSite", $.String);

    $.Property({Static:true , Public:false}, "NoInstanceForCall", $.String);

    $.Property({Static:true , Public:false}, "MissingTest", $.String);

    $.Property({Static:true , Public:false}, "MissingTarget", $.String);

    $.Property({Static:true , Public:false}, "FinallyAlreadyDefined", $.String);

    $.Property({Static:true , Public:false}, "CannotHaveFaultAndFinally", $.String);

    $.Property({Static:true , Public:false}, "FaultAlreadyDefined", $.String);

    $.Property({Static:true , Public:false}, "GlobalsMustBeUnique", $.String);

    $.Property({Static:true , Public:false}, "GenNonSerializableBinder", $.String);

    $.Property({Static:true , Public:false}, "InvalidPath", $.String);

    $.Property({Static:true , Public:false}, "DictionaryNotHashable", $.String);

    $.Property({Static:true , Public:false}, "LanguageRegistered", $.String);

    $.Property({Static:true , Public:false}, "MethodOrOperatorNotImplemented", $.String);

    $.Property({Static:true , Public:false}, "NoException", $.String);

    $.Property({Static:true , Public:false}, "AlreadyInitialized", $.String);

    $.Property({Static:true , Public:false}, "MustReturnScopeExtension", $.String);

    $.Property({Static:true , Public:false}, "InvalidParamNumForService", $.String);

    $.Property({Static:true , Public:false}, "CannotChangeNonCachingValue", $.String);

    $.Property({Static:true , Public:false}, "NoCodeToCompile", $.String);

    $.Property({Static:true , Public:false}, "QueueEmpty", $.String);

    $.Property({Static:true , Public:false}, "EnumerationNotStarted", $.String);

    $.Property({Static:true , Public:false}, "EnumerationFinished", $.String);

    $.Property({Static:true , Public:false}, "InvalidOutputDir", $.String);

    $.Property({Static:true , Public:false}, "InvalidAsmNameOrExtension", $.String);

    $.Property({Static:true , Public:false}, "NoDefaultValue", $.String);

    $.Property({Static:true , Public:false}, "UnknownLanguageProviderType", $.String);

    $.Property({Static:true , Public:false}, "CantReadProperty", $.String);

    $.Property({Static:true , Public:false}, "CantWriteProperty", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Error */ 

(function Error$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.InvalidOperationException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Strings)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.ArgumentTypeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.MissingMemberException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.MemberAccessException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.Microsoft.Scripting.InvalidImplementationException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.TypeLoadException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Security.VerificationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.InvalidOperationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.ArgumentTypeException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.MissingMemberException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.MemberAccessException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("Microsoft.Scripting.InvalidImplementationException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.TypeLoadException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Security.VerificationException"), [$asm01.TypeRef("System.String")]))) ();
  };

  function Error_AlreadyInitialized () {
    return $S00().Construct($T01().get_AlreadyInitialized());
  };

  function Error_CannotChangeNonCachingValue () {
    return $S01().Construct($T01().get_CannotChangeNonCachingValue());
  };

  function Error_CannotHaveFaultAndFinally () {
    return $S00().Construct($T01().get_CannotHaveFaultAndFinally());
  };

  function Error_CanotEmitConstant (p0, p1) {
    return $S01().Construct($T01().CanotEmitConstant(p0, p1));
  };

  function Error_CantAddCasing (p0) {
    return $S00().Construct($T01().CantAddCasing(p0));
  };

  function Error_CantAddIdentifier (p0) {
    return $S00().Construct($T01().CantAddIdentifier(p0));
  };

  function Error_CantCreateDefaultTypeFor (p0) {
    return $S01().Construct($T01().CantCreateDefaultTypeFor(p0));
  };

  function Error_CantReadProperty () {
    return $S00().Construct($T01().get_CantReadProperty());
  };

  function Error_CantWriteProperty () {
    return $S00().Construct($T01().get_CantWriteProperty());
  };

  function Error_DictionaryNotHashable () {
    return $S02().Construct($T01().get_DictionaryNotHashable());
  };

  function Error_EnumerationFinished () {
    return $S00().Construct($T01().get_EnumerationFinished());
  };

  function Error_EnumerationNotStarted () {
    return $S00().Construct($T01().get_EnumerationNotStarted());
  };

  function Error_ExpectedBoundEvent (p0) {
    return $S02().Construct($T01().ExpectedBoundEvent(p0));
  };

  function Error_ExtensionMustBePublic (p0) {
    return $S01().Construct($T01().ExtensionMustBePublic(p0));
  };

  function Error_FaultAlreadyDefined () {
    return $S00().Construct($T01().get_FaultAlreadyDefined());
  };

  function Error_FieldReadonly (p0) {
    return $S03().Construct($T01().FieldReadonly(p0));
  };

  function Error_FinallyAlreadyDefined () {
    return $S00().Construct($T01().get_FinallyAlreadyDefined());
  };

  function Error_FirstArgumentMustBeCallSite () {
    return $S00().Construct($T01().get_FirstArgumentMustBeCallSite());
  };

  function Error_GenNonSerializableBinder () {
    return $S01().Construct($T01().get_GenNonSerializableBinder());
  };

  function Error_GlobalsMustBeUnique () {
    return $S01().Construct($T01().get_GlobalsMustBeUnique());
  };

  function Error_IllegalNew_GenericParams (p0) {
    return $S01().Construct($T01().IllegalNew_GenericParams(p0));
  };

  function Error_InvalidArgumentType (p0, p1) {
    return $S01().Construct($T01().InvalidArgumentType(p0, p1));
  };

  function Error_InvalidAsmNameOrExtension () {
    return $S01().Construct($T01().get_InvalidAsmNameOrExtension());
  };

  function Error_InvalidCast (p0, p1) {
    return $S00().Construct($T01().InvalidCast(p0, p1));
  };

  function Error_InvalidOperation (p0) {
    return $S01().Construct($T01().InvalidOperation(p0));
  };

  function Error_InvalidOutputDir () {
    return $S01().Construct($T01().get_InvalidOutputDir());
  };

  function Error_InvalidParamNumForService () {
    return $S01().Construct($T01().get_InvalidParamNumForService());
  };

  function Error_InvalidPath () {
    return $S01().Construct($T01().get_InvalidPath());
  };

  function Error_InvalidStreamType (p0) {
    return $S01().Construct($T01().InvalidStreamType(p0));
  };

  function Error_LanguageRegistered () {
    return $S00().Construct($T01().get_LanguageRegistered());
  };

  function Error_MemberWriteOnly (p0) {
    return $S04().Construct($T01().MemberWriteOnly(p0));
  };

  function Error_MethodOrOperatorNotImplemented () {
    return $S05().Construct($T01().get_MethodOrOperatorNotImplemented());
  };

  function Error_MissingTarget () {
    return $S00().Construct($T01().get_MissingTarget());
  };

  function Error_MissingTest () {
    return $S00().Construct($T01().get_MissingTest());
  };

  function Error_MustHaveCodeOrTarget () {
    return $S01().Construct($T01().get_MustHaveCodeOrTarget());
  };

  function Error_MustReturnScopeExtension () {
    return $S06().Construct($T01().get_MustReturnScopeExtension());
  };

  function Error_NameNotDefined (p0) {
    return $S03().Construct($T01().NameNotDefined(p0));
  };

  function Error_NoCallableMethods (p0, p1) {
    return $S00().Construct($T01().NoCallableMethods(p0, p1));
  };

  function Error_NoCodeToCompile () {
    return $S00().Construct($T01().get_NoCodeToCompile());
  };

  function Error_NoDefaultValue () {
    return $S01().Construct($T01().get_NoDefaultValue());
  };

  function Error_NoException () {
    return $S00().Construct($T01().get_NoException());
  };

  function Error_NoExplicitCast (p0, p1) {
    return $S01().Construct($T01().NoExplicitCast(p0, p1));
  };

  function Error_NoImplicitCast (p0, p1) {
    return $S01().Construct($T01().NoImplicitCast(p0, p1));
  };

  function Error_NoInstanceForCall () {
    return $S00().Construct($T01().get_NoInstanceForCall());
  };

  function Error_NonGenericWithGenericGroup (p0) {
    return $S07().Construct($T01().NonGenericWithGenericGroup(p0));
  };

  function Error_PropertyReadonly (p0) {
    return $S03().Construct($T01().PropertyReadonly(p0));
  };

  function Error_QueueEmpty () {
    return $S00().Construct($T01().get_QueueEmpty());
  };

  function Error_TypeParameterIsNotDelegate (p0) {
    return $S00().Construct($T01().TypeParameterIsNotDelegate(p0));
  };

  function Error_UnexpectedEvent (p0, p1, p2, p3) {
    return $S01().Construct($T01().UnexpectedEvent(p0, p1, p2, p3));
  };

  function Error_UnexpectedType (p0, p1) {
    return $S02().Construct($T01().UnexpectedType(p0, p1));
  };

  function Error_UnhandledConvert (p0) {
    return $S01().Construct($T01().UnhandledConvert(p0));
  };

  function Error_UnknownLanguageProviderType () {
    return $S01().Construct($T01().get_UnknownLanguageProviderType());
  };

  function Error_UnknownMemberType (p0) {
    return $S00().Construct($T01().UnknownMemberType(p0));
  };

  function Error_VerificationException (p0, p1, p2) {
    return $S08().Construct($T01().VerificationException(p0, p1, p2));
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AlreadyInitialized", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_AlreadyInitialized
    );

    $.Method({Static:true , Public:false}, "CannotChangeNonCachingValue", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_CannotChangeNonCachingValue
    );

    $.Method({Static:true , Public:false}, "CannotHaveFaultAndFinally", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_CannotHaveFaultAndFinally
    );

    $.Method({Static:true , Public:false}, "CanotEmitConstant", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_CanotEmitConstant
    );

    $.Method({Static:true , Public:false}, "CantAddCasing", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_CantAddCasing
    );

    $.Method({Static:true , Public:false}, "CantAddIdentifier", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_CantAddIdentifier
    );

    $.Method({Static:true , Public:false}, "CantCreateDefaultTypeFor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_CantCreateDefaultTypeFor
    );

    $.Method({Static:true , Public:false}, "CantReadProperty", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_CantReadProperty
    );

    $.Method({Static:true , Public:false}, "CantWriteProperty", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_CantWriteProperty
    );

    $.Method({Static:true , Public:false}, "DictionaryNotHashable", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_DictionaryNotHashable
    );

    $.Method({Static:true , Public:false}, "EnumerationFinished", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_EnumerationFinished
    );

    $.Method({Static:true , Public:false}, "EnumerationNotStarted", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_EnumerationNotStarted
    );

    $.Method({Static:true , Public:false}, "ExpectedBoundEvent", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_ExpectedBoundEvent
    );

    $.Method({Static:true , Public:false}, "ExtensionMustBePublic", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_ExtensionMustBePublic
    );

    $.Method({Static:true , Public:false}, "FaultAlreadyDefined", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_FaultAlreadyDefined
    );

    $.Method({Static:true , Public:false}, "FieldReadonly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_FieldReadonly
    );

    $.Method({Static:true , Public:false}, "FinallyAlreadyDefined", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_FinallyAlreadyDefined
    );

    $.Method({Static:true , Public:false}, "FirstArgumentMustBeCallSite", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_FirstArgumentMustBeCallSite
    );

    $.Method({Static:true , Public:false}, "GenNonSerializableBinder", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_GenNonSerializableBinder
    );

    $.Method({Static:true , Public:false}, "GlobalsMustBeUnique", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_GlobalsMustBeUnique
    );

    $.Method({Static:true , Public:false}, "IllegalNew_GenericParams", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_IllegalNew_GenericParams
    );

    $.Method({Static:true , Public:false}, "InvalidArgumentType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_InvalidArgumentType
    );

    $.Method({Static:true , Public:false}, "InvalidAsmNameOrExtension", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_InvalidAsmNameOrExtension
    );

    $.Method({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_InvalidCast
    );

    $.Method({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_InvalidOperation
    );

    $.Method({Static:true , Public:false}, "InvalidOutputDir", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_InvalidOutputDir
    );

    $.Method({Static:true , Public:false}, "InvalidParamNumForService", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_InvalidParamNumForService
    );

    $.Method({Static:true , Public:false}, "InvalidPath", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_InvalidPath
    );

    $.Method({Static:true , Public:false}, "InvalidStreamType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_InvalidStreamType
    );

    $.Method({Static:true , Public:false}, "LanguageRegistered", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_LanguageRegistered
    );

    $.Method({Static:true , Public:false}, "MemberWriteOnly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_MemberWriteOnly
    );

    $.Method({Static:true , Public:false}, "MethodOrOperatorNotImplemented", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_MethodOrOperatorNotImplemented
    );

    $.Method({Static:true , Public:false}, "MissingTarget", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_MissingTarget
    );

    $.Method({Static:true , Public:false}, "MissingTest", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_MissingTest
    );

    $.Method({Static:true , Public:false}, "MustHaveCodeOrTarget", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_MustHaveCodeOrTarget
    );

    $.Method({Static:true , Public:false}, "MustReturnScopeExtension", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_MustReturnScopeExtension
    );

    $.Method({Static:true , Public:false}, "NameNotDefined", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_NameNotDefined
    );

    $.Method({Static:true , Public:false}, "NoCallableMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_NoCallableMethods
    );

    $.Method({Static:true , Public:false}, "NoCodeToCompile", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_NoCodeToCompile
    );

    $.Method({Static:true , Public:false}, "NoDefaultValue", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_NoDefaultValue
    );

    $.Method({Static:true , Public:false}, "NoException", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_NoException
    );

    $.Method({Static:true , Public:false}, "NoExplicitCast", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_NoExplicitCast
    );

    $.Method({Static:true , Public:false}, "NoImplicitCast", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_NoImplicitCast
    );

    $.Method({Static:true , Public:false}, "NoInstanceForCall", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_NoInstanceForCall
    );

    $.Method({Static:true , Public:false}, "NonGenericWithGenericGroup", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_NonGenericWithGenericGroup
    );

    $.Method({Static:true , Public:false}, "PropertyReadonly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_PropertyReadonly
    );

    $.Method({Static:true , Public:false}, "QueueEmpty", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_QueueEmpty
    );

    $.Method({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_TypeParameterIsNotDelegate
    );

    $.Method({Static:true , Public:false}, "UnexpectedEvent", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object, $.Object
        ]), 
      Error_UnexpectedEvent
    );

    $.Method({Static:true , Public:false}, "UnexpectedType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object]), 
      Error_UnexpectedType
    );

    $.Method({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_UnhandledConvert
    );

    $.Method({Static:true , Public:false}, "UnknownLanguageProviderType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Exception")), 
      Error_UnknownLanguageProviderType
    );

    $.Method({Static:true , Public:false}, "UnknownMemberType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object]), 
      Error_UnknownMemberType
    );

    $.Method({Static:true , Public:false}, "VerificationException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ]), 
      Error_VerificationException
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.ExceptionUtils */ 

(function ExceptionUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.CompilerServices.ConditionalWeakTable$b2.Of($asm01.System.Exception, $asm01.System.Collections.Generic.List$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object))))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ExceptionUtils_$l$gc__DisplayClass8)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object), $asm01.System.Boolean))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.ArgumentOutOfRangeException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ExceptionUtils_$l$gc__DisplayClassd)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Predicate$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ExceptionUtils_$l$gc__DisplayClass3)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Threading.Interlocked)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [
        $asm01.TypeRef("System.String"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.String")
      ]))) ();
  };

  function ExceptionUtils_GetData (e, key) {
    var data = new JSIL.BoxedVariable(null);
    var exceptionData = null;
    var $closure0 = new ($T04())();
    $closure0.key = key;
    var flag = new JSIL.BoxedVariable(false);
    if ($thisType._exceptionData === null) {
      var result = null;
    } else {
      flag.set(false);
      try {
        $T06().Enter(exceptionData = $thisType._exceptionData, /* ref */ flag);
        if (!$thisType._exceptionData.TryGetValue(e, /* ref */ data)) {
          result = null;
        } else {
          result = ($S00().CallStatic($T08(), "FirstOrDefault$b1", [$asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)], data.get(), $T09().New($closure0, $T04().prototype.$lGetData$gb__6, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ExceptionUtils_$l$gc__DisplayClass8, "$lGetData$gb__6", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)]), false); }))).get_Value();
        }
      } finally {
        if (flag.get()) {
          $T06().Exit(exceptionData);
        }
      }
    }
    return result;
  };

  function ExceptionUtils_MakeArgumentItemNullException (index, arrayName) {
    return $S01().Construct($T0B().Format("{0}[{1}]", arrayName, index));
  };

  function ExceptionUtils_MakeArgumentOutOfRangeException (paramName, actualValue, message) {
    throw $S02().Construct(paramName, actualValue, message);
  };

  function ExceptionUtils_RemoveData (e, key) {
    var data = new JSIL.BoxedVariable(null);
    var exceptionData = null;
    var $closure0 = new ($T0E())();
    $closure0.key = key;
    var flag = new JSIL.BoxedVariable(false);
    if ($thisType._exceptionData !== null) {
      flag.set(false);
      try {
        $T06().Enter(exceptionData = $thisType._exceptionData, /* ref */ flag);
        if ($thisType._exceptionData.TryGetValue(e, /* ref */ data)) {
          var index = ($T02().prototype.FindIndex.call(data.get(), $T0F().New($closure0, $T0E().prototype.$lRemoveData$gb__b, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ExceptionUtils_$l$gc__DisplayClassd, "$lRemoveData$gb__b", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)]), false); })) | 0);
          if (index >= 0) {
            (data.get()).RemoveAt(index);
          }
        }
      } finally {
        if (flag.get()) {
          $T06().Exit(exceptionData);
        }
      }
    }
  };

  function ExceptionUtils_SetData (e, key, value) {
    var exceptionData = null;
    var $closure0 = new ($T10())();
    $closure0.key = key;
    if ($thisType._exceptionData === null) {
      $T11().CompareExchange$b1($T03())(/* ref */ new JSIL.MemberReference($thisType, "_exceptionData"), new ($T03())(), null);
    }
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T06().Enter(exceptionData = $thisType._exceptionData, /* ref */ flag);
      var data = $thisType._exceptionData.GetOrCreateValue(e);
      var index = ($T02().prototype.FindIndex.call(data, $T0F().New($closure0, $T10().prototype.$lSetData$gb__1, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ExceptionUtils_$l$gc__DisplayClass3, "$lSetData$gb__1", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object)]), false); })) | 0);
      if (index >= 0) {
        data.set_Item(index, new ($T07())($closure0.key, value));
      } else {
        data.Add(new ($T07())($closure0.key, value));
      }
    } finally {
      if (flag.get()) {
        $T06().Exit(exceptionData);
      }
    }
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.ExceptionUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetData", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Exception"), $.Object]), 
      ExceptionUtils_GetData
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "MakeArgumentItemNullException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentNullException"), [$.Int32, $.String]), 
      ExceptionUtils_MakeArgumentItemNullException
    );

    $.Method({Static:true , Public:true }, "MakeArgumentOutOfRangeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentOutOfRangeException"), [
          $.String, $.Object, 
          $.String
        ]), 
      ExceptionUtils_MakeArgumentOutOfRangeException
    );

    $.Method({Static:true , Public:true }, "RemoveData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception"), $.Object]), 
      ExceptionUtils_RemoveData
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Exception"), $.Object, 
          $.Object
        ]), 
      ExceptionUtils_SetData
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Field({Static:true , Public:false}, "_exceptionData", $asm01.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$asm01.TypeRef("System.Exception"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.ExceptionUtils+<>c__DisplayClass3 */ 

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };

  function $l$gc__DisplayClass3__ctor () {
  };

  function $l$gc__DisplayClass3_$lSetData$gb__1 (entry) {
    return (entry.get_Key() === this.key);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ExceptionUtils+<>c__DisplayClass3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass3__ctor
    );

    $.Method({Static:false, Public:true }, "$lSetData$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])]), 
      $l$gc__DisplayClass3_$lSetData$gb__1
    );

    $.Field({Static:false, Public:true }, "key", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ExceptionUtils+<>c__DisplayClass8 */ 

(function $l$gc__DisplayClass8$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };

  function $l$gc__DisplayClass8__ctor () {
  };

  function $l$gc__DisplayClass8_$lGetData$gb__6 (entry) {
    return (entry.get_Key() === this.key);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ExceptionUtils+<>c__DisplayClass8", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass8__ctor
    );

    $.Method({Static:false, Public:true }, "$lGetData$gb__6", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])]), 
      $l$gc__DisplayClass8_$lGetData$gb__6
    );

    $.Field({Static:false, Public:true }, "key", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ExceptionUtils+<>c__DisplayClassd */ 

(function $l$gc__DisplayClassd$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Object, $asm01.System.Object))) ();
  };

  function $l$gc__DisplayClassd__ctor () {
  };

  function $l$gc__DisplayClassd_$lRemoveData$gb__b (entry) {
    return (entry.get_Key() === this.key);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ExceptionUtils+<>c__DisplayClassd", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClassd__ctor
    );

    $.Method({Static:false, Public:true }, "$lRemoveData$gb__b", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])]), 
      $l$gc__DisplayClassd_$lRemoveData$gb__b
    );

    $.Field({Static:false, Public:true }, "key", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.HybridReferenceDictionary`2 */ 

(function HybridReferenceDictionary$b2$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.KeyNotFoundException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.KeyNotFoundException"), null))) ();
  };

  function HybridReferenceDictionary$b2__ctor$00 () {
  };

  function HybridReferenceDictionary$b2__ctor$01 (initialCapicity) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$thisType.TKey.get(this), $thisType.TValue.get(this)]), [$asm01.System.Int32]);
    if ((initialCapicity | 0) > 10) {
      this._dict = $s00.Construct(initialCapicity);
    } else {
      this._keysAndValues = JSIL.Array.New($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), initialCapicity);
    }
  };

  function HybridReferenceDictionary$b2_ContainsKey (key) {
    if (this._dict !== null) {
      var result = (this._dict).ContainsKey(JSIL.CloneParameter($thisType.TKey.get(this), key));
    } else {
      if (this._keysAndValues !== null) {

        for (var i = 0; i < (this._keysAndValues.length | 0); i = ((i + 1) | 0)) {
          if ((this._keysAndValues[i]).get_Key() === key) {
            result = true;
            return result;
          }
        }
      }
      result = false;
    }
    return result;
  };

  function HybridReferenceDictionary$b2_get_Count () {
    if (this._dict !== null) {
      var count = ((this._dict).get_Count() | 0);
    } else {
      count = (this._count | 0);
    }
    return count;
  };

  function HybridReferenceDictionary$b2_get_Item (key) {
    var res = new JSIL.BoxedVariable((
        $thisType.TValue.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.TValue.get(this))
           : null)
    );
    if ($thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.TryGetValue.call(this, key, /* ref */ res)) {
      return res.get();
    }
    throw $S00().Construct();
  };

  function HybridReferenceDictionary$b2_GetEnumerator () {
    if (this._dict !== null) {
      var result = $asm01.System.Collections.Generic.Dictionary$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.GetEnumerator.call(this._dict).MemberwiseClone();
    } else {
      result = $thisType.Of($thisType.TKey.get(this), $thisType.TValue.get(this)).prototype.GetEnumeratorWorker.call(this);
    }
    return result;
  };

  function HybridReferenceDictionary$b2_GetEnumeratorWorker () {
    var $lGetEnumeratorWorker$gd__ = new ($asm00.Microsoft.Scripting.Utils.HybridReferenceDictionary$b2_$lGetEnumeratorWorker$gd__0.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (0);
    $lGetEnumeratorWorker$gd__.$l$g4__this = this;
    return $lGetEnumeratorWorker$gd__;
  };

  function HybridReferenceDictionary$b2_Remove (key) {
    if (this._dict !== null) {
      var result = (this._dict).Remove(JSIL.CloneParameter($thisType.TKey.get(this), key));
    } else {
      if (this._keysAndValues !== null) {

        for (var i = 0; i < (this._keysAndValues.length | 0); i = ((i + 1) | 0)) {
          if ((this._keysAndValues[i]).get_Key() === key) {
            this._keysAndValues[i] = new ($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) ();
            this._count = (((this._count | 0) - 1) | 0);
            result = true;
            return result;
          }
        }
      }
      result = false;
    }
    return result;
  };

  function HybridReferenceDictionary$b2_set_Item (key, value) {
    var $s00 = new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$thisType.TKey.get(this), $thisType.TValue.get(this)]), null);
    if (this._dict !== null) {
      (this._dict).set_Item(key, JSIL.CloneParameter($thisType.TValue.get(this), value));
    } else {
      if (this._keysAndValues !== null) {
        var index = -1;

        for (var i = 0; i < (this._keysAndValues.length | 0); i = ((i + 1) | 0)) {
          if ((this._keysAndValues[i]).get_Key() === key) {
            this._keysAndValues[i] = new ($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (JSIL.CloneParameter($thisType.TKey.get(this), key), JSIL.CloneParameter($thisType.TValue.get(this), value));
            return;
          }
          if ((this._keysAndValues[i]).get_Key() === null) {
            index = i;
          }
        }
      } else {
        this._keysAndValues = JSIL.Array.New($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this)), 10);
        index = 0;
      }
      if (index !== -1) {
        this._count = (((this._count | 0) + 1) | 0);
        this._keysAndValues[index] = new ($asm01.System.Collections.Generic.KeyValuePair$b2.Of($thisType.TKey.get(this), $thisType.TValue.get(this))) (JSIL.CloneParameter($thisType.TKey.get(this), key), JSIL.CloneParameter($thisType.TValue.get(this), value));
      } else {
        this._dict = $s00.Construct();

        for (i = 0; i < (this._keysAndValues.length | 0); i = ((i + 1) | 0)) {
          (this._dict).set_Item(
            (this._keysAndValues[i]).get_Key(), 
            JSIL.CloneParameter($thisType.TValue.get(this), (this._keysAndValues[i]).get_Value())
          );
        }
        this._keysAndValues = null;
        (this._dict).set_Item(key, JSIL.CloneParameter($thisType.TValue.get(this), value));
      }
    }
  };

  function HybridReferenceDictionary$b2_TryGetValue (key, /* ref */ value) {
    if (this._dict !== null) {
      var result = (this._dict).TryGetValue(JSIL.CloneParameter($thisType.TKey.get(this), key), /* ref */ value);
    } else {
      if (this._keysAndValues !== null) {

        for (var i = 0; i < (this._keysAndValues.length | 0); i = ((i + 1) | 0)) {
          if ((this._keysAndValues[i]).get_Key() === key) {
            value.set(JSIL.CloneParameter($thisType.TValue.get(this), (this._keysAndValues[i]).get_Value()));
            result = true;
            return result;
          }
        }
      }
      value.set((
          $thisType.TValue.get(this).IsValueType
             ? JSIL.CreateInstanceOfType($thisType.TValue.get(this))
             : null)
      );
      result = false;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.HybridReferenceDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HybridReferenceDictionary$b2__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      HybridReferenceDictionary$b2__ctor$01
    );

    $.Method({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]), 
      HybridReferenceDictionary$b2_ContainsKey
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      HybridReferenceDictionary$b2_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")]), 
      HybridReferenceDictionary$b2_get_Item
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null), 
      HybridReferenceDictionary$b2_GetEnumerator
    );

    $.Method({Static:false, Public:false}, "GetEnumeratorWorker", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null), 
      HybridReferenceDictionary$b2_GetEnumeratorWorker
    );

    $.Method({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]), 
      HybridReferenceDictionary$b2_Remove
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      HybridReferenceDictionary$b2_set_Item
    );

    $.Method({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])]), 
      HybridReferenceDictionary$b2_TryGetValue
    );

    $.Constant({Static:true , Public:false}, "_arraySize", 10); 
    $.Field({Static:false, Public:false}, "_keysAndValues", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Field({Static:false, Public:false}, "_dict", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:false}, "_count", $.Int32); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("TValue"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Scripting.Utils.HybridReferenceDictionary`2+<GetEnumeratorWorker>d__0 */ 

(function $lGetEnumeratorWorker$gd__0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function $lGetEnumeratorWorker$gd__0__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
  };

  function $lGetEnumeratorWorker$gd__0_MoveNext () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 0: 
              this.$l$g1__state = -1;
              if (this.$l$g4__this._keysAndValues !== null) {
                this.$li$g5__1 = 0;
                $label0 = 2 /* goto IL_B6 */ ;
                continue $labelgroup0;
              }
              $label0 = 3 /* goto IL_D3 */ ;
              continue $labelgroup0;

            case 1: 
              this.$l$g1__state = -1;
              break;

            default: 
              break $labelgroup0;

          }

          $label0 = 1 /* goto IL_A7 */ ;
          continue $labelgroup0;
        case 1: /* IL_A7 */ 
          this.$li$g5__1 = (((this.$li$g5__1 | 0) + 1) | 0);

          $label0 = 2 /* goto IL_B6 */ ;
          continue $labelgroup0;
        case 2: /* IL_B6 */ 
          if ((this.$li$g5__1 | 0) < (this.$l$g4__this._keysAndValues.length | 0)) {
            if ((this.$l$g4__this._keysAndValues[this.$li$g5__1]).get_Key() !== null) {
              this.$l$g2__current = this.$l$g4__this._keysAndValues[this.$li$g5__1].MemberwiseClone();
              this.$l$g1__state = 1;
              var result = true;
              return result;
            }
            $label0 = 1 /* goto IL_A7 */ ;
            continue $labelgroup0;
          }

          $label0 = 3 /* goto IL_D3 */ ;
          continue $labelgroup0;
        case 3: /* IL_D3 */ 
          break $labelgroup0;

      }
    }
    /* Original label IL_D4 */ 
    result = false;
    return result;
  };

  function $lGetEnumeratorWorker$gd__0_System_Collections_Generic_IEnumerator$lSystem_Collections_Generic_KeyValuePair$lTKey$cmTValue$g$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetEnumeratorWorker$gd__0_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetEnumeratorWorker$gd__0_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lGetEnumeratorWorker$gd__0_System_IDisposable_Dispose () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.HybridReferenceDictionary`2+<GetEnumeratorWorker>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetEnumeratorWorker$gd__0__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetEnumeratorWorker$gd__0_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.get_Current", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null), 
      $lGetEnumeratorWorker$gd__0_System_Collections_Generic_IEnumerator$lSystem_Collections_Generic_KeyValuePair$lTKey$cmTValue$g$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetEnumeratorWorker$gd__0_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetEnumeratorWorker$gd__0_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetEnumeratorWorker$gd__0_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g4__this", $asm00.TypeRef("Microsoft.Scripting.Utils.HybridReferenceDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:true }, "$li$g5__1", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Current", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ListEqualityComparer`1 */ 

(function ListEqualityComparer$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionExtensions)) ();
  };

  function ListEqualityComparer$b1__ctor () {
    $asm01.System.Collections.Generic.EqualityComparer$b1.Of($asm01.System.Collections.Generic.ICollection$b1.Of($thisType.T.get(this))).prototype._ctor.call(this);
  };

  function ListEqualityComparer$b1_Equals$00 (x, y) {
    return $T00().ListEquals$b1($thisType.T.get(this))(x, y);
  };

  function ListEqualityComparer$b1_GetHashCode$01 (obj) {
    return $T00().ListHashCode$b1($thisType.T.get(this))(obj);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Collections.Generic.EqualityComparer`1", [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "Microsoft.Scripting.Utils.ListEqualityComparer`1")])]), 
      Name: "Microsoft.Scripting.Utils.ListEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ListEqualityComparer$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])]), 
      ListEqualityComparer$b1_Equals$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])]), 
      ListEqualityComparer$b1_GetHashCode$01
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $asm00.TypeRef("Microsoft.Scripting.Utils.ListEqualityComparer`1", [$.GenericParameter("T")])); 
    function ListEqualityComparer$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).Instance = new ($thisType.Of($thisType.T.get(this))) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ListEqualityComparer$b1__cctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.ReferenceEqualityComparer`1 */ 

(function ReferenceEqualityComparer$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Runtime.CompilerServices.RuntimeHelpers)) ();
  };

  function ReferenceEqualityComparer$b1__ctor () {
  };

  function ReferenceEqualityComparer$b1_Equals$00 (x, y) {
    return (x === y);
  };

  function ReferenceEqualityComparer$b1_GetHashCode$01 (obj) {
    return $T00().GetHashCode(obj);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReferenceEqualityComparer`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ReferenceEqualityComparer$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $.GenericParameter("T")]), 
      ReferenceEqualityComparer$b1_Equals$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")]), 
      ReferenceEqualityComparer$b1_GetHashCode$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $asm00.TypeRef("Microsoft.Scripting.Utils.ReferenceEqualityComparer`1", [$.GenericParameter("T")])); 
    function ReferenceEqualityComparer$b1__cctor () {
      $thisType.Of($thisType.T.get(this)).Instance = new ($thisType.Of($thisType.T.get(this))) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ReferenceEqualityComparer$b1__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Reflection");
/* class System.Reflection.RuntimeReflectionExtensions */ 

(function RuntimeReflectionExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };

  function RuntimeReflectionExtensions_GetRuntimeBaseDefinition (method) {
    return method.GetBaseDefinition();
  };

  function RuntimeReflectionExtensions_GetRuntimeMethods (type) {
    return $T02().$Cast(type.GetMethods($T03().$Flags("Instance", "NonPublic", "Public", "Static")));
  };

  JSIL.MakeStaticClass("System.Reflection.RuntimeReflectionExtensions", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetRuntimeBaseDefinition", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      RuntimeReflectionExtensions_GetRuntimeBaseDefinition
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetRuntimeMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Type")]), 
      RuntimeReflectionExtensions_GetRuntimeMethods
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.DefaultParameterValueAttribute */ 

(function DefaultParameterValueAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function DefaultParameterValueAttribute__ctor (value) {
    $T01().prototype._ctor.call(this);
    this._value = value;
  };

  function DefaultParameterValueAttribute_get_Value () {
    return this._value;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Scripting.Utils.DefaultParameterValueAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object), 
      DefaultParameterValueAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object), 
      DefaultParameterValueAttribute_get_Value
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object); 
    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.OptionalAttribute */ 

(function OptionalAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function OptionalAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Scripting.Utils.OptionalAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      OptionalAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Parameter]; });

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils */ 

(function ReflectionUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lAncestors$gd__3b)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass5f)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm01.System.Type))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Type, $asm01.System.Type, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.Type, $asm01.System.Type))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.Type, $asm01.System.Type))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.GenericParameterAttributes)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Nullable$b1)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.System.TypeExtensions)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.System.Delegate)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo)))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lEnumerateExtensionMethods$gd__58)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.System.Text.StringBuilder)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Type, $asm01.System.String))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Type))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lGetAllTypesFromAssembly$gd__3e)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm04.System.Linq.Enumerable)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Type, $asm01.System.Boolean))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm01.System.Attribute)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.System.Collections.IEnumerable)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.ConstructorInfo))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.System.Reflection.BindingFlags)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.EventInfo))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.FieldInfo))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm01.System.Type))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MemberInfo))) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm01.System.Reflection.MemberTypes)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.PropertyInfo))) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.System.Reflection.Missing)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize(System.Array.Of($asm01.System.Object))) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.DefaultParameterValueAttribute)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm00.Microsoft.Scripting.Strings)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lGetInheritedEvents$gd__1e)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lGetInheritedFields$gd__29)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.CollectionUtils)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm01.System.Reflection.EventInfo)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lGetInheritedMethods$gd__9)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lGetInheritedProperties$gd__13)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.MemberInfo))) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ArrayUtils)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Reflection.MemberInfo, $asm01.System.Reflection.MethodBase))) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.Module))) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm01.System.Func$b4.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm01.System.Func$b5.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm01.System.Func$b6.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm01.System.Func$b7.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm01.System.Func$b8.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm01.System.Func$b9.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm04.System.Func$b10.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm04.System.Func$b11.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm04.System.Func$b12.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm04.System.Func$b13.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm04.System.Func$b14.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm04.System.Func$b15.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm04.System.Func$b16.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object
    ))) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm04.System.Func$b17.Of(
        $asm04.System.Runtime.CompilerServices.CallSite, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object, $asm01.System.Object, 
        $asm01.System.Object
    ))) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm01.System.ArgumentException)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Reflection.Assembly, $asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo))))) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm01.System.Threading.Monitor)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo))))) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo))) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$lGetVisibleExtensionMethodsSlow$gd__4c)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm04.System.Collections.Generic.HashSet$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm00.System.Reflection.RuntimeReflectionExtensions)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm01.System.Runtime.CompilerServices.ExtensionAttribute)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm01.System.Reflection.ParameterAttributes)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm01.System.ParamArrayAttribute)) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm00.Microsoft.Scripting.ParamDictionaryAttribute)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.NotNullAttribute)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.NotNullItemsAttribute)) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm01.System.ArgumentNullException)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize($asm01.System.Convert)) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Reflection.MemberInfo, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Reflection.MethodInfo, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Reflection.ConstructorInfo, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T68 = function () {
    return ($T68 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Reflection.FieldInfo, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T69 = function () {
    return ($T69 = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Reflection.PropertyInfo, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T6A = function () {
    return ($T6A = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Reflection.EventInfo, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T6B = function () {
    return ($T6B = JSIL.Memoize($asm01.System.Func$b3.Of(
        $asm01.System.Type, $asm01.System.Reflection.BindingFlags, 
        $asm01.System.Boolean
    ))) ();
  };
  var $T6C = function () {
    return ($T6C = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass4)) ();
  };
  var $T6D = function () {
    return ($T6D = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Reflection.MethodInfo, $asm01.System.Boolean))) ();
  };
  var $T6E = function () {
    return ($T6E = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass7)) ();
  };
  var $T6F = function () {
    return ($T6F = JSIL.Memoize($asm01.System.Func$b2.Of($asm01.System.Reflection.ConstructorInfo, $asm01.System.Boolean))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [
        $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Func`3", [
            $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
            $asm01.TypeRef("System.Boolean")
          ])
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [
        $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Object"), 
        $asm01.TypeRef("System.Reflection.MethodInfo")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm01.TypeRef("System.String")], ["T"]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Char"), $asm01.TypeRef("System.Int32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Attribute"), [
        $asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Attribute"), [
        $asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Attribute")]), [
        $asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Attribute")]), [
        $asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Type")]), null))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.String"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Object"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), null))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])]), null))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")]), null))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.EventInfo")]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.EventInfo")]))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.PropertyInfo")]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.PropertyInfo")]))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.PropertyInfo")]))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S1F = function () {
    return ($S1F = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.FieldInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S20 = function () {
    return ($S20 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.ConstructorInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S21 = function () {
    return ($S21 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.EventInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S22 = function () {
    return ($S22 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.PropertyInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S23 = function () {
    return ($S23 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S24 = function () {
    return ($S24 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]))) ();
  };
  var $S25 = function () {
    return ($S25 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S26 = function () {
    return ($S26 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentNullException"), [$asm01.TypeRef("System.String")]))) ();
  };
  var $S27 = function () {
    return ($S27 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.SByte"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S28 = function () {
    return ($S28 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Byte"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S29 = function () {
    return ($S29 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int16"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S2A = function () {
    return ($S2A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt16"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S2B = function () {
    return ($S2B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int32"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S2C = function () {
    return ($S2C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt32"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S2D = function () {
    return ($S2D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Int64"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S2E = function () {
    return ($S2E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.UInt64"), [$asm01.TypeRef("System.Object")]))) ();
  };
  var $S2F = function () {
    return ($S2F = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ArgumentException"), [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.String")]))) ();
  };
  var $S30 = function () {
    return ($S30 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S31 = function () {
    return ($S31 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]))) ();
  };
  var $S32 = function () {
    return ($S32 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S33 = function () {
    return ($S33 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1.Of($asm01.System.Reflection.ParameterInfo).get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1.Of($asm01.System.Reflection.ParameterInfo).get_Item)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo).GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function ReflectionUtils_$lFormatSignature$gb__33 (t) {
    return t.get_FullName();
  };

  function ReflectionUtils_$lFormatTypeArgs$gb__37 (t) {
    return t.get_FullName();
  };

  function ReflectionUtils_$lFormatTypeName$gb__35 (t) {
    return t.get_FullName();
  };

  function ReflectionUtils_$lGetAllTypesFromAssembly$gb__4a (type) {
    return type.get_IsPublic();
  };

  function ReflectionUtils_$lGetMethodInfos$gb__39 (inp) {
    return $T02().$Cast(inp);
  };

  function ReflectionUtils_Ancestors (type) {
    var $lAncestors$gd__3b = new ($T03())(-2);
    $lAncestors$gd__3b.$l$g3__type = type;
    return $lAncestors$gd__3b;
  };

  function ReflectionUtils_BindGenericParameters$00 (openType, closedType, ignoreUnboundParameters) {
    var $closure0 = new ($T05())();
    $closure0.binding = $S00().Construct();
    $S01().CallStatic($thisType, "BindGenericParameters", null, openType, closedType, $T07().New($closure0, $T05().prototype.$lBindGenericParameters$gb__5e, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass5f, "$lBindGenericParameters$gb__5e", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Type, $asm01.System.Type]), false); }));
    return (
      $thisType.ConstraintsViolated($closure0.binding, ignoreUnboundParameters)
         ? null
         : $closure0.binding)
    ;
  };

  function ReflectionUtils_BindGenericParameters$01 (openType, closedType, binder) {
    if (openType.get_IsGenericParameter()) {
      var result = binder(openType, closedType);
    } else if (openType.get_IsArray()) {
      result = closedType.get_IsArray() && 
      $S01().CallStatic($thisType, "BindGenericParameters", null, 
        openType.GetElementType(), 
        closedType.GetElementType(), 
        binder
      );
    } else if (!($thisType.IsGenericType(openType) && $thisType.IsGenericType(closedType))) {
      result = $T00().op_Equality(openType, closedType);
    } else if ($T00().op_Inequality(
        openType.GetGenericTypeDefinition(), 
        closedType.GetGenericTypeDefinition()
      )) {
      result = false;
    } else {
      var closedArgs = closedType.GetGenericArguments();
      var openArgs = openType.GetGenericArguments();

      for (var i = 0; i < (openArgs.length | 0); i = ((i + 1) | 0)) {
        if (!$S01().CallStatic($thisType, "BindGenericParameters", null, openArgs[i], closedArgs[i], binder)) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  };

  function ReflectionUtils_ConstraintsViolated$02 (binding, ignoreUnboundParameters) {
    var enumerator = $T06().prototype.GetEnumerator.call(binding);

    while ($T0A().prototype.MoveNext.call(enumerator)) {
      var entry = $T0A().prototype.get_Current.call(enumerator).MemberwiseClone();
      if ($thisType.ConstraintsViolated(
          entry.get_Key(), 
          entry.get_Value(), 
          binding, 
          ignoreUnboundParameters
        )) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function ReflectionUtils_ConstraintsViolated$03 (genericParameter, closedType, binding, ignoreUnboundParameters) {
    if (!(((($T0C().$Cast($thisType.GetGenericParameterAttributes(genericParameter) & $T0C().ReferenceTypeConstraint)).valueOf() | 0) === 0) || !$thisType.IsValueType(closedType))) {
      var result = true;
    } else if (!(((($T0C().$Cast($thisType.GetGenericParameterAttributes(genericParameter) & $T0C().NotNullableValueTypeConstraint)).valueOf() | 0) === 0) || ($thisType.IsValueType(closedType) && 
          (!$thisType.IsGenericType(closedType) || 
            !$T00().op_Equality(closedType.GetGenericTypeDefinition(), $T0D().__Type__))))) {
      result = true;
    } else if (!(((($T0C().$Cast($thisType.GetGenericParameterAttributes(genericParameter) & $T0C().DefaultConstructorConstraint)).valueOf() | 0) === 0) || 
        $thisType.IsValueType(closedType) || !$T0E().op_Equality(closedType.GetConstructor($thisType.EmptyTypes), null))) {
      result = true;
    } else {
      var constraints = genericParameter.GetGenericParameterConstraints();

      for (var i = 0; i < (constraints.length | 0); i = ((i + 1) | 0)) {
        var instantiation = $thisType.InstantiateConstraint(constraints[i], binding);
        if ($T00().op_Equality(instantiation, null)) {
          if (!ignoreUnboundParameters) {
            result = true;
            return result;
          }
        } else if (!$S02().CallVirtual("IsAssignableFrom", null, instantiation, closedType)) {
          result = true;
          return result;
        }
      }
      result = false;
    }
    return result;
  };

  function ReflectionUtils_ContainsGenericParameters (type) {
    return ($T0F().GetTypeInfo(type)).get_ContainsGenericParameters();
  };

  function ReflectionUtils_CreateDelegate$04 (methodInfo, delegateType) {
    return $thisType.CreateDelegate(methodInfo, delegateType, null);
  };

  function ReflectionUtils_CreateDelegate$05 (methodInfo, delegateType, target) {
    return $S03().CallStatic($T12(), "CreateDelegate", null, delegateType, target, methodInfo);
  };

  function ReflectionUtils_EnumerateExtensionMethods (dict) {
    var $lEnumerateExtensionMethods$gd__ = new ($T14())(-2);
    $lEnumerateExtensionMethods$gd__.$l$g3__dict = dict;
    return $lEnumerateExtensionMethods$gd__;
  };

  function ReflectionUtils_FormatSignature$06 (result, method) {
    return $thisType.FormatSignature(result, method, $T16().New($thisType, $thisType.$lFormatSignature$gb__33, function () { return JSIL.GetMethodInfo($thisType, "$lFormatSignature$gb__33", new JSIL.MethodSignature($asm01.System.String, [$asm01.System.Type]), true); }));
  };

  function ReflectionUtils_FormatSignature$07 (result, method, nameDispenser) {
    $T17().RequiresNotNull(result, "result");
    $T17().RequiresNotNull(method, "method");
    $T17().RequiresNotNull(nameDispenser, "nameDispenser");
    var methodInfo = $T10().$As(method);
    if ($T10().op_Inequality(methodInfo, null)) {
      $thisType.FormatTypeName(result, methodInfo.get_ReturnType(), nameDispenser);
      $S04().CallVirtual("Append", null, result, " ");
    }
    $thisType.FormatTypeName(result, method.get_DeclaringType(), nameDispenser);
    $S05().CallVirtual("Append", null, result, "::");
    $S05().CallVirtual("Append", null, result, method.get_Name());
    if (!method.get_IsConstructor()) {
      $thisType.FormatTypeArgs(result, method.GetGenericArguments(), nameDispenser);
    }
    $S05().CallVirtual("Append", null, result, "(");
    if (!method.get_ContainsGenericParameters()) {
      var ps = method.GetParameters();

      for (var i = 0; i < (ps.length | 0); i = ((i + 1) | 0)) {
        if (i > 0) {
          $S05().CallVirtual("Append", null, result, ", ");
        }
        $thisType.FormatTypeName(result, (ps[i]).get_ParameterType(), nameDispenser);
        if (!$T1A().IsNullOrEmpty((ps[i]).get_Name())) {
          $S05().CallVirtual("Append", null, result, " ");
          $S05().CallVirtual("Append", null, result, (ps[i]).get_Name());
        }
      }
    } else {
      $S05().CallVirtual("Append", null, result, "?");
    }
    $S05().CallVirtual("Append", null, result, ")");
    return result;
  };

  function ReflectionUtils_FormatTypeArgs$08 (result, types) {
    return $thisType.FormatTypeArgs(result, types, $T16().New($thisType, $thisType.$lFormatTypeArgs$gb__37, function () { return JSIL.GetMethodInfo($thisType, "$lFormatTypeArgs$gb__37", new JSIL.MethodSignature($asm01.System.String, [$asm01.System.Type]), true); }));
  };

  function ReflectionUtils_FormatTypeArgs$09 (result, types, nameDispenser) {
    $T17().RequiresNotNull(result, "result");
    $S06().CallStatic($T17(), "RequiresNotNullItems$b1", [$asm01.System.Type], $T1B().$Cast(types), "types");
    $T17().RequiresNotNull(nameDispenser, "nameDispenser");
    if ((types.length | 0) > 0) {
      $S05().CallVirtual("Append", null, result, "<");

      for (var i = 0; i < (types.length | 0); i = ((i + 1) | 0)) {
        if (i > 0) {
          $S05().CallVirtual("Append", null, result, ", ");
        }
        $thisType.FormatTypeName(result, types[i], nameDispenser);
      }
      $S05().CallVirtual("Append", null, result, ">");
    }
    return result;
  };

  function ReflectionUtils_FormatTypeName$0A (result, type) {
    return $thisType.FormatTypeName(result, type, $T16().New($thisType, $thisType.$lFormatTypeName$gb__35, function () { return JSIL.GetMethodInfo($thisType, "$lFormatTypeName$gb__35", new JSIL.MethodSignature($asm01.System.String, [$asm01.System.Type]), true); }));
  };

  function ReflectionUtils_FormatTypeName$0B (result, type, nameDispenser) {
    $T17().RequiresNotNull(result, "result");
    $T17().RequiresNotNull(type, "type");
    $T17().RequiresNotNull(nameDispenser, "nameDispenser");
    if ($thisType.IsGenericType(type)) {
      var genType = type.GetGenericTypeDefinition();
      var genericName = (System.String.Replace(nameDispenser(genType), "+", "."));
      var tickIndex = (genericName.indexOf("`"));
      $S05().CallVirtual("Append", null, result, (
          (tickIndex !== -1)
             ? genericName.substr(0, tickIndex)
             : genericName)
      );
      var typeArgs = type.GetGenericArguments();
      if ($thisType.IsGenericTypeDefinition(type)) {
        $S04().CallVirtual("Append", null, result, "<");
        $S07().CallVirtual("Append", null, result, ",", (((typeArgs.length | 0) - 1) | 0));
        $S04().CallVirtual("Append", null, result, ">");
      } else {
        $thisType.FormatTypeArgs(result, typeArgs, nameDispenser);
      }
    } else if (type.get_IsGenericParameter()) {
      $S05().CallVirtual("Append", null, result, type.get_Name());
    } else {
      $S05().CallVirtual("Append", null, result, System.String.Replace(nameDispenser(type), "+", "."));
    }
    return result;
  };

  function ReflectionUtils_GetAllTypesFromAssembly$0C (asm) {
    var $lGetAllTypesFromAssembly$gd__3e = new ($T1E())(-2);
    $lGetAllTypesFromAssembly$gd__3e.$l$g3__asm = asm;
    return $lGetAllTypesFromAssembly$gd__3e;
  };

  function ReflectionUtils_GetAllTypesFromAssembly$0D (assembly, includePrivateTypes, $exception) {
    $T17().RequiresNotNull(assembly, "assembly");
    if (includePrivateTypes) {
      var result = $thisType.GetAllTypesFromAssembly(assembly);
    } else {
      try {
        result = $T20().$Cast(assembly.GetExportedTypes());
        return result;
      } catch ($exception) {
        if ($T21().$Is($exception)) {
        } else {
        }
      }
      result = $S08().CallStatic($T22(), "Where$b1", [$asm01.System.Type], 
        $thisType.GetAllTypesFromAssembly(assembly), 
        $T23().New($thisType, $thisType.$lGetAllTypesFromAssembly$gb__4a, function () { return JSIL.GetMethodInfo($thisType, "$lGetAllTypesFromAssembly$gb__4a", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Type]), true); })
      );
    }
    return result;
  };

  function ReflectionUtils_GetBaseType (type) {
    return ($T0F().GetTypeInfo(type)).get_BaseType();
  };

  function ReflectionUtils_GetCustomAttribute$b1$0E (T, assembly, inherit) {
    return T.$Cast($S09().CallStatic($T24(), "GetCustomAttribute", null, assembly, T, inherit));
  };

  function ReflectionUtils_GetCustomAttribute$b1$0F (T, member, inherit) {
    return T.$Cast($S0A().CallStatic($T24(), "GetCustomAttribute", null, member, T, inherit));
  };

  function ReflectionUtils_GetCustomAttributes$b1$10 (T, assembly, inherit) {
    return $T22().Cast$b1(T)($T25().$Cast($S0B().CallStatic($T24(), "GetCustomAttributes", null, assembly, T, inherit)));
  };

  function ReflectionUtils_GetCustomAttributes$b1$11 (T, member, inherit) {
    return $T22().Cast$b1(T)($T25().$Cast($S0C().CallStatic($T24(), "GetCustomAttributes", null, member, T, inherit)));
  };

  function ReflectionUtils_GetDeclaredConstructors (type) {
    return $T26().$Cast(type.GetConstructors($T27().$Flags(
            "DeclaredOnly", "Instance", "NonPublic", "Public", 
            "Static"
        )));
  };

  function ReflectionUtils_GetDeclaredEvent (type, name) {
    return type.GetEvent(name, $T27().$Flags(
          "DeclaredOnly", "Instance", "NonPublic", "Public", 
          "Static"
      ));
  };

  function ReflectionUtils_GetDeclaredEvents (type) {
    return $T28().$Cast(type.GetEvents($T27().$Flags(
            "DeclaredOnly", "Instance", "NonPublic", "Public", 
            "Static"
        )));
  };

  function ReflectionUtils_GetDeclaredField (type, name) {
    return type.GetField(name, $T27().$Flags(
          "DeclaredOnly", "Instance", "NonPublic", "Public", 
          "Static"
      ));
  };

  function ReflectionUtils_GetDeclaredFields (type) {
    return $T29().$Cast(type.GetFields($T27().$Flags(
            "DeclaredOnly", "Instance", "NonPublic", "Public", 
            "Static"
        )));
  };

  function ReflectionUtils_GetDeclaredInterfaces (type) {
    var baseInterfaces = $T20().$Cast((
        $T00().op_Inequality($thisType.GetBaseType(type), null)
           ? ($thisType.GetBaseType(type)).GetInterfaces()
           : $thisType.EmptyTypes)
    );
    var interfaces = $S0D().Construct();
    var interfaces2 = type.GetInterfaces();

    for (var i = 0; i < (interfaces2.length | 0); i = ((i + 1) | 0)) {
      var iface = interfaces2[i];
      if (!$S0E().CallStatic($T22(), "Contains$b1", [$asm01.System.Type], baseInterfaces, iface)) {
        interfaces.Add(iface);
      }
    }
    return interfaces;
  };

  function ReflectionUtils_GetDeclaredMembers (type, name) {
    if (name === null) {
      var result = $T2B().$Cast(type.GetMembers($T27().$Flags(
              "DeclaredOnly", "Instance", "NonPublic", "Public", 
              "Static"
          )));
    } else {
      result = $T2B().$Cast(type.GetMember(name, $T27().$Flags(
              "DeclaredOnly", "Instance", "NonPublic", "Public", 
              "Static"
          )));
    }
    return result;
  };

  function ReflectionUtils_GetDeclaredMethods (type, name) {
    if (name === null) {
      var result = $T2C().$Cast(type.GetMethods($T27().$Flags(
              "DeclaredOnly", "Instance", "NonPublic", "Public", 
              "Static"
          )));
    } else {
      result = $T22().OfType$b1($T10())($T25().$Cast(type.GetMember(name, $T2D().Method, $T27().$Flags(
                "DeclaredOnly", "Instance", "NonPublic", "Public", 
                "Static"
            ))));
    }
    return result;
  };

  function ReflectionUtils_GetDeclaredNestedType (type, name) {
    return type.GetNestedType(name, $T27().$Flags(
          "DeclaredOnly", "Instance", "NonPublic", "Public", 
          "Static"
      ));
  };

  function ReflectionUtils_GetDeclaredNestedTypes (type) {
    return $T20().$Cast(type.GetNestedTypes($T27().$Flags(
            "DeclaredOnly", "Instance", "NonPublic", "Public", 
            "Static"
        )));
  };

  function ReflectionUtils_GetDeclaredProperties (type) {
    return $T2E().$Cast(type.GetProperties($T27().$Flags(
            "DeclaredOnly", "Instance", "NonPublic", "Public", 
            "Static"
        )));
  };

  function ReflectionUtils_GetDeclaredProperty (type, name) {
    return $S0F().CallVirtual("GetProperty", null, type, name, $T27().$Flags(
          "DeclaredOnly", "Instance", "NonPublic", "Public", 
          "Static"
      ));
  };

  function ReflectionUtils_GetDefaultValue (info) {
    if (info.get_IsOptional()) {
      var result = (
        $T00().op_Equality(info.get_ParameterType(), $T11().__Type__)
           ? $T2F().Value
           : $T30().GetPrimitiveDefaultValue(info.get_ParameterType()))
      ;
    } else {
      var defaultValueAttribute = info.GetCustomAttributes($T32().__Type__, false);
      if ((defaultValueAttribute.length | 0) > 0) {
        result = ($T32().$Cast(defaultValueAttribute[0])).get_Value();
      } else {
        result = null;
      }
    }
    return result;
  };

  function ReflectionUtils_GetDelegateSignature (delegateType, /* ref */ parameterInfos, /* ref */ returnInfo) {
    $T17().RequiresNotNull(delegateType, "delegateType");
    var invokeMethod = delegateType.GetMethod("Invoke");
    $T17().Requires(
      $T10().op_Inequality(invokeMethod, null), 
      "delegateType", 
      $T33().get_InvalidDelegate()
    );
    parameterInfos.set(invokeMethod.GetParameters());
    returnInfo.set(invokeMethod.get_ReturnParameter());
  };

  function ReflectionUtils_GetGenericParameterAttributes (type) {
    return ($T0F().GetTypeInfo(type)).get_GenericParameterAttributes();
  };

  function ReflectionUtils_GetGenericTypeArguments (type) {
    return (
      (type.get_IsGenericType() && !type.get_IsGenericTypeDefinition())
         ? ($T0F().GetTypeInfo(type)).GetGenericArguments()
         : null)
    ;
  };

  function ReflectionUtils_GetGenericTypeParameters (type) {
    return (
      type.get_IsGenericTypeDefinition()
         ? ($T0F().GetTypeInfo(type)).GetGenericArguments()
         : null)
    ;
  };

  function ReflectionUtils_GetImplementedInterfaces (type) {
    return $T20().$Cast(type.GetInterfaces());
  };

  function ReflectionUtils_GetInheritedEvents (type, name, flattenHierarchy) {
    var $lGetInheritedEvents$gd__1e = new ($T34())(-2);
    $lGetInheritedEvents$gd__1e.$l$g3__type = type;
    $lGetInheritedEvents$gd__1e.$l$g3__name = name;
    $lGetInheritedEvents$gd__1e.$l$g3__flattenHierarchy = flattenHierarchy;
    return $lGetInheritedEvents$gd__1e;
  };

  function ReflectionUtils_GetInheritedFields (type, name, flattenHierarchy) {
    var $lGetInheritedFields$gd__ = new ($T35())(-2);
    $lGetInheritedFields$gd__.$l$g3__type = type;
    $lGetInheritedFields$gd__.$l$g3__name = name;
    $lGetInheritedFields$gd__.$l$g3__flattenHierarchy = flattenHierarchy;
    return $lGetInheritedFields$gd__;
  };

  function ReflectionUtils_GetInheritedMembers (type, name, flattenHierarchy) {
    var result = $T22().Concat$b1($T01())(
      $T36().Cast$b2($T10(), $T01())($thisType.GetInheritedMethods(type, name, flattenHierarchy)), 
      $T22().Concat$b1($T01())(
        $T36().Cast$b2($T37(), $T01())($thisType.GetInheritedProperties(type, name, flattenHierarchy)), 
        $T22().Concat$b1($T01())(
          $T36().Cast$b2($T38(), $T01())($thisType.GetInheritedEvents(type, name, flattenHierarchy)), 
          $T36().Cast$b2($T39(), $T01())($thisType.GetInheritedFields(type, name, flattenHierarchy))
        )
      )
    );
    if (name === null) {
      var result2 = $T22().Concat$b1($T01())(result, $T22().Concat$b1($T01())(
          $T36().Cast$b2($T0E(), $T01())($thisType.GetDeclaredConstructors(type)), 
          $T36().Cast$b2($T00(), $T01())($thisType.GetDeclaredNestedTypes(type))
        ));
    } else {
      var nestedType = $thisType.GetDeclaredNestedType(type, name);
      result2 = (
        $T00().op_Inequality(nestedType, null)
           ? $T22().Concat$b1($T01())(result, $T2B().$Cast(JSIL.Array.New($T00(), [nestedType])))
           : result)
      ;
    }
    return result2;
  };

  function ReflectionUtils_GetInheritedMethods (type, name, flattenHierarchy) {
    var $lGetInheritedMethods$gd__ = new ($T3A())(-2);
    $lGetInheritedMethods$gd__.$l$g3__type = type;
    $lGetInheritedMethods$gd__.$l$g3__name = name;
    $lGetInheritedMethods$gd__.$l$g3__flattenHierarchy = flattenHierarchy;
    return $lGetInheritedMethods$gd__;
  };

  function ReflectionUtils_GetInheritedProperties (type, name, flattenHierarchy) {
    var $lGetInheritedProperties$gd__ = new ($T3B())(-2);
    $lGetInheritedProperties$gd__.$l$g3__type = type;
    $lGetInheritedProperties$gd__.$l$g3__name = name;
    $lGetInheritedProperties$gd__.$l$g3__flattenHierarchy = flattenHierarchy;
    return $lGetInheritedProperties$gd__;
  };

  function ReflectionUtils_GetMethodInfo (d) {
    return d.get_Method();
  };

  function ReflectionUtils_GetMethodInfos (members) {
    return $T3D().ConvertAll$b2($T01(), $T02())(members, $T3E().New($thisType, $thisType.$lGetMethodInfos$gb__39, function () { return JSIL.GetMethodInfo($thisType, "$lGetMethodInfos$gb__39", new JSIL.MethodSignature($asm01.System.Reflection.MethodBase, [$asm01.System.Reflection.MemberInfo]), true); }));
  };

  function ReflectionUtils_GetModules (assembly) {
    return $T3F().$Cast(assembly.GetModules());
  };

  function ReflectionUtils_GetNormalizedTypeName$12 (type) {
    var name = type.get_Name();
    if ($thisType.IsGenericType(type)) {
      var result = $S10().CallStatic($thisType, "GetNormalizedTypeName", null, name);
    } else {
      result = name;
    }
    return result;
  };

  function ReflectionUtils_GetNormalizedTypeName$13 (typeName) {
    var backtick = (typeName.indexOf("`"));
    if (backtick !== -1) {
      var result = (typeName.substr(0, backtick));
    } else {
      result = typeName;
    }
    return result;
  };

  function ReflectionUtils_GetObjectCallSiteDelegateType (paramCnt) {
    switch (paramCnt) {
      case 0: 
        var typeFromHandle = $T40().__Type__;
        break;

      case 1: 
        typeFromHandle = $T41().__Type__;
        break;

      case 2: 
        typeFromHandle = $T42().__Type__;
        break;

      case 3: 
        typeFromHandle = $T43().__Type__;
        break;

      case 4: 
        typeFromHandle = $T44().__Type__;
        break;

      case 5: 
        typeFromHandle = $T45().__Type__;
        break;

      case 6: 
        typeFromHandle = $T46().__Type__;
        break;

      case 7: 
        typeFromHandle = $T47().__Type__;
        break;

      case 8: 
        typeFromHandle = $T48().__Type__;
        break;

      case 9: 
        typeFromHandle = $T49().__Type__;
        break;

      case 10: 
        typeFromHandle = $T4A().__Type__;
        break;

      case 11: 
        typeFromHandle = $T4B().__Type__;
        break;

      case 12: 
        typeFromHandle = $T4C().__Type__;
        break;

      case 13: 
        typeFromHandle = $T4D().__Type__;
        break;

      case 14: 
        typeFromHandle = $T4E().__Type__;
        break;

      default: 
        throw $S11().Construct("Signature not supported on this platform.");

    }
    return typeFromHandle;
  };

  function ReflectionUtils_GetParameterTypes$14 (parameterInfos) {
    return $S12().CallStatic($thisType, "GetParameterTypes", null, $T4F().$Cast(parameterInfos));
  };

  function ReflectionUtils_GetParameterTypes$15 (parameterInfos) {
    var result = JSIL.Array.New($T00(), $IM00().Call(parameterInfos, null));

    for (var i = 0; i < (result.length | 0); i = ((i + 1) | 0)) {
      result[i] = ($IM01().Call(parameterInfos, null, i)).get_ParameterType();
    }
    return result;
  };

  function ReflectionUtils_GetRawConstantValue (field) {
    if (!field.get_IsLiteral()) {
      throw $S13().Construct(JSIL.ConcatString(field, " not a literal."));
    }
    var value = $S14().CallVirtual("GetValue", null, field, null);
    return (
      $thisType.IsEnum(field.get_FieldType())
         ? $thisType.UnwrapEnumValue(value)
         : value)
    ;
  };

  function ReflectionUtils_GetReturnType (mi) {
    return (
      mi.get_IsConstructor()
         ? mi.get_DeclaringType()
         : ($T10().$Cast(mi)).get_ReturnType())
    ;
  };

  function ReflectionUtils_GetTypeCode (type) {
    return $T00().GetTypeCode(type);
  };

  function ReflectionUtils_GetVisibleExtensionMethodGroups (assembly, useCache) {
    var existing = new JSIL.BoxedVariable(null);
    var extensionMethodsCache = null;
    var flag = new JSIL.BoxedVariable(false);
    if (useCache) {
      if ($thisType._extensionMethodsCache === null) {
        $thisType._extensionMethodsCache = $S15().Construct();
      }
      flag.set(false);
      try {
        $T53().Enter(extensionMethodsCache = $thisType._extensionMethodsCache, /* ref */ flag);
        if ($thisType._extensionMethodsCache.TryGetValue(assembly, /* ref */ existing)) {
          var result2 = $thisType.EnumerateExtensionMethods(existing.get());
          return result2;
        }
      } finally {
        if (flag.get()) {
          $T53().Exit(extensionMethodsCache);
        }
      }
    }
    var result = null;
    var enumerator = $IM02().Call($thisType.GetVisibleExtensionMethodsSlow(assembly), null);
    var extensions = new JSIL.BoxedVariable(null);
    try {

      while ($IM03().Call(enumerator, null)) {
        var method = $IM04().Call(enumerator, null);
        if (!$T00().op_Equality(method.get_DeclaringType(), null) && !$thisType.IsGenericTypeDefinition(method.get_DeclaringType())) {
          var parameters = method.GetParameters();
          if ((parameters.length | 0) !== 0) {
            var type = (parameters[0]).get_ParameterType();
            if (!type.get_IsByRef() && !type.get_IsPointer()) {
              var ns = JSIL.Coalesce((method.get_DeclaringType()).get_Namespace(), $T1A().Empty);
              extensions.set(null);
              if (result === null) {
                result = $S16().Construct();
              }
              if (!result.TryGetValue(ns, /* ref */ extensions)) {
                result.Add(ns, extensions.set($S17().Construct()));
              }
              (extensions.get()).Add(new ($T58())(type, method));
            }
          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM05().Call(enumerator, null);
      }
    }
    var flag2 = new JSIL.BoxedVariable(false);
    if (useCache) {
      flag2.set(false);
      try {
        $T53().Enter(extensionMethodsCache = $thisType._extensionMethodsCache, /* ref */ flag2);
        $thisType._extensionMethodsCache.set_Item(assembly, result);
      } finally {
        if (flag2.get()) {
          $T53().Exit(extensionMethodsCache);
        }
      }
    }
    result2 = $thisType.EnumerateExtensionMethods(result);
    return result2;
  };

  function ReflectionUtils_GetVisibleExtensionMethods (assembly) {
    return $thisType.GetVisibleExtensionMethodsSlow(assembly);
  };

  function ReflectionUtils_GetVisibleExtensionMethodsSlow (assembly) {
    var $lGetVisibleExtensionMethodsSlow$gd__4c = new ($T5A())(-2);
    $lGetVisibleExtensionMethodsSlow$gd__4c.$l$g3__assembly = assembly;
    return $lGetVisibleExtensionMethodsSlow$gd__4c;
  };

  function ReflectionUtils_HasDefaultValue (pi) {
    return pi.IsDefined($T32().__Type__, false);
  };

  function ReflectionUtils_IncludeEvent (member, reflectedType, baseDefinitions, flattenHierarchy) {
    var add = member.GetAddMethod(true);
    var remove = member.GetRemoveMethod(true);
    if (!(!$T10().op_Inequality(add, null) || !add.get_IsVirtual())) {
      var virtualAccessor = add;
    } else if (!(!$T10().op_Inequality(remove, null) || !remove.get_IsVirtual())) {
      virtualAccessor = remove;
    } else {
      virtualAccessor = null;
    }
    if ($T10().op_Inequality(virtualAccessor, null)) {
      if (baseDefinitions.Add($T5C().GetRuntimeBaseDefinition(virtualAccessor))) {
        var result = true;
        return result;
      }
    } else {
      if ($T00().op_Equality(member.get_DeclaringType(), reflectedType)) {
        result = true;
        return result;
      }
      if (!($S18().CallStatic($thisType, "IsPrivate", null, member) || ($S19().CallStatic($thisType, "IsStatic", null, member) && 
            !flattenHierarchy))) {
        result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function ReflectionUtils_IncludeField (member, reflectedType, flattenHierarchy) {
    return ($T00().op_Equality(member.get_DeclaringType(), reflectedType) || !(member.get_IsPrivate() || 
        (member.get_IsStatic() && 
          !flattenHierarchy)));
  };

  function ReflectionUtils_IncludeMethod (member, reflectedType, baseDefinitions, flattenHierarchy) {
    if (member.get_IsVirtual()) {
      if (baseDefinitions.Add($T5C().GetRuntimeBaseDefinition(member))) {
        var result = true;
        return result;
      }
    } else {
      if ($T00().op_Equality(member.get_DeclaringType(), reflectedType)) {
        result = true;
        return result;
      }
      if (!(member.get_IsPrivate() || (member.get_IsStatic() && 
            !flattenHierarchy))) {
        result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function ReflectionUtils_IncludeProperty (member, reflectedType, baseDefinitions, flattenHierarchy) {
    var getter = member.GetGetMethod(true);
    var setter = member.GetSetMethod(true);
    if (!(!$T10().op_Inequality(getter, null) || !getter.get_IsVirtual())) {
      var virtualAccessor = getter;
    } else if (!(!$T10().op_Inequality(setter, null) || !setter.get_IsVirtual())) {
      virtualAccessor = setter;
    } else {
      virtualAccessor = null;
    }
    if ($T10().op_Inequality(virtualAccessor, null)) {
      if (baseDefinitions.Add($T5C().GetRuntimeBaseDefinition(virtualAccessor))) {
        var result = true;
        return result;
      }
    } else {
      if ($T00().op_Equality(member.get_DeclaringType(), reflectedType)) {
        result = true;
        return result;
      }
      if (!($S1A().CallStatic($thisType, "IsPrivate", null, member) || ($S1B().CallStatic($thisType, "IsStatic", null, member) && 
            !flattenHierarchy))) {
        result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function ReflectionUtils_InstantiateConstraint (constraint, binding) {
    var closedType = new JSIL.BoxedVariable(null);
    if (!$thisType.ContainsGenericParameters(constraint)) {
      var result = constraint;
    } else if (constraint.get_IsGenericParameter()) {
      result = (
        binding.TryGetValue(constraint, /* ref */ closedType)
           ? closedType.get()
           : null)
      ;
    } else {
      var args = constraint.GetGenericArguments();

      for (var i = 0; i < (args.length | 0); i = ((i + 1) | 0)) {
        if ($T00().op_Equality(args[i] = $thisType.InstantiateConstraint(args[i], binding), null)) {
          result = null;
          return result;
        }
      }
      result = (constraint.GetGenericTypeDefinition()).MakeGenericType(args);
    }
    return result;
  };

  function ReflectionUtils_IsAbstract (type) {
    return ($T0F().GetTypeInfo(type)).get_IsAbstract();
  };

  function ReflectionUtils_IsClass (type) {
    return ($T0F().GetTypeInfo(type)).get_IsClass();
  };

  function ReflectionUtils_IsDefined (assembly, attributeType) {
    return assembly.IsDefined(attributeType, false);
  };

  function ReflectionUtils_IsDynamicMethod (method) {
    return false;
  };

  function ReflectionUtils_IsEnum (type) {
    return ($T0F().GetTypeInfo(type)).get_IsEnum();
  };

  function ReflectionUtils_IsExtension (member) {
    return member.IsDefined($T5D().__Type__, false);
  };

  function ReflectionUtils_IsGenericType (type) {
    return ($T0F().GetTypeInfo(type)).get_IsGenericType();
  };

  function ReflectionUtils_IsGenericTypeDefinition (type) {
    return ($T0F().GetTypeInfo(type)).get_IsGenericTypeDefinition();
  };

  function ReflectionUtils_IsInterface (type) {
    return ($T0F().GetTypeInfo(type)).get_IsInterface();
  };

  function ReflectionUtils_IsMandatory (pi) {
    return (((($T5E().$Cast(pi.get_Attributes() & $T5E().Optional)).valueOf() | 0) === 0) && !$thisType.HasDefaultValue(pi));
  };

  function ReflectionUtils_IsOutParameter (pi) {
    return ((pi.get_ParameterType()).get_IsByRef() && ($T5E().$Cast(pi.get_Attributes() & $T5E().$Flags("In", "Out")) === $T5E().Out));
  };

  function ReflectionUtils_IsParamArray (parameter) {
    return parameter.IsDefined($T5F().__Type__, false);
  };

  function ReflectionUtils_IsParamDictionary (parameter) {
    return parameter.IsDefined($T60().__Type__, false);
  };

  function ReflectionUtils_IsParamsMethod$16 (method) {
    return $S1C().CallStatic($thisType, "IsParamsMethod", null, method.GetParameters());
  };

  function ReflectionUtils_IsParamsMethod$17 (pis) {

    for (var i = 0; i < (pis.length | 0); i = ((i + 1) | 0)) {
      var pi = pis[i];
      if (!(!$thisType.IsParamArray(pi) && !$thisType.IsParamDictionary(pi))) {
        var result = true;
        return result;
      }
    }
    result = false;
    return result;
  };

  function ReflectionUtils_IsPrimitive (type) {
    return ($T0F().GetTypeInfo(type)).get_IsPrimitive();
  };

  function ReflectionUtils_IsPrivate$18 (property) {
    var getter = property.GetGetMethod(true);
    var setter = property.GetSetMethod(true);
    return (!(!$T10().op_Equality(getter, null) && 
        !getter.get_IsPrivate()) && ($T10().op_Equality(setter, null) || 
        setter.get_IsPrivate()));
  };

  function ReflectionUtils_IsPrivate$19 (evnt) {
    var add = evnt.GetAddMethod(true);
    var remove = evnt.GetRemoveMethod(true);
    return (!(!$T10().op_Equality(add, null) && 
        !add.get_IsPrivate()) && ($T10().op_Equality(remove, null) || 
        remove.get_IsPrivate()));
  };

  function ReflectionUtils_IsPublic$1A (property) {
    return ($T10().op_Inequality(property.GetGetMethod(false), null) || $T10().op_Inequality(property.GetSetMethod(false), null));
  };

  function ReflectionUtils_IsPublic$1B (type) {
    return ($T0F().GetTypeInfo(type)).get_IsPublic();
  };

  function ReflectionUtils_IsSealed (type) {
    return ($T0F().GetTypeInfo(type)).get_IsSealed();
  };

  function ReflectionUtils_IsStatic$1C (property) {
    var getter = property.GetGetMethod(true);
    var setter = property.GetSetMethod(true);
    return (($T10().op_Inequality(getter, null) && 
        getter.get_IsStatic()) || ($T10().op_Inequality(setter, null) && 
        setter.get_IsStatic()));
  };

  function ReflectionUtils_IsStatic$1D (evnt) {
    var add = evnt.GetAddMethod(true);
    var remove = evnt.GetRemoveMethod(true);
    return (($T10().op_Inequality(add, null) && 
        add.get_IsStatic()) || ($T10().op_Inequality(remove, null) && 
        remove.get_IsStatic()));
  };

  function ReflectionUtils_IsValueType (type) {
    return ($T0F().GetTypeInfo(type)).get_IsValueType();
  };

  function ReflectionUtils_IsVisible (type) {
    return ($T0F().GetTypeInfo(type)).get_IsVisible();
  };

  function ReflectionUtils_MatchesFlags$1E (member, flags) {
    return (((($T27().$Cast((
              member.get_IsPublic()
                 ? $T27().Public
                 : $T27().NonPublic)
             & flags)).valueOf() | 0) !== 0) && ($T27().$Cast((
            member.get_IsStatic()
               ? $T27().Static
               : $T27().Instance)
           & flags) !== $T27().Default));
  };

  function ReflectionUtils_MatchesFlags$1F (member, flags) {
    return (((($T27().$Cast((
              member.get_IsPublic()
                 ? $T27().Public
                 : $T27().NonPublic)
             & flags)).valueOf() | 0) !== 0) && ($T27().$Cast((
            member.get_IsStatic()
               ? $T27().Static
               : $T27().Instance)
           & flags) !== $T27().Default));
  };

  function ReflectionUtils_MatchesFlags$20 (member, flags) {
    return (((($T27().$Cast((
              member.get_IsPublic()
                 ? $T27().Public
                 : $T27().NonPublic)
             & flags)).valueOf() | 0) !== 0) && ($T27().$Cast((
            member.get_IsStatic()
               ? $T27().Static
               : $T27().Instance)
           & flags) !== $T27().Default));
  };

  function ReflectionUtils_MatchesFlags$21 (member, flags) {
    return (((($T27().$Cast((
              $S1D().CallStatic($thisType, "IsPublic", null, member)
                 ? $T27().Public
                 : $T27().NonPublic)
             & flags)).valueOf() | 0) !== 0) && ($T27().$Cast((
            $S1B().CallStatic($thisType, "IsStatic", null, member)
               ? $T27().Static
               : $T27().Instance)
           & flags) !== $T27().Default));
  };

  function ReflectionUtils_MatchesFlags$22 (member, flags) {
    var add = member.GetAddMethod();
    var remove = member.GetRemoveMethod();
    var raise = member.GetRaiseMethod();
    var isPublic = ($T10().op_Inequality(add, null) && 
      add.get_IsPublic()) || 
    ($T10().op_Inequality(remove, null) && 
      remove.get_IsPublic()) || 
    ($T10().op_Inequality(raise, null) && 
      raise.get_IsPublic());
    var isStatic = ($T10().op_Inequality(add, null) && 
      add.get_IsStatic()) || 
    ($T10().op_Inequality(remove, null) && 
      remove.get_IsStatic()) || 
    ($T10().op_Inequality(raise, null) && 
      raise.get_IsStatic());
    return (((($T27().$Cast((
              isPublic
                 ? $T27().Public
                 : $T27().NonPublic)
             & flags)).valueOf() | 0) !== 0) && ($T27().$Cast((
            isStatic
               ? $T27().Static
               : $T27().Instance)
           & flags) !== $T27().Default));
  };

  function ReflectionUtils_MatchesFlags$23 (member, flags) {
    return ($T27().$Cast((
          (member.get_IsPublic() || 
            member.get_IsNestedPublic())
             ? $T27().Public
             : $T27().NonPublic)
         & flags) !== $T27().Default);
  };

  function ReflectionUtils_MatchesFlags$24 (member, flags) {
    var method = null, field = null, ctor = null, evnt = null, property = null;
    if ($T10().op_Inequality(method = $T10().$As(member), null)) {
      var result = $S1E().CallStatic($thisType, "MatchesFlags", null, method, flags);
    } else if ($T39().op_Inequality(field = $T39().$As(member), null)) {
      result = $S1F().CallStatic($thisType, "MatchesFlags", null, field, flags);
    } else if ($T0E().op_Inequality(ctor = $T0E().$As(member), null)) {
      result = $S20().CallStatic($thisType, "MatchesFlags", null, ctor, flags);
    } else if ($T38().op_Inequality(evnt = $T38().$As(member), null)) {
      result = $S21().CallStatic($thisType, "MatchesFlags", null, evnt, flags);
    } else if ($T37().op_Inequality(property = $T37().$As(member), null)) {
      result = $S22().CallStatic($thisType, "MatchesFlags", null, property, flags);
    } else {
      result = $S23().CallStatic($thisType, "MatchesFlags", null, $T00().$Cast(member), flags);
    }
    return result;
  };

  function ReflectionUtils_ProhibitsNull (parameter) {
    return parameter.IsDefined($T61().__Type__, false);
  };

  function ReflectionUtils_ProhibitsNullItems (parameter) {
    return parameter.IsDefined($T62().__Type__, false);
  };

  function ReflectionUtils_SignatureEquals (method, requiredSignature) {
    $T17().RequiresNotNull(method, "method");
    var actualTypes = $S24().CallStatic($thisType, "GetParameterTypes", null, method.GetParameters());

    for (var i = 0; i < (actualTypes.length | 0); i = ((i + 1) | 0)) {
      if ($T00().op_Inequality(actualTypes[i], requiredSignature[i])) {
        var result = false;
        return result;
      }
    }
    result = $T00().op_Equality(method.get_ReturnType(), requiredSignature[i]);
    return result;
  };

  function ReflectionUtils_ToValidTypeName (str) {
    if ($T1A().IsNullOrEmpty(str)) {
      var result = "_";
    } else {
      var sb = $S25().Construct(str);

      for (var i = 0; i < (str.length | 0); i = ((i + 1) | 0)) {
        if (!(!(((str[i]) === "\0") || 
              (((str[i]).charCodeAt(0) | 0) === ((".").charCodeAt(0) | 0)) || 
              (((str[i]).charCodeAt(0) | 0) === (("*").charCodeAt(0) | 0)) || 
              (((str[i]).charCodeAt(0) | 0) === (("+").charCodeAt(0) | 0)) || 
              (((str[i]).charCodeAt(0) | 0) === (("[").charCodeAt(0) | 0)) || 
              (((str[i]).charCodeAt(0) | 0) === (("]").charCodeAt(0) | 0))) && (((str[i]).charCodeAt(0) | 0) !== (("\\").charCodeAt(0) | 0)))) {
          sb.set_Chars(i, "_");
        }
      }
      result = sb.toString();
    }
    return result;
  };

  function ReflectionUtils_UnwrapEnumValue (value) {
    if (value === null) {
      throw $S26().Construct("value");
    }
    switch (($thisType.GetTypeCode(JSIL.GetType(value))).valueOf()) {
      case 5: 
        var result = $S27().CallStatic($T64(), "ToSByte", null, value);
        break;

      case 6: 
        result = $S28().CallStatic($T64(), "ToByte", null, value);
        break;

      case 7: 
        result = $S29().CallStatic($T64(), "ToInt16", null, value);
        break;

      case 8: 
        result = $S2A().CallStatic($T64(), "ToUInt16", null, value);
        break;

      case 9: 
        result = $S2B().CallStatic($T64(), "ToInt32", null, value);
        break;

      case 10: 
        result = $S2C().CallStatic($T64(), "ToUInt32", null, value);
        break;

      case 11: 
        result = $S2D().CallStatic($T64(), "ToInt64", null, value);
        break;

      case 12: 
        result = $S2E().CallStatic($T64(), "ToUInt64", null, value);
        break;

      default: 
        throw $S2F().Construct("Value must be a boxed enum.", "value");

    }
    return result;
  };

  function ReflectionUtils_WithBindingFlags$b1 (T, members, matchFlags, flags) {
    var $closure0 = new ($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass1$b1.Of(T)) ();
    $closure0.matchFlags = matchFlags;
    $closure0.flags = flags;
    return $S30().CallStatic($T22(), "Where$b1", [T], members, $asm01.System.Func$b2.Of(T, $asm01.System.Boolean).New($closure0, $asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass1$b1.Of(T).prototype.$lWithBindingFlags$gb__0, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass1$b1.Of(T), "$lWithBindingFlags$gb__0", new JSIL.MethodSignature($asm01.System.Boolean, [T]), false); }));
  };

  function ReflectionUtils_WithBindingFlags$25 (members, flags) {
    return $thisType.WithBindingFlags$b1($T01())(members, $T65().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S31(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$26 (members, flags) {
    return $thisType.WithBindingFlags$b1($T10())(members, $T66().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S1E(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$27 (members, flags) {
    return $thisType.WithBindingFlags$b1($T0E())(members, $T67().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S20(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$28 (members, flags) {
    return $thisType.WithBindingFlags$b1($T39())(members, $T68().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S1F(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$29 (members, flags) {
    return $thisType.WithBindingFlags$b1($T37())(members, $T69().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S22(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$2A (members, flags) {
    return $thisType.WithBindingFlags$b1($T38())(members, $T6A().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S21(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$2B (members, flags) {
    return $thisType.WithBindingFlags$b1($T00())(members, $T6B().New($thisType, $thisType.MatchesFlags, function () { return JSIL.GetMethodInfo($thisType, "MatchesFlags", $S23(), true); }), flags);
  };

  function ReflectionUtils_WithBindingFlags$2C (member, flags) {
    return (
      ($T01().op_Inequality(member, null) && $S31().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithBindingFlags$2D (member, flags) {
    return (
      ($T10().op_Inequality(member, null) && $S1E().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithBindingFlags$2E (member, flags) {
    return (
      ($T0E().op_Inequality(member, null) && $S20().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithBindingFlags$2F (member, flags) {
    return (
      ($T39().op_Inequality(member, null) && $S1F().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithBindingFlags$30 (member, flags) {
    return (
      ($T37().op_Inequality(member, null) && $S22().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithBindingFlags$31 (member, flags) {
    return (
      ($T38().op_Inequality(member, null) && $S21().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithBindingFlags$32 (member, flags) {
    return (
      ($T00().op_Inequality(member, null) && $S23().CallStatic($thisType, "MatchesFlags", null, member, flags))
         ? member
         : null)
    ;
  };

  function ReflectionUtils_WithSignature$33 (members, parameterTypes) {
    var $closure0 = new ($T6C())();
    $closure0.parameterTypes = parameterTypes;
    return $S32().CallStatic($T22(), "Where$b1", [$asm01.System.Reflection.MethodInfo], members, $T6D().New($closure0, $T6C().prototype.$lWithSignature$gb__3, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass4, "$lWithSignature$gb__3", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Reflection.MethodInfo]), false); }));
  };

  function ReflectionUtils_WithSignature$34 (members, parameterTypes) {
    var $closure0 = new ($T6E())();
    $closure0.parameterTypes = parameterTypes;
    return $S33().CallStatic($T22(), "Where$b1", [$asm01.System.Reflection.ConstructorInfo], members, $T6F().New($closure0, $T6E().prototype.$lWithSignature$gb__6, function () { return JSIL.GetMethodInfo($asm00.Microsoft.Scripting.Utils.ReflectionUtils_$l$gc__DisplayClass7, "$lWithSignature$gb__6", new JSIL.MethodSignature($asm01.System.Boolean, [$asm01.System.Reflection.ConstructorInfo]), false); }));
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.ReflectionUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "$lFormatSignature$gb__33", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_$lFormatSignature$gb__33
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lFormatTypeArgs$gb__37", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_$lFormatTypeArgs$gb__37
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lFormatTypeName$gb__35", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_$lFormatTypeName$gb__35
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lGetAllTypesFromAssembly$gb__4a", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_$lGetAllTypesFromAssembly$gb__4a
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "$lGetMethodInfos$gb__39", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodBase"), [$asm01.TypeRef("System.Reflection.MemberInfo")]), 
      ReflectionUtils_$lGetMethodInfos$gb__39
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "Ancestors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_Ancestors
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "BindGenericParameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ]), 
      ReflectionUtils_BindGenericParameters$00
    );

    $.Method({Static:true , Public:false}, "BindGenericParameters", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Func`3", [
              $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
              $.Boolean
            ])
        ]), 
      ReflectionUtils_BindGenericParameters$01
    );

    $.Method({Static:true , Public:false}, "ConstraintsViolated", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), $.Boolean]), 
      ReflectionUtils_ConstraintsViolated$02
    );

    $.Method({Static:true , Public:false}, "ConstraintsViolated", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), $.Boolean
        ]), 
      ReflectionUtils_ConstraintsViolated$03
    );

    $.Method({Static:true , Public:true }, "ContainsGenericParameters", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_ContainsGenericParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Type")]), 
      ReflectionUtils_CreateDelegate$04
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Type"), 
          $.Object
        ]), 
      ReflectionUtils_CreateDelegate$05
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "EnumerateExtensionMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), 
      ReflectionUtils_EnumerateExtensionMethods
    );

    $.Method({Static:true , Public:true }, "FormatSignature", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Reflection.MethodBase")]), 
      ReflectionUtils_FormatSignature$06
    );

    $.Method({Static:true , Public:true }, "FormatSignature", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [
          $asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Reflection.MethodBase"), 
          $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.String])
        ]), 
      ReflectionUtils_FormatSignature$07
    );

    $.Method({Static:true , Public:true }, "FormatTypeArgs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      ReflectionUtils_FormatTypeArgs$08
    );

    $.Method({Static:true , Public:true }, "FormatTypeArgs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [
          $asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.String])
        ]), 
      ReflectionUtils_FormatTypeArgs$09
    );

    $.Method({Static:true , Public:true }, "FormatTypeName", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Type")]), 
      ReflectionUtils_FormatTypeName$0A
    );

    $.Method({Static:true , Public:true }, "FormatTypeName", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.StringBuilder"), [
          $asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.String])
        ]), 
      ReflectionUtils_FormatTypeName$0B
    );

    $.Method({Static:true , Public:false}, "GetAllTypesFromAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Reflection.Assembly")]), 
      ReflectionUtils_GetAllTypesFromAssembly$0C
    );

    $.Method({Static:true , Public:false}, "GetAllTypesFromAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Reflection.Assembly"), $.Boolean]), 
      ReflectionUtils_GetAllTypesFromAssembly$0D
    );

    $.Method({Static:true , Public:true }, "GetBaseType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetBaseType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetCustomAttribute", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Reflection.Assembly"), $.Boolean], ["T"]), 
      ReflectionUtils_GetCustomAttribute$b1$0E
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetCustomAttribute", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Reflection.MemberInfo"), $.Boolean], ["T"]), 
      ReflectionUtils_GetCustomAttribute$b1$0F
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Reflection.Assembly"), $.Boolean], ["T"]), 
      ReflectionUtils_GetCustomAttributes$b1$10
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Reflection.MemberInfo"), $.Boolean], ["T"]), 
      ReflectionUtils_GetCustomAttributes$b1$11
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredConstructors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetDeclaredConstructors
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredEvent", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.EventInfo"), [$asm01.TypeRef("System.Type"), $.String]), 
      ReflectionUtils_GetDeclaredEvent
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredEvents", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetDeclaredEvents
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredField", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.FieldInfo"), [$asm01.TypeRef("System.Type"), $.String]), 
      ReflectionUtils_GetDeclaredField
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredFields", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetDeclaredFields
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredInterfaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetDeclaredInterfaces
    );

    $.Method({Static:true , Public:true }, "GetDeclaredMembers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [$asm01.TypeRef("System.Type"), $.String]), 
      ReflectionUtils_GetDeclaredMembers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Type"), $.String]), 
      ReflectionUtils_GetDeclaredMethods
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredNestedType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $.String]), 
      ReflectionUtils_GetDeclaredNestedType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredNestedTypes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetDeclaredNestedTypes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredProperties", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetDeclaredProperties
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDeclaredProperty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm01.TypeRef("System.Type"), $.String]), 
      ReflectionUtils_GetDeclaredProperty
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_GetDefaultValue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetDelegateSignature", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Reflection.ParameterInfo")])
        ]), 
      ReflectionUtils_GetDelegateSignature
    );

    $.Method({Static:true , Public:true }, "GetGenericParameterAttributes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.GenericParameterAttributes"), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetGenericParameterAttributes
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetGenericTypeArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetGenericTypeArguments
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetGenericTypeParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetGenericTypeParameters
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetImplementedInterfaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetImplementedInterfaces
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetInheritedEvents", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), [
          $asm01.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      ReflectionUtils_GetInheritedEvents
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetInheritedFields", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), [
          $asm01.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      ReflectionUtils_GetInheritedFields
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetInheritedMembers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [
          $asm01.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      ReflectionUtils_GetInheritedMembers
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetInheritedMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [
          $asm01.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      ReflectionUtils_GetInheritedMethods
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetInheritedProperties", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), [
          $asm01.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      ReflectionUtils_GetInheritedProperties
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetMethodInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Delegate")]), 
      ReflectionUtils_GetMethodInfo
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetMethodInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MethodBase")]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MemberInfo")])]), 
      ReflectionUtils_GetMethodInfos
    );

    $.Method({Static:true , Public:true }, "GetModules", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.Module")]), [$asm01.TypeRef("System.Reflection.Assembly")]), 
      ReflectionUtils_GetModules
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetNormalizedTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetNormalizedTypeName$12
    );

    $.Method({Static:true , Public:true }, "GetNormalizedTypeName", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ReflectionUtils_GetNormalizedTypeName$13
    );

    $.Method({Static:true , Public:true }, "GetObjectCallSiteDelegateType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.Int32]), 
      ReflectionUtils_GetObjectCallSiteDelegateType
    );

    $.Method({Static:true , Public:true }, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      ReflectionUtils_GetParameterTypes$14
    );

    $.Method({Static:true , Public:true }, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      ReflectionUtils_GetParameterTypes$15
    );

    $.Method({Static:true , Public:true }, "GetRawConstantValue", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Reflection.FieldInfo")]), 
      ReflectionUtils_GetRawConstantValue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetReturnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      ReflectionUtils_GetReturnType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetTypeCode", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TypeCode"), [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_GetTypeCode
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetVisibleExtensionMethodGroups", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), [$asm01.TypeRef("System.Reflection.Assembly"), $.Boolean]), 
      ReflectionUtils_GetVisibleExtensionMethodGroups
    );

    $.Method({Static:true , Public:true }, "GetVisibleExtensionMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Reflection.Assembly")]), 
      ReflectionUtils_GetVisibleExtensionMethods
    );

    $.Method({Static:true , Public:true }, "GetVisibleExtensionMethodsSlow", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Reflection.Assembly")]), 
      ReflectionUtils_GetVisibleExtensionMethodsSlow
    );

    $.Method({Static:true , Public:true }, "HasDefaultValue", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_HasDefaultValue
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "IncludeEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Reflection.EventInfo"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $.Boolean
        ]), 
      ReflectionUtils_IncludeEvent
    );

    $.Method({Static:true , Public:false}, "IncludeField", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Reflection.FieldInfo"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ]), 
      ReflectionUtils_IncludeField
    );

    $.Method({Static:true , Public:false}, "IncludeMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $.Boolean
        ]), 
      ReflectionUtils_IncludeMethod
    );

    $.Method({Static:true , Public:false}, "IncludeProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Reflection.PropertyInfo"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $.Boolean
        ]), 
      ReflectionUtils_IncludeProperty
    );

    $.Method({Static:true , Public:false}, "InstantiateConstraint", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")])]), 
      ReflectionUtils_InstantiateConstraint
    );

    $.Method({Static:true , Public:true }, "IsAbstract", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsAbstract
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsClass", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsClass
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsDefined
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsDynamicMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      ReflectionUtils_IsDynamicMethod
    );

    $.Method({Static:true , Public:true }, "IsEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsEnum
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsExtension", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MemberInfo")]), 
      ReflectionUtils_IsExtension
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsGenericType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsGenericType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsGenericTypeDefinition", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsGenericTypeDefinition
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsInterface
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsMandatory", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_IsMandatory
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsOutParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_IsOutParameter
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsParamArray", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_IsParamArray
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsParamDictionary", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_IsParamDictionary
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsParamsMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodBase")]), 
      ReflectionUtils_IsParamsMethod$16
    );

    $.Method({Static:true , Public:true }, "IsParamsMethod", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])]), 
      ReflectionUtils_IsParamsMethod$17
    );

    $.Method({Static:true , Public:true }, "IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsPrimitive
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsPrivate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo")]), 
      ReflectionUtils_IsPrivate$18
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsPrivate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.EventInfo")]), 
      ReflectionUtils_IsPrivate$19
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsPublic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo")]), 
      ReflectionUtils_IsPublic$1A
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsPublic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsPublic$1B
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsSealed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsSealed
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo")]), 
      ReflectionUtils_IsStatic$1C
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsStatic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.EventInfo")]), 
      ReflectionUtils_IsStatic$1D
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsValueType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "IsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ReflectionUtils_IsVisible
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ConstructorInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$1E
    );

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$1F
    );

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.FieldInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$20
    );

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$21
    );

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.EventInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$22
    );

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$23
    );

    $.Method({Static:true , Public:false}, "MatchesFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_MatchesFlags$24
    );

    $.Method({Static:true , Public:true }, "ProhibitsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_ProhibitsNull
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ProhibitsNullItems", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
      ReflectionUtils_ProhibitsNullItems
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "SignatureEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      ReflectionUtils_SignatureEquals
    )
      .Parameter(1, "requiredSignature", function (_) {
          _.Attribute($asm01.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:false}, "ToValidTypeName", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ReflectionUtils_ToValidTypeName
    );

    $.Method({Static:true , Public:true }, "UnwrapEnumValue", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      ReflectionUtils_UnwrapEnumValue
    );

    $.Method({Static:true , Public:false}, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Func`3", [
              "!!0", $asm01.TypeRef("System.Reflection.BindingFlags"), 
              $.Boolean
            ]), 
          $asm01.TypeRef("System.Reflection.BindingFlags")
        ], ["T"]), 
      ReflectionUtils_WithBindingFlags$b1
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$25
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$26
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$27
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$28
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$29
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$2A
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$2B
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MemberInfo"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$2C
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$2D
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [$asm01.TypeRef("System.Reflection.ConstructorInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$2E
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.FieldInfo"), [$asm01.TypeRef("System.Reflection.FieldInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$2F
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm01.TypeRef("System.Reflection.PropertyInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$30
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.EventInfo"), [$asm01.TypeRef("System.Reflection.EventInfo"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$31
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithBindingFlags", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.BindingFlags")]), 
      ReflectionUtils_WithBindingFlags$32
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithSignature", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      ReflectionUtils_WithSignature$33
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "WithSignature", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])]), 
      ReflectionUtils_WithSignature$34
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Constant({Static:true , Public:true }, "AllMembers", 60); 
    $.Constant({Static:true , Public:true }, "GenericArityDelimiter", "`"); 
    $.Field({Static:true , Public:true }, "EmptyTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), function ($pi) {
        return JSIL.Array.New($asm01.System.Type, 0);
      }); 
    $.Field({Static:true , Public:false}, "_extensionMethodsCache", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])])); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate34", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.String]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate36", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.String]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate38", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.String]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate3a", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.MethodBase")]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate4b", $asm01.TypeRef("System.Func`2", [$asm01.TypeRef("System.Type"), $.Boolean]))
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function ReflectionUtils__cctor () {
      $thisType.EmptyTypes = JSIL.Array.New($T00(), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ReflectionUtils__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass1`1 */ 

(function $l$gc__DisplayClass1$b1$Members () {
  var $, $thisType;
  function $l$gc__DisplayClass1$b1__ctor () {
  };

  function $l$gc__DisplayClass1$b1_$lWithBindingFlags$gb__0 (member) {
    return this.matchFlags(member, this.flags);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass1$b1__ctor
    );

    $.Method({Static:false, Public:true }, "$lWithBindingFlags$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")]), 
      $l$gc__DisplayClass1$b1_$lWithBindingFlags$gb__0
    );

    $.Field({Static:false, Public:true }, "matchFlags", $asm01.TypeRef("System.Func`3", [
          $.GenericParameter("T"), $asm01.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "flags", $asm01.TypeRef("System.Reflection.BindingFlags")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };

  function $l$gc__DisplayClass4__ctor () {
  };

  function $l$gc__DisplayClass4_$lWithSignature$gb__3 (c) {
    var ps = c.GetParameters();
    if ((ps.length | 0) !== (this.parameterTypes.length | 0)) {
      var result = false;
    } else {

      for (var i = 0; i < (ps.length | 0); i = ((i + 1) | 0)) {
        if ($T06().op_Inequality(this.parameterTypes[i], (ps[i]).get_ParameterType())) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass4__ctor
    );

    $.Method({Static:false, Public:true }, "$lWithSignature$gb__3", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      $l$gc__DisplayClass4_$lWithSignature$gb__3
    );

    $.Field({Static:false, Public:true }, "parameterTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass7 */ 

(function $l$gc__DisplayClass7$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.ParameterInfo))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.ParameterInfo)) ();
  };

  function $l$gc__DisplayClass7__ctor () {
  };

  function $l$gc__DisplayClass7_$lWithSignature$gb__6 (c) {
    var ps = c.GetParameters();
    if ((ps.length | 0) !== (this.parameterTypes.length | 0)) {
      var result = false;
    } else {

      for (var i = 0; i < (ps.length | 0); i = ((i + 1) | 0)) {
        if ($T06().op_Inequality(this.parameterTypes[i], (ps[i]).get_ParameterType())) {
          result = false;
          return result;
        }
      }
      result = true;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass7__ctor
    );

    $.Method({Static:false, Public:true }, "$lWithSignature$gb__6", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ConstructorInfo")]), 
      $l$gc__DisplayClass7_$lWithSignature$gb__6
    );

    $.Field({Static:false, Public:true }, "parameterTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedMethods>d__9 */ 

(function $lGetInheritedMethods$gd__9$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.System.Collections.Generic.HashSet$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReferenceEqualityComparer$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo).GetEnumerator)) ();
  };

  function $lGetInheritedMethods$gd__9__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetInheritedMethods$gd__9_$l$gm__Finally10 () {
    this.$l$g1__state = 1;
    if (this.$l$g7__wrapf !== null) {
      $IM00().Call(this.$l$g7__wrapf, null);
    }
  };

  function $lGetInheritedMethods$gd__9_$l$gm__Finallye () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrapd !== null) {
      $IM00().Call(this.$l$g7__wrapd, null);
    }
  };

  function $lGetInheritedMethods$gd__9_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var num = (this.$l$g1__state | 0);
            if (num === 0) {
              this.$l$g1__state = -1;

              while ((this.type).get_IsGenericParameter()) {
                this.type = $T05().GetBaseType(this.type);
              }
              this.$lbaseDefinitions$g5__a = $S00().Construct($T07().Instance);
              this.$l$g7__wrapd = $IM01().Call($T05().Ancestors(this.type), null);
              this.$l$g1__state = 1;
              $label0 = 3 /* goto IL_134 */ ;
              continue $labelgroup0;
            }
            if (num !== 3) {
              $label0 = 4 /* goto IL_14E */ ;
              continue $labelgroup0;
            }
            this.$l$g1__state = 2;

            $label0 = 1 /* goto IL_11C */ ;
            continue $labelgroup0;
          case 1: /* IL_11C */ 

            $label0 = 2 /* goto IL_11D */ ;
            continue $labelgroup0;
          case 2: /* IL_11D */ 
            if (!$IM02().Call(this.$l$g7__wrapf, null)) {
              this.$l$gm__Finally10();
            } else {
              this.$ldeclaredMethod$g5__c = $IM03().Call(this.$l$g7__wrapf, null);
              if (!(!$T0B().op_Inequality(this.$ldeclaredMethod$g5__c, null) || !$T05().IncludeMethod(this.$ldeclaredMethod$g5__c, this.type, this.$lbaseDefinitions$g5__a, this.flattenHierarchy))) {
                this.$l$g2__current = this.$ldeclaredMethod$g5__c;
                this.$l$g1__state = 3;
                var result = true;
                return result;
              }
              $label0 = 1 /* goto IL_11C */ ;
              continue $labelgroup0;
            }

            $label0 = 3 /* goto IL_134 */ ;
            continue $labelgroup0;
          case 3: /* IL_134 */ 
            if ($IM02().Call(this.$l$g7__wrapd, null)) {
              this.$lancestor$g5__b = $IM04().Call(this.$l$g7__wrapd, null);
              this.$l$g7__wrapf = $IM05().Call($T05().GetDeclaredMethods(this.$lancestor$g5__b, this.$name), null);
              this.$l$g1__state = 2;
              $label0 = 2 /* goto IL_11D */ ;
              continue $labelgroup0;
            }
            this.$l$gm__Finallye();

            $label0 = 4 /* goto IL_14E */ ;
            continue $labelgroup0;
          case 4: /* IL_14E */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetInheritedMethods$gd__9_System_Collections_Generic_IEnumerable$lSystem_Reflection_MethodInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetInheritedMethods$gd__ = this;
    } else {
      $lGetInheritedMethods$gd__ = new $thisType(0);
    }
    $lGetInheritedMethods$gd__.type = this.$l$g3__type;
    $lGetInheritedMethods$gd__.$name = this.$l$g3__name;
    $lGetInheritedMethods$gd__.flattenHierarchy = this.$l$g3__flattenHierarchy;
    return $lGetInheritedMethods$gd__;
  };

  function $lGetInheritedMethods$gd__9_System_Collections_Generic_IEnumerator$lSystem_Reflection_MethodInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedMethods$gd__9_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_MethodInfo$g_GetEnumerator();
  };

  function $lGetInheritedMethods$gd__9_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedMethods$gd__9_System_Collections_IEnumerator_Reset () {
    throw $S01().Construct();
  };

  function $lGetInheritedMethods$gd__9_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      case 3: 
        break;

      default: 
        return;

    }
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 2: 
                break;

              case 3: 
                break;

              default: 
                break $labelgroup0;

            }
            try {
            } finally {
              this.$l$gm__Finally10();
            }
            break $labelgroup0;

        }
      }
    } finally {
      this.$l$gm__Finallye();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedMethods>d__9", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetInheritedMethods$gd__9__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally10", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedMethods$gd__9_$l$gm__Finally10
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finallye", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedMethods$gd__9_$l$gm__Finallye
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetInheritedMethods$gd__9_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.MethodInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])), 
      $lGetInheritedMethods$gd__9_System_Collections_Generic_IEnumerable$lSystem_Reflection_MethodInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.MethodInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      $lGetInheritedMethods$gd__9_System_Collections_Generic_IEnumerator$lSystem_Reflection_MethodInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetInheritedMethods$gd__9_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetInheritedMethods$gd__9_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedMethods$gd__9_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedMethods$gd__9_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g3__type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "$l$g3__name", $.String); 
    $.Field({Static:false, Public:true }, "flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$l$g3__flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$lbaseDefinitions$g5__a", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])); 
    $.Field({Static:false, Public:true }, "$lancestor$g5__b", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$ldeclaredMethod$g5__c", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrapd", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrapf", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.MethodInfo$g.Current", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedProperties>d__13 */ 

(function $lGetInheritedProperties$gd__13$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.System.Collections.Generic.HashSet$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReferenceEqualityComparer$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.PropertyInfo))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.PropertyInfo))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.PropertyInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.PropertyInfo).GetEnumerator)) ();
  };

  function $lGetInheritedProperties$gd__13__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetInheritedProperties$gd__13_$l$gm__Finally19 () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap18 !== null) {
      $IM00().Call(this.$l$g7__wrap18, null);
    }
  };

  function $lGetInheritedProperties$gd__13_$l$gm__Finally1b () {
    this.$l$g1__state = 1;
    if (this.$l$g7__wrap1a !== null) {
      $IM00().Call(this.$l$g7__wrap1a, null);
    }
  };

  function $lGetInheritedProperties$gd__13_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;

                while ((this.type).get_IsGenericParameter()) {
                  this.type = $T05().GetBaseType(this.type);
                }
                this.$lbaseDefinitions$g5__14 = $S00().Construct($T07().Instance);
                this.$l$g7__wrap18 = $IM01().Call($T05().Ancestors(this.type), null);
                this.$l$g1__state = 1;
                $label0 = 5 /* goto IL_1B9 */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_123 */ ;
                continue $labelgroup0;

              case 4: 
                this.$l$g1__state = 3;
                $label0 = 2 /* goto IL_1A0 */ ;
                continue $labelgroup0;

            }
            $label0 = 6 /* goto IL_1D3 */ ;
            continue $labelgroup0;

          case 1: /* IL_123 */ 
            $label0 = 4 /* goto IL_1B8 */ ;
            continue $labelgroup0;

          case 2: /* IL_1A0 */ 

            $label0 = 3 /* goto IL_1A1 */ ;
            continue $labelgroup0;
          case 3: /* IL_1A1 */ 
            if (!$IM02().Call(this.$l$g7__wrap1a, null)) {
              this.$l$gm__Finally1b();
            } else {
              this.$ldeclaredProperty$g5__17 = $IM03().Call(this.$l$g7__wrap1a, null);
              if ($T05().IncludeProperty(this.$ldeclaredProperty$g5__17, this.type, this.$lbaseDefinitions$g5__14, this.flattenHierarchy)) {
                this.$l$g2__current = this.$ldeclaredProperty$g5__17;
                this.$l$g1__state = 4;
                var result = true;
                return result;
              }
              $label0 = 2 /* goto IL_1A0 */ ;
              continue $labelgroup0;
            }

            $label0 = 4 /* goto IL_1B8 */ ;
            continue $labelgroup0;
          case 4: /* IL_1B8 */ 

            $label0 = 5 /* goto IL_1B9 */ ;
            continue $labelgroup0;
          case 5: /* IL_1B9 */ 
            if (!$IM02().Call(this.$l$g7__wrap18, null)) {
              this.$l$gm__Finally19();
            } else {
              this.$lancestor$g5__15 = $IM04().Call(this.$l$g7__wrap18, null);
              if (this.$name === null) {
                this.$l$g7__wrap1a = $IM05().Call($T05().GetDeclaredProperties(this.$lancestor$g5__15), null);
                this.$l$g1__state = 3;
                $label0 = 3 /* goto IL_1A1 */ ;
                continue $labelgroup0;
              }
              this.$ldeclaredProperty$g5__16 = $T05().GetDeclaredProperty(this.$lancestor$g5__15, this.$name);
              if (!(!$T0E().op_Inequality(this.$ldeclaredProperty$g5__16, null) || !$T05().IncludeProperty(this.$ldeclaredProperty$g5__16, this.type, this.$lbaseDefinitions$g5__14, this.flattenHierarchy))) {
                this.$l$g2__current = this.$ldeclaredProperty$g5__16;
                this.$l$g1__state = 2;
                result = true;
                return result;
              }
              $label0 = 1 /* goto IL_123 */ ;
              continue $labelgroup0;
            }

            $label0 = 6 /* goto IL_1D3 */ ;
            continue $labelgroup0;
          case 6: /* IL_1D3 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetInheritedProperties$gd__13_System_Collections_Generic_IEnumerable$lSystem_Reflection_PropertyInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetInheritedProperties$gd__ = this;
    } else {
      $lGetInheritedProperties$gd__ = new $thisType(0);
    }
    $lGetInheritedProperties$gd__.type = this.$l$g3__type;
    $lGetInheritedProperties$gd__.$name = this.$l$g3__name;
    $lGetInheritedProperties$gd__.flattenHierarchy = this.$l$g3__flattenHierarchy;
    return $lGetInheritedProperties$gd__;
  };

  function $lGetInheritedProperties$gd__13_System_Collections_Generic_IEnumerator$lSystem_Reflection_PropertyInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedProperties$gd__13_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_PropertyInfo$g_GetEnumerator();
  };

  function $lGetInheritedProperties$gd__13_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedProperties$gd__13_System_Collections_IEnumerator_Reset () {
    throw $S01().Construct();
  };

  function $lGetInheritedProperties$gd__13_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      case 3: 
        break;

      case 4: 
        break;

      default: 
        return;

    }
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 3: 
                break;

              case 4: 
                break;

              default: 
                break $labelgroup0;

            }
            try {
            } finally {
              this.$l$gm__Finally1b();
            }
            break $labelgroup0;

        }
      }
    } finally {
      this.$l$gm__Finally19();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedProperties>d__13", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetInheritedProperties$gd__13__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally19", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedProperties$gd__13_$l$gm__Finally19
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally1b", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedProperties$gd__13_$l$gm__Finally1b
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetInheritedProperties$gd__13_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.PropertyInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")])), 
      $lGetInheritedProperties$gd__13_System_Collections_Generic_IEnumerable$lSystem_Reflection_PropertyInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.PropertyInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.PropertyInfo")), 
      $lGetInheritedProperties$gd__13_System_Collections_Generic_IEnumerator$lSystem_Reflection_PropertyInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetInheritedProperties$gd__13_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetInheritedProperties$gd__13_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedProperties$gd__13_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedProperties$gd__13_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g3__type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "$l$g3__name", $.String); 
    $.Field({Static:false, Public:true }, "flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$l$g3__flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$lbaseDefinitions$g5__14", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])); 
    $.Field({Static:false, Public:true }, "$lancestor$g5__15", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$ldeclaredProperty$g5__16", $asm01.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:true }, "$ldeclaredProperty$g5__17", $asm01.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap18", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap1a", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.PropertyInfo$g.Current", $asm01.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.PropertyInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedEvents>d__1e */ 

(function $lGetInheritedEvents$gd__1e$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.System.Collections.Generic.HashSet$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReferenceEqualityComparer$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.EventInfo))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.EventInfo))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Reflection.EventInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.EventInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.EventInfo).GetEnumerator)) ();
  };

  function $lGetInheritedEvents$gd__1e__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetInheritedEvents$gd__1e_$l$gm__Finally24 () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap23 !== null) {
      $IM00().Call(this.$l$g7__wrap23, null);
    }
  };

  function $lGetInheritedEvents$gd__1e_$l$gm__Finally26 () {
    this.$l$g1__state = 1;
    if (this.$l$g7__wrap25 !== null) {
      $IM00().Call(this.$l$g7__wrap25, null);
    }
  };

  function $lGetInheritedEvents$gd__1e_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;

                while ((this.type).get_IsGenericParameter()) {
                  this.type = $T05().GetBaseType(this.type);
                }
                this.$lbaseDefinitions$g5__1f = $S00().Construct($T07().Instance);
                this.$l$g7__wrap23 = $IM01().Call($T05().Ancestors(this.type), null);
                this.$l$g1__state = 1;
                $label0 = 5 /* goto IL_1B9 */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_123 */ ;
                continue $labelgroup0;

              case 4: 
                this.$l$g1__state = 3;
                $label0 = 2 /* goto IL_1A0 */ ;
                continue $labelgroup0;

            }
            $label0 = 6 /* goto IL_1D3 */ ;
            continue $labelgroup0;

          case 1: /* IL_123 */ 
            $label0 = 4 /* goto IL_1B8 */ ;
            continue $labelgroup0;

          case 2: /* IL_1A0 */ 

            $label0 = 3 /* goto IL_1A1 */ ;
            continue $labelgroup0;
          case 3: /* IL_1A1 */ 
            if (!$IM02().Call(this.$l$g7__wrap25, null)) {
              this.$l$gm__Finally26();
            } else {
              this.$ldeclaredEvent$g5__22 = $IM03().Call(this.$l$g7__wrap25, null);
              if ($T05().IncludeEvent(this.$ldeclaredEvent$g5__22, this.type, this.$lbaseDefinitions$g5__1f, this.flattenHierarchy)) {
                this.$l$g2__current = this.$ldeclaredEvent$g5__22;
                this.$l$g1__state = 4;
                var result = true;
                return result;
              }
              $label0 = 2 /* goto IL_1A0 */ ;
              continue $labelgroup0;
            }

            $label0 = 4 /* goto IL_1B8 */ ;
            continue $labelgroup0;
          case 4: /* IL_1B8 */ 

            $label0 = 5 /* goto IL_1B9 */ ;
            continue $labelgroup0;
          case 5: /* IL_1B9 */ 
            if (!$IM02().Call(this.$l$g7__wrap23, null)) {
              this.$l$gm__Finally24();
            } else {
              this.$lancestor$g5__20 = $IM04().Call(this.$l$g7__wrap23, null);
              if (this.$name === null) {
                this.$l$g7__wrap25 = $IM05().Call($T05().GetDeclaredEvents(this.$lancestor$g5__20), null);
                this.$l$g1__state = 3;
                $label0 = 3 /* goto IL_1A1 */ ;
                continue $labelgroup0;
              }
              this.$ldeclaredEvent$g5__21 = $T05().GetDeclaredEvent(this.$lancestor$g5__20, this.$name);
              if (!(!$T0E().op_Inequality(this.$ldeclaredEvent$g5__21, null) || !$T05().IncludeEvent(this.$ldeclaredEvent$g5__21, this.type, this.$lbaseDefinitions$g5__1f, this.flattenHierarchy))) {
                this.$l$g2__current = this.$ldeclaredEvent$g5__21;
                this.$l$g1__state = 2;
                result = true;
                return result;
              }
              $label0 = 1 /* goto IL_123 */ ;
              continue $labelgroup0;
            }

            $label0 = 6 /* goto IL_1D3 */ ;
            continue $labelgroup0;
          case 6: /* IL_1D3 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetInheritedEvents$gd__1e_System_Collections_Generic_IEnumerable$lSystem_Reflection_EventInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetInheritedEvents$gd__1e = this;
    } else {
      $lGetInheritedEvents$gd__1e = new $thisType(0);
    }
    $lGetInheritedEvents$gd__1e.type = this.$l$g3__type;
    $lGetInheritedEvents$gd__1e.$name = this.$l$g3__name;
    $lGetInheritedEvents$gd__1e.flattenHierarchy = this.$l$g3__flattenHierarchy;
    return $lGetInheritedEvents$gd__1e;
  };

  function $lGetInheritedEvents$gd__1e_System_Collections_Generic_IEnumerator$lSystem_Reflection_EventInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedEvents$gd__1e_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_EventInfo$g_GetEnumerator();
  };

  function $lGetInheritedEvents$gd__1e_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedEvents$gd__1e_System_Collections_IEnumerator_Reset () {
    throw $S01().Construct();
  };

  function $lGetInheritedEvents$gd__1e_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      case 3: 
        break;

      case 4: 
        break;

      default: 
        return;

    }
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 3: 
                break;

              case 4: 
                break;

              default: 
                break $labelgroup0;

            }
            try {
            } finally {
              this.$l$gm__Finally26();
            }
            break $labelgroup0;

        }
      }
    } finally {
      this.$l$gm__Finally24();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedEvents>d__1e", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetInheritedEvents$gd__1e__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally24", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedEvents$gd__1e_$l$gm__Finally24
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally26", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedEvents$gd__1e_$l$gm__Finally26
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetInheritedEvents$gd__1e_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.EventInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.EventInfo")])), 
      $lGetInheritedEvents$gd__1e_System_Collections_Generic_IEnumerable$lSystem_Reflection_EventInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.EventInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.EventInfo")), 
      $lGetInheritedEvents$gd__1e_System_Collections_Generic_IEnumerator$lSystem_Reflection_EventInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetInheritedEvents$gd__1e_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetInheritedEvents$gd__1e_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedEvents$gd__1e_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedEvents$gd__1e_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.EventInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g3__type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "$l$g3__name", $.String); 
    $.Field({Static:false, Public:true }, "flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$l$g3__flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$lbaseDefinitions$g5__1f", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])); 
    $.Field({Static:false, Public:true }, "$lancestor$g5__20", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$ldeclaredEvent$g5__21", $asm01.TypeRef("System.Reflection.EventInfo")); 
    $.Field({Static:false, Public:true }, "$ldeclaredEvent$g5__22", $asm01.TypeRef("System.Reflection.EventInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap23", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap25", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.EventInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.EventInfo$g.Current", $asm01.TypeRef("System.Reflection.EventInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.EventInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedFields>d__29 */ 

(function $lGetInheritedFields$gd__29$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.FieldInfo))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.FieldInfo))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.FieldInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.FieldInfo).GetEnumerator)) ();
  };

  function $lGetInheritedFields$gd__29__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetInheritedFields$gd__29_$l$gm__Finally2e () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap2d !== null) {
      $IM00().Call(this.$l$g7__wrap2d, null);
    }
  };

  function $lGetInheritedFields$gd__29_$l$gm__Finally30 () {
    this.$l$g1__state = 1;
    if (this.$l$g7__wrap2f !== null) {
      $IM00().Call(this.$l$g7__wrap2f, null);
    }
  };

  function $lGetInheritedFields$gd__29_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;

                while ((this.type).get_IsGenericParameter()) {
                  this.type = $T05().GetBaseType(this.type);
                }
                this.$l$g7__wrap2d = $IM01().Call($T05().Ancestors(this.type), null);
                this.$l$g1__state = 1;
                $label0 = 5 /* goto IL_19D */ ;
                continue $labelgroup0;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_10D */ ;
                continue $labelgroup0;

              case 4: 
                this.$l$g1__state = 3;
                $label0 = 2 /* goto IL_184 */ ;
                continue $labelgroup0;

            }
            $label0 = 6 /* goto IL_1B7 */ ;
            continue $labelgroup0;

          case 1: /* IL_10D */ 
            $label0 = 4 /* goto IL_19C */ ;
            continue $labelgroup0;

          case 2: /* IL_184 */ 

            $label0 = 3 /* goto IL_185 */ ;
            continue $labelgroup0;
          case 3: /* IL_185 */ 
            if (!$IM02().Call(this.$l$g7__wrap2f, null)) {
              this.$l$gm__Finally30();
            } else {
              this.$ldeclaredField$g5__2c = $IM03().Call(this.$l$g7__wrap2f, null);
              if ($T05().IncludeField(this.$ldeclaredField$g5__2c, this.type, this.flattenHierarchy)) {
                this.$l$g2__current = this.$ldeclaredField$g5__2c;
                this.$l$g1__state = 4;
                var result = true;
                return result;
              }
              $label0 = 2 /* goto IL_184 */ ;
              continue $labelgroup0;
            }

            $label0 = 4 /* goto IL_19C */ ;
            continue $labelgroup0;
          case 4: /* IL_19C */ 

            $label0 = 5 /* goto IL_19D */ ;
            continue $labelgroup0;
          case 5: /* IL_19D */ 
            if (!$IM02().Call(this.$l$g7__wrap2d, null)) {
              this.$l$gm__Finally2e();
            } else {
              this.$lancestor$g5__2a = $IM04().Call(this.$l$g7__wrap2d, null);
              if (this.$name === null) {
                this.$l$g7__wrap2f = $IM05().Call($T05().GetDeclaredFields(this.$lancestor$g5__2a), null);
                this.$l$g1__state = 3;
                $label0 = 3 /* goto IL_185 */ ;
                continue $labelgroup0;
              }
              this.$ldeclaredField$g5__2b = $T05().GetDeclaredField(this.$lancestor$g5__2a, this.$name);
              if (!(!$T0C().op_Inequality(this.$ldeclaredField$g5__2b, null) || !$T05().IncludeField(this.$ldeclaredField$g5__2b, this.type, this.flattenHierarchy))) {
                this.$l$g2__current = this.$ldeclaredField$g5__2b;
                this.$l$g1__state = 2;
                result = true;
                return result;
              }
              $label0 = 1 /* goto IL_10D */ ;
              continue $labelgroup0;
            }

            $label0 = 6 /* goto IL_1B7 */ ;
            continue $labelgroup0;
          case 6: /* IL_1B7 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetInheritedFields$gd__29_System_Collections_Generic_IEnumerable$lSystem_Reflection_FieldInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetInheritedFields$gd__ = this;
    } else {
      $lGetInheritedFields$gd__ = new $thisType(0);
    }
    $lGetInheritedFields$gd__.type = this.$l$g3__type;
    $lGetInheritedFields$gd__.$name = this.$l$g3__name;
    $lGetInheritedFields$gd__.flattenHierarchy = this.$l$g3__flattenHierarchy;
    return $lGetInheritedFields$gd__;
  };

  function $lGetInheritedFields$gd__29_System_Collections_Generic_IEnumerator$lSystem_Reflection_FieldInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedFields$gd__29_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_FieldInfo$g_GetEnumerator();
  };

  function $lGetInheritedFields$gd__29_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetInheritedFields$gd__29_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lGetInheritedFields$gd__29_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      case 3: 
        break;

      case 4: 
        break;

      default: 
        return;

    }
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 3: 
                break;

              case 4: 
                break;

              default: 
                break $labelgroup0;

            }
            try {
            } finally {
              this.$l$gm__Finally30();
            }
            break $labelgroup0;

        }
      }
    } finally {
      this.$l$gm__Finally2e();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<GetInheritedFields>d__29", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetInheritedFields$gd__29__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally2e", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedFields$gd__29_$l$gm__Finally2e
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally30", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedFields$gd__29_$l$gm__Finally30
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetInheritedFields$gd__29_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.FieldInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.FieldInfo")])), 
      $lGetInheritedFields$gd__29_System_Collections_Generic_IEnumerable$lSystem_Reflection_FieldInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.FieldInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.FieldInfo")), 
      $lGetInheritedFields$gd__29_System_Collections_Generic_IEnumerator$lSystem_Reflection_FieldInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetInheritedFields$gd__29_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetInheritedFields$gd__29_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedFields$gd__29_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetInheritedFields$gd__29_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g3__type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "$l$g3__name", $.String); 
    $.Field({Static:false, Public:true }, "flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$l$g3__flattenHierarchy", $.Boolean); 
    $.Field({Static:false, Public:true }, "$lancestor$g5__2a", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$ldeclaredField$g5__2b", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Field({Static:false, Public:true }, "$ldeclaredField$g5__2c", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap2d", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap2f", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.FieldInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.FieldInfo$g.Current", $asm01.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.FieldInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<Ancestors>d__3b */ 

(function $lAncestors$gd__3b$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.System.TypeExtensions)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function $lAncestors$gd__3b__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lAncestors$gd__3b_MoveNext () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 0: 
              this.$l$g1__state = -1;
              break;

            case 1: 
              this.$l$g1__state = -1;
              this.type = ($T03().GetTypeInfo(this.type)).get_BaseType();
              if (!$T02().op_Inequality(this.type, null)) {
                $label0 = 1 /* goto IL_6C */ ;
                continue $labelgroup0;
              }
              break;

            default: 
              $label0 = 1 /* goto IL_6C */ ;
              continue $labelgroup0;

          }
          this.$l$g2__current = this.type;
          this.$l$g1__state = 1;
          var result = true;
          return result;

          $label0 = 1 /* goto IL_6C */ ;
          continue $labelgroup0;
        case 1: /* IL_6C */ 
          result = false;
          return result;

          break $labelgroup0;
      }
    }
  };

  function $lAncestors$gd__3b_System_Collections_Generic_IEnumerable$lSystem_Type$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lAncestors$gd__3b = this;
    } else {
      $lAncestors$gd__3b = new $thisType(0);
    }
    $lAncestors$gd__3b.type = this.$l$g3__type;
    return $lAncestors$gd__3b;
  };

  function $lAncestors$gd__3b_System_Collections_Generic_IEnumerator$lSystem_Type$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lAncestors$gd__3b_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Type$g_GetEnumerator();
  };

  function $lAncestors$gd__3b_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lAncestors$gd__3b_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lAncestors$gd__3b_System_IDisposable_Dispose () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<Ancestors>d__3b", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lAncestors$gd__3b__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lAncestors$gd__3b_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Type$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])), 
      $lAncestors$gd__3b_System_Collections_Generic_IEnumerable$lSystem_Type$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Type$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      $lAncestors$gd__3b_System_Collections_Generic_IEnumerator$lSystem_Type$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lAncestors$gd__3b_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lAncestors$gd__3b_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lAncestors$gd__3b_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lAncestors$gd__3b_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g3__type", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Type$g.Current", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<GetAllTypesFromAssembly>d__3e */ 

(function $lGetAllTypesFromAssembly$gd__3e$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm01.System.Type))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm01.System.Reflection.Module))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Reflection.Module)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.ReflectionTypeLoadException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };

  function $lGetAllTypesFromAssembly$gd__3e__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetAllTypesFromAssembly$gd__3e_$l$gm__Finally42 () {
    this.$l$g1__state = -1;
  };

  function $lGetAllTypesFromAssembly$gd__3e_$l$gm__Finally45 () {
    this.$l$g1__state = 1;
  };

  function $lGetAllTypesFromAssembly$gd__3e_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var num = (this.$l$g1__state | 0);
            if (num === 0) {
              this.$l$g1__state = -1;
              this.$l$g1__state = 1;
              this.$l$g7__wrap43 = (this.asm).GetModules();
              this.$l$g7__wrap44 = 0;
              $label0 = 3 /* goto IL_122 */ ;
              continue $labelgroup0;
            }
            if (num !== 4) {
              $label0 = 4 /* goto IL_141 */ ;
              continue $labelgroup0;
            }
            this.$l$g1__state = 3;

            $label0 = 1 /* goto IL_E9 */ ;
            continue $labelgroup0;
          case 1: /* IL_E9 */ 
            this.$l$g7__wrap47 = (((this.$l$g7__wrap47 | 0) + 1) | 0);

            $label0 = 2 /* goto IL_F8 */ ;
            continue $labelgroup0;
          case 2: /* IL_F8 */ 
            if ((this.$l$g7__wrap47 | 0) >= (this.$l$g7__wrap46.length | 0)) {
              this.$l$gm__Finally45();
              this.$l$g7__wrap44 = (((this.$l$g7__wrap44 | 0) + 1) | 0);
            } else {
              this.$ltype$g5__41 = this.$l$g7__wrap46[this.$l$g7__wrap47];
              if ($T05().op_Inequality(this.$ltype$g5__41, null)) {
                this.$l$g2__current = this.$ltype$g5__41;
                this.$l$g1__state = 4;
                var result = true;
                return result;
              }
              $label0 = 1 /* goto IL_E9 */ ;
              continue $labelgroup0;
            }

            $label0 = 3 /* goto IL_122 */ ;
            continue $labelgroup0;
          case 3: /* IL_122 */ 
            if ((this.$l$g7__wrap44 | 0) < (this.$l$g7__wrap43.length | 0)) {
              this.$lmodule$g5__3f = this.$l$g7__wrap43[this.$l$g7__wrap44];
              try {
                this.$lmoduleTypes$g5__40 = (this.$lmodule$g5__3f).GetTypes();
              } catch ($exception) {
                if ($T09().$Is($exception)) {
                  this.$lmoduleTypes$g5__40 = ($exception).get_Types();
                } else {
                  throw $exception;
                }
              }
              this.$l$g1__state = 3;
              this.$l$g7__wrap46 = this.$lmoduleTypes$g5__40;
              this.$l$g7__wrap47 = 0;
              $label0 = 2 /* goto IL_F8 */ ;
              continue $labelgroup0;
            }
            this.$l$gm__Finally42();

            $label0 = 4 /* goto IL_141 */ ;
            continue $labelgroup0;
          case 4: /* IL_141 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetAllTypesFromAssembly$gd__3e_System_Collections_Generic_IEnumerable$lSystem_Type$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetAllTypesFromAssembly$gd__3e = this;
    } else {
      $lGetAllTypesFromAssembly$gd__3e = new $thisType(0);
    }
    $lGetAllTypesFromAssembly$gd__3e.asm = this.$l$g3__asm;
    return $lGetAllTypesFromAssembly$gd__3e;
  };

  function $lGetAllTypesFromAssembly$gd__3e_System_Collections_Generic_IEnumerator$lSystem_Type$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetAllTypesFromAssembly$gd__3e_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Type$g_GetEnumerator();
  };

  function $lGetAllTypesFromAssembly$gd__3e_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetAllTypesFromAssembly$gd__3e_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lGetAllTypesFromAssembly$gd__3e_System_IDisposable_Dispose () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          switch (this.$l$g1__state) {
            case 1: 
              $label0 = 1 /* goto IL_29 */ ;
              continue $labelgroup0;

            case 3: 
              $label0 = 1 /* goto IL_29 */ ;
              continue $labelgroup0;

            case 4: 
              $label0 = 1 /* goto IL_29 */ ;
              continue $labelgroup0;

          }
          return;

          $label0 = 1 /* goto IL_29 */ ;
          continue $labelgroup0;
        case 1: /* IL_29 */ 
          switch (this.$l$g1__state) {
            case 3: 
              break;

            case 4: 
              break;

            default: 
              break $labelgroup0;

          }
          this.$l$gm__Finally45();
          break $labelgroup0;

      }
    }
    /* Original label IL_4F */ 
    this.$l$gm__Finally42();
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<GetAllTypesFromAssembly>d__3e", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetAllTypesFromAssembly$gd__3e__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally42", 
      JSIL.MethodSignature.Void, 
      $lGetAllTypesFromAssembly$gd__3e_$l$gm__Finally42
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally45", 
      JSIL.MethodSignature.Void, 
      $lGetAllTypesFromAssembly$gd__3e_$l$gm__Finally45
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetAllTypesFromAssembly$gd__3e_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Type$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])), 
      $lGetAllTypesFromAssembly$gd__3e_System_Collections_Generic_IEnumerable$lSystem_Type$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Type$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      $lGetAllTypesFromAssembly$gd__3e_System_Collections_Generic_IEnumerator$lSystem_Type$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetAllTypesFromAssembly$gd__3e_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetAllTypesFromAssembly$gd__3e_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetAllTypesFromAssembly$gd__3e_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetAllTypesFromAssembly$gd__3e_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "asm", $asm01.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:false, Public:true }, "$l$g3__asm", $asm01.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:false, Public:true }, "$lmodule$g5__3f", $asm01.TypeRef("System.Reflection.Module")); 
    $.Field({Static:false, Public:true }, "$lmoduleTypes$g5__40", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$ltype$g5__41", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap43", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.Module")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap44", $.Int32); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap46", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap47", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Type$g.Current", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Type")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<GetVisibleExtensionMethodsSlow>d__4c */ 

(function $lGetVisibleExtensionMethodsSlow$gd__4c$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Runtime.CompilerServices.ExtensionAttribute)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Collections.IEnumerator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.MethodBase)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm00.System.TypeExtensions)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Type).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Reflection.MethodInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerator$b1.Of($asm01.System.Type).get_Current)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1.Of($asm01.System.Reflection.MethodInfo).GetEnumerator)) ();
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_$l$gm__Finally51 () {
    this.$l$g1__state = -1;
    if (this.$l$g7__wrap50 !== null) {
      $IM00().Call(this.$l$g7__wrap50, null);
    }
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_$l$gm__Finally53 () {
    this.$l$g1__state = 1;
    if (this.$l$g7__wrap52 !== null) {
      $IM00().Call(this.$l$g7__wrap52, null);
    }
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var num = (this.$l$g1__state | 0);
            if (num !== 0) {
              if (num !== 3) {
                break $labelgroup0;
              }
              this.$l$g1__state = 2;
            } else {
              this.$l$g1__state = -1;
              this.$lea$g5__4d = $T04().__Type__;
              if ($T05().IsDefined(this.assembly, this.$lea$g5__4d)) {
                this.$l$g7__wrap50 = $IM01().Call($T05().GetAllTypesFromAssembly(this.assembly), null);
                this.$l$g1__state = 1;
                $label0 = 4 /* goto IL_183 */ ;
                continue $labelgroup0;
              }
              $label0 = 5 /* goto IL_19D */ ;
              continue $labelgroup0;
            }

            $label0 = 1 /* goto IL_16A */ ;
            continue $labelgroup0;
          case 1: /* IL_16A */ 

            $label0 = 2 /* goto IL_16B */ ;
            continue $labelgroup0;
          case 2: /* IL_16B */ 
            if (!$IM02().Call(this.$l$g7__wrap52, null)) {
              this.$l$gm__Finally53();
            } else {
              this.$lmethod$g5__4f = $IM03().Call(this.$l$g7__wrap52, null);
              if (!(!(this.$lmethod$g5__4f).get_IsPublic() || 
                  !(this.$lmethod$g5__4f).get_IsStatic() || !(this.$lmethod$g5__4f).IsDefined(this.$lea$g5__4d, false))) {
                this.$l$g2__current = this.$lmethod$g5__4f;
                this.$l$g1__state = 3;
                var result = true;
                return result;
              }
              $label0 = 1 /* goto IL_16A */ ;
              continue $labelgroup0;
            }

            $label0 = 3 /* goto IL_182 */ ;
            continue $labelgroup0;
          case 3: /* IL_182 */ 

            $label0 = 4 /* goto IL_183 */ ;
            continue $labelgroup0;
          case 4: /* IL_183 */ 
            if (!$IM02().Call(this.$l$g7__wrap50, null)) {
              this.$l$gm__Finally51();
            } else {
              this.$ltype$g5__4e = $IM04().Call(this.$l$g7__wrap50, null);
              if (!((!(this.$ltype$g5__4e).get_IsPublic() && 
                    !(this.$ltype$g5__4e).get_IsNestedPublic()) || 
                  !(this.$ltype$g5__4e).get_IsAbstract() || 
                  !(this.$ltype$g5__4e).get_IsSealed() || !(this.$ltype$g5__4e).IsDefined(this.$lea$g5__4d, false))) {
                this.$l$g7__wrap52 = $IM05().Call($T05().GetDeclaredMethods($T0F().AsType(this.$ltype$g5__4e), null), null);
                this.$l$g1__state = 2;
                $label0 = 2 /* goto IL_16B */ ;
                continue $labelgroup0;
              }
              $label0 = 3 /* goto IL_182 */ ;
              continue $labelgroup0;
            }

            $label0 = 5 /* goto IL_19D */ ;
            continue $labelgroup0;
          case 5: /* IL_19D */ 
            break $labelgroup0;

        }
      }
      /* Original label IL_19E */ 
      result = false;
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_Generic_IEnumerable$lSystem_Reflection_MethodInfo$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lGetVisibleExtensionMethodsSlow$gd__4c = this;
    } else {
      $lGetVisibleExtensionMethodsSlow$gd__4c = new $thisType(0);
    }
    $lGetVisibleExtensionMethodsSlow$gd__4c.assembly = this.$l$g3__assembly;
    return $lGetVisibleExtensionMethodsSlow$gd__4c;
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_Generic_IEnumerator$lSystem_Reflection_MethodInfo$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Reflection_MethodInfo$g_GetEnumerator();
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lGetVisibleExtensionMethodsSlow$gd__4c_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      case 3: 
        break;

      default: 
        return;

    }
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 2: 
                break;

              case 3: 
                break;

              default: 
                break $labelgroup0;

            }
            try {
            } finally {
              this.$l$gm__Finally53();
            }
            break $labelgroup0;

        }
      }
    } finally {
      this.$l$gm__Finally51();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<GetVisibleExtensionMethodsSlow>d__4c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetVisibleExtensionMethodsSlow$gd__4c__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally51", 
      JSIL.MethodSignature.Void, 
      $lGetVisibleExtensionMethodsSlow$gd__4c_$l$gm__Finally51
    );

    $.Method({Static:false, Public:false}, "$l$gm__Finally53", 
      JSIL.MethodSignature.Void, 
      $lGetVisibleExtensionMethodsSlow$gd__4c_$l$gm__Finally53
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetVisibleExtensionMethodsSlow$gd__4c_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Reflection.MethodInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])), 
      $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_Generic_IEnumerable$lSystem_Reflection_MethodInfo$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.MethodInfo$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_Generic_IEnumerator$lSystem_Reflection_MethodInfo$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetVisibleExtensionMethodsSlow$gd__4c_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetVisibleExtensionMethodsSlow$gd__4c_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "assembly", $asm01.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:false, Public:true }, "$l$g3__assembly", $asm01.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:false, Public:true }, "$lea$g5__4d", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$ltype$g5__4e", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$lmethod$g5__4f", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap50", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap52", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Reflection.MethodInfo$g.Current", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<EnumerateExtensionMethods>d__58 */ 

(function $lEnumerateExtensionMethods$gd__58$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.String, $asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo)))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm01.System.String, $asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo)))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Collections.Generic.List$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo)))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Collections.Generic.KeyValuePair$b2.Of($asm01.System.String, $asm01.System.Collections.Generic.IEnumerable$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo)))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm00.Microsoft.Scripting.Utils.ExtensionMethodInfo))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotSupportedException"), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.System.IDisposable.Dispose)) ();
  };

  function $lEnumerateExtensionMethods$gd__58__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  };

  function $lEnumerateExtensionMethods$gd__58_$l$gm__Finally5b () {
    this.$l$g1__state = -1;
    $IM00().Call(this.$l$g7__wrap5a, null);
  };

  function $lEnumerateExtensionMethods$gd__58_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                if (this.dict !== null) {
                  this.$l$g7__wrap5a = $T04().prototype.GetEnumerator.call(this.dict);
                  this.$l$g1__state = 1;
                  $label0 = 1 /* goto IL_AC */ ;
                  continue $labelgroup0;
                }
                break;

              case 2: 
                this.$l$g1__state = 1;
                $label0 = 1 /* goto IL_AC */ ;
                continue $labelgroup0;

            }
            $label0 = 2 /* goto IL_C4 */ ;
            continue $labelgroup0;

          case 1: /* IL_AC */ 
            if ($T05().prototype.MoveNext.call(this.$l$g7__wrap5a)) {
              this.$lentry$g5__59 = $T05().prototype.get_Current.call(this.$l$g7__wrap5a).MemberwiseClone();
              var keyValuePair = this.$lentry$g5__59.MemberwiseClone();
              var arg_8F_0 = keyValuePair.get_Key();
              keyValuePair = this.$lentry$g5__59.MemberwiseClone();
              this.$l$g2__current = new ($T08())(arg_8F_0, new ($T09())(keyValuePair.get_Value()));
              this.$l$g1__state = 2;
              var result = true;
              return result;
            }
            this.$l$gm__Finally5b();

            $label0 = 2 /* goto IL_C4 */ ;
            continue $labelgroup0;
          case 2: /* IL_C4 */ 
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lEnumerateExtensionMethods$gd__58_System_Collections_Generic_IEnumerable$lSystem_Collections_Generic_KeyValuePair$lSystem_String$cmSystem_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Utils_ExtensionMethodInfo$g$g$g_GetEnumerator () {
    if (!((($T01().get_CurrentThread().get_ManagedThreadId() | 0) !== (this.$l$gl__initialThreadId | 0)) || ((this.$l$g1__state | 0) !== -2))) {
      this.$l$g1__state = 0;
      var $lEnumerateExtensionMethods$gd__ = this;
    } else {
      $lEnumerateExtensionMethods$gd__ = new $thisType(0);
    }
    $lEnumerateExtensionMethods$gd__.dict = this.$l$g3__dict;
    return $lEnumerateExtensionMethods$gd__;
  };

  function $lEnumerateExtensionMethods$gd__58_System_Collections_Generic_IEnumerator$lSystem_Collections_Generic_KeyValuePair$lSystem_String$cmSystem_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Utils_ExtensionMethodInfo$g$g$g_get_Current () {
    return this.$l$g2__current;
  };

  function $lEnumerateExtensionMethods$gd__58_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Collections_Generic_KeyValuePair$lSystem_String$cmSystem_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Utils_ExtensionMethodInfo$g$g$g_GetEnumerator();
  };

  function $lEnumerateExtensionMethods$gd__58_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  };

  function $lEnumerateExtensionMethods$gd__58_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  function $lEnumerateExtensionMethods$gd__58_System_IDisposable_Dispose () {
    switch (this.$l$g1__state) {
      case 1: 
        break;

      case 2: 
        break;

      default: 
        return;

    }
    try {
    } finally {
      this.$l$gm__Finally5b();
    }
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<EnumerateExtensionMethods>d__58", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lEnumerateExtensionMethods$gd__58__ctor
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally5b", 
      JSIL.MethodSignature.Void, 
      $lEnumerateExtensionMethods$gd__58_$l$gm__Finally5b
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lEnumerateExtensionMethods$gd__58_MoveNext
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Collections.Generic.IEnumerable$lMicrosoft.Scripting.Utils.ExtensionMethodInfo$g$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])])), 
      $lEnumerateExtensionMethods$gd__58_System_Collections_Generic_IEnumerable$lSystem_Collections_Generic_KeyValuePair$lSystem_String$cmSystem_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Utils_ExtensionMethodInfo$g$g$g_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Collections.Generic.IEnumerable$lMicrosoft.Scripting.Utils.ExtensionMethodInfo$g$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])), 
      $lEnumerateExtensionMethods$gd__58_System_Collections_Generic_IEnumerator$lSystem_Collections_Generic_KeyValuePair$lSystem_String$cmSystem_Collections_Generic_IEnumerable$lMicrosoft_Scripting_Utils_ExtensionMethodInfo$g$g$g_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.IEnumerator")), 
      $lEnumerateExtensionMethods$gd__58_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lEnumerateExtensionMethods$gd__58_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lEnumerateExtensionMethods$gd__58_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm01.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lEnumerateExtensionMethods$gd__58_System_IDisposable_Dispose
    )
      .Overrides($asm01.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])); 
    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32); 
    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "dict", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])); 
    $.Field({Static:false, Public:true }, "$l$g3__dict", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])); 
    $.Field({Static:false, Public:true }, "$lentry$g5__59", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])); 
    $.Field({Static:false, Public:true }, "$l$g7__wrap5a", $asm01.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.String, $asm01.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Collections.Generic.IEnumerable$lMicrosoft.Scripting.Utils.ExtensionMethodInfo$g$g$g.Current", $asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Scripting.Utils.ExtensionMethodInfo")])])]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass5f */ 

(function $l$gc__DisplayClass5f$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Collections.Generic.Dictionary$b2.Of($asm01.System.Type, $asm01.System.Type))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Boolean)) ();
  };

  function $l$gc__DisplayClass5f__ctor () {
  };

  function $l$gc__DisplayClass5f_$lBindGenericParameters$gb__5e (parameter, type) {
    var existing = new JSIL.BoxedVariable(null);
    if ((this.binding).TryGetValue(parameter, /* ref */ existing)) {
      var result = $T00().op_Equality(type, existing.get());
    } else {
      (this.binding).set_Item(parameter, type);
      result = true;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ReflectionUtils+<>c__DisplayClass5f", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__DisplayClass5f__ctor
    );

    $.Method({Static:false, Public:true }, "$lBindGenericParameters$gb__5e", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      $l$gc__DisplayClass5f_$lBindGenericParameters$gb__5e
    );

    $.Field({Static:false, Public:true }, "binding", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct Microsoft.Scripting.Utils.ExtensionMethodInfo */ 

(function ExtensionMethodInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ContractUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.System.TypeExtensions)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), [
        $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
        $asm01.TypeRef("System.Boolean")
      ]))) ();
  };

  function ExtensionMethodInfo__ctor (extendedType, method) {
    this._extendedType = extendedType;
    this._method = method;
  };

  function ExtensionMethodInfo_Object_Equals (obj) {
    return ($thisType.$Is(obj) && this.Equals($thisType.$Cast(obj)));
  };

  function ExtensionMethodInfo_Equals$00 (other) {
    return (this._method).Object_Equals(other._method);
  };

  function ExtensionMethodInfo_get_ExtendedType () {
    return this._extendedType;
  };

  function ExtensionMethodInfo_get_Method () {
    return this._method;
  };

  function ExtensionMethodInfo_GetHashCode () {
    return (this._method).GetHashCode();
  };

  function ExtensionMethodInfo_IsExtensionOf (type) {
    $T03().RequiresNotNull(type, "type");
    return ($T00().op_Equality(type, this._extendedType) || (($T04().GetTypeInfo(this._extendedType)).get_ContainsGenericParameters() && 
        ($S00().CallStatic($T05(), "BindGenericParameters", null, this._extendedType, type, true) !== null)));
  };

  function ExtensionMethodInfo_op_Equality (self, other) {
    return self.Equals(other);
  };

  function ExtensionMethodInfo_op_Inequality (self, other) {
    return !self.Equals(other);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ValueType"), 
      Name: "Microsoft.Scripting.Utils.ExtensionMethodInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MethodInfo")]), 
      ExtensionMethodInfo__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      ExtensionMethodInfo_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      ExtensionMethodInfo_Equals$00
    );

    $.Method({Static:false, Public:true }, "get_ExtendedType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Type")), 
      ExtensionMethodInfo_get_ExtendedType
    );

    $.Method({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Reflection.MethodInfo")), 
      ExtensionMethodInfo_get_Method
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      ExtensionMethodInfo_GetHashCode
    );

    $.Method({Static:false, Public:true }, "IsExtensionOf", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      ExtensionMethodInfo_IsExtensionOf
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      ExtensionMethodInfo_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type]), 
      ExtensionMethodInfo_op_Inequality
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_extendedType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:false, Public:true }, "ExtendedType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Method", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.ThreadLocal`1 */ 

(function ThreadLocal$b1$Members () {
  var $, $thisType;
  function ThreadLocal$b1__ctor () {
    this._stores = new ($asm00.Microsoft.Scripting.Utils.ThreadLocal$b1_StorageInfo.Of($thisType.T.get(this))) ();
  };

  function ThreadLocal$b1_GetStorageInfo () {
    return this._stores;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ThreadLocal`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ThreadLocal$b1__ctor
    );

    $.Method({Static:false, Public:true }, "GetStorageInfo", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Scripting.Utils.ThreadLocal`1+StorageInfo", [$.GenericParameter("T")]), null), 
      ThreadLocal$b1_GetStorageInfo
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_stores", $asm00.TypeRef("Microsoft.Scripting.Utils.ThreadLocal`1+StorageInfo", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.ThreadLocal`1+StorageInfo */ 

(function StorageInfo$Members () {
  var $, $thisType;
  function StorageInfo__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.Utils.ThreadLocal`1+StorageInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      StorageInfo__ctor
    );

    $.Field({Static:false, Public:true }, "Value", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Utils.TypeUtils */ 

(function TypeUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Scripting.Utils.ReflectionUtils)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Collections.Generic.IList$b1)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.Collections.Generic.ICollection$b1)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.System.Linq.Expressions.Expression)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Nullable$b1)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.Microsoft.Scripting.Generation.ConstantCheck)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.Reflection.ConstructorInfo)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.Reflection.EventInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.System.Reflection.FieldInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.System.Reflection.MethodInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.System.Reflection.PropertyInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.TypeCode)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.System.Reflection.MemberInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm00.Microsoft.Scripting.Runtime.DynamicNull)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Object")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.Type")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Boolean"), [$asm01.TypeRef("System.TypeCode")]))) ();
  };

  function TypeUtils_AreAssignable (dest, src) {
    return ($T00().op_Equality(dest, src) || 
      $S00().CallVirtual("IsAssignableFrom", null, dest, src) || 
      !(!dest.get_IsArray() || 
        !src.get_IsArray() || 
        ((dest.GetArrayRank() | 0) !== (src.GetArrayRank() | 0)) || 
        !$thisType.AreReferenceAssignable(
          dest.GetElementType(), 
          src.GetElementType()
        )) || !(!src.get_IsArray() || 
        !$T01().IsGenericType(dest) || 
        (!$T00().op_Equality(dest.GetGenericTypeDefinition(), $T02().__Type__) && 
          !$T00().op_Equality(dest.GetGenericTypeDefinition(), $T03().__Type__) && 
          !$T00().op_Equality(dest.GetGenericTypeDefinition(), $T04().__Type__)) || 
        !$T00().op_Equality(
          dest.GetGenericArguments()[0], 
          src.GetElementType()
        )));
  };

  function TypeUtils_AreEquivalent (t1, t2) {
    return $T00().op_Equality(t1, t2);
  };

  function TypeUtils_AreReferenceAssignable (dest, src) {
    return ($T00().op_Equality(dest, src) || !($T01().IsValueType(dest) || 
        $T01().IsValueType(src) || 
        !$thisType.AreAssignable(dest, src)));
  };

  function TypeUtils_CanAssign$00 (to, from) {
    return ($S01().CallStatic($thisType, "CanAssign", null, to, from.get_Type()) || !(!$T01().IsValueType(to) || 
        !$T01().IsGenericType(to) || 
        !$T00().op_Equality(to.GetGenericTypeDefinition(), $T06().__Type__) || 
        !$S02().CallStatic($T07(), "Check", null, from, null)));
  };

  function TypeUtils_CanAssign$01 (to, from) {
    if ($T00().op_Equality(to, from)) {
      var result = true;
    } else {
      if (!($T01().IsValueType(to) || $T01().IsValueType(from))) {
        if ($S00().CallVirtual("IsAssignableFrom", null, to, from)) {
          result = true;
          return result;
        }
        if (!(!to.get_IsArray() || 
            !from.get_IsArray() || 
            ((to.GetArrayRank() | 0) !== (from.GetArrayRank() | 0)) || !$S01().CallStatic($thisType, "CanAssign", null, 
              to.GetElementType(), 
              from.GetElementType()
            ))) {
          result = true;
          return result;
        }
      }
      result = false;
    }
    return result;
  };

  function TypeUtils_CanCompareToNull (type) {
    return !$T01().IsValueType(type);
  };

  function TypeUtils_GetConstantType (type) {
    if ($T01().IsVisible(type)) {
      var result = type;
    } else {
      var bt = type;

      do {
        bt = $T01().GetBaseType(bt);
      } while (!$T01().IsVisible(bt));
      if (!(!($T00().op_Equality(bt, $T00().__Type__) || 
            $T00().op_Equality(bt, $T09().__Type__) || 
            $T00().op_Equality(bt, $T0A().__Type__) || 
            $T00().op_Equality(bt, $T0B().__Type__) || 
            $T00().op_Equality(bt, $T0C().__Type__)) && !$T00().op_Equality(bt, $T0D().__Type__))) {
        result = bt;
      } else {
        result = type;
      }
    }
    return result;
  };

  function TypeUtils_GetNonNullableType (type) {
    if ($thisType.IsNullableType(type)) {
      var result = type.GetGenericArguments()[0];
    } else {
      result = type;
    }
    return result;
  };

  function TypeUtils_GetNumericConversionOrder (code, /* ref */ x, /* ref */ y) {
    switch (code.valueOf()) {
      case 5: 
        x.set(0);
        y.set(1);
        break;

      case 6: 
        x.set(0);
        y.set(0);
        break;

      case 7: 
        x.set(1);
        y.set(1);
        break;

      case 8: 
        x.set(1);
        y.set(0);
        break;

      case 9: 
        x.set(2);
        y.set(1);
        break;

      case 10: 
        x.set(2);
        y.set(0);
        break;

      case 11: 
        x.set(3);
        y.set(1);
        break;

      case 12: 
        x.set(3);
        y.set(0);
        break;

      case 13: 
        x.set(1);
        y.set(2);
        break;

      case 14: 
        x.set(2);
        y.set(2);
        break;

      default: 
        x.set(y.set(0));
        var result = false;
        return result;

    }
    result = true;
    return result;
  };

  function TypeUtils_HasBuiltinEquality (left, right) {
    if (!(!($T01().IsInterface(left) && 
          !$T01().IsValueType(right)) && (!$T01().IsInterface(right) || 
          $T01().IsValueType(left)))) {
      var result = true;
    } else {
      if (!($T01().IsValueType(left) || $T01().IsValueType(right))) {
        if (!(!$S01().CallStatic($thisType, "CanAssign", null, left, right) && !$S01().CallStatic($thisType, "CanAssign", null, right, left))) {
          result = true;
          return result;
        }
      }
      result = !(!$thisType.NullVsNullable(left, right) && 
        !$thisType.NullVsNullable(right, left)) || 
      (!$T00().op_Inequality(left, right) && 
        !(!($T00().op_Equality(left, $T08().__Type__) || 
            $S03().CallStatic($thisType, "IsNumeric", null, left)) && 
          !$T01().IsEnum(left)));
    }
    return result;
  };

  function TypeUtils_IsArithmetic (type) {
    type = $thisType.GetNonNullableType(type);
    if (!$T01().IsEnum(type)) {
      switch (($T01().GetTypeCode(type)).valueOf()) {
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
          var result = true;
          return result;

      }
    }
    result = false;
    return result;
  };

  function TypeUtils_IsBool (type) {
    return $T00().op_Equality($thisType.GetNonNullableType(type), $T08().__Type__);
  };

  function TypeUtils_IsComObject (obj) {
    return false;
  };

  function TypeUtils_IsComObjectType (type) {
    return false;
  };

  function TypeUtils_IsConvertible (type) {
    type = $thisType.GetNonNullableType(type);
    if ($T01().IsEnum(type)) {
      var result = true;
    } else {
      switch (($T01().GetTypeCode(type)).valueOf()) {
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
          result = true;
          break;

        default: 
          result = false;
          break;

      }
    }
    return result;
  };

  function TypeUtils_IsFloatingPoint (type) {
    type = $thisType.GetNonNullableType(type);
    switch (($T01().GetTypeCode(type)).valueOf()) {
      case 13: 
      case 14: 
        var result = true;
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function TypeUtils_IsGeneric (type) {
    return ($T01().ContainsGenericParameters(type) || $T01().IsGenericTypeDefinition(type));
  };

  function TypeUtils_IsImplicitlyConvertible (fromX, fromY, toX, toY) {
    return (((fromX | 0) <= (toX | 0)) && ((fromY | 0) <= (toY | 0)));
  };

  function TypeUtils_IsIntegerOrBool (type) {
    type = $thisType.GetNonNullableType(type);
    if (!$T01().IsEnum(type)) {
      switch (($T01().GetTypeCode(type)).valueOf()) {
        case 3: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
          var result = true;
          return result;

      }
    }
    result = false;
    return result;
  };

  function TypeUtils_IsNested (t) {
    return $T00().op_Inequality(t.get_DeclaringType(), null);
  };

  function TypeUtils_IsNullableType (type) {
    return ($T01().IsGenericType(type) && $T00().op_Equality(type.GetGenericTypeDefinition(), $T06().__Type__));
  };

  function TypeUtils_IsNumeric$02 (type) {
    type = $thisType.GetNonNullableType(type);
    return (!$T01().IsEnum(type) && $S04().CallStatic($thisType, "IsNumeric", null, $T01().GetTypeCode(type)));
  };

  function TypeUtils_IsNumeric$03 (typeCode) {
    switch (typeCode.valueOf()) {
      case 4: 
      case 5: 
      case 6: 
      case 7: 
      case 8: 
      case 9: 
      case 10: 
      case 11: 
      case 12: 
      case 13: 
      case 14: 
        var result = true;
        break;

      default: 
        result = false;
        break;

    }
    return result;
  };

  function TypeUtils_IsUnsignedInt (type) {
    type = $thisType.GetNonNullableType(type);
    if (!$T01().IsEnum(type)) {
      switch (($T01().GetTypeCode(type)).valueOf()) {
        case 8: 
        case 10: 
        case 12: 
          var result = true;
          return result;

      }
    }
    result = false;
    return result;
  };

  function TypeUtils_NullVsNullable (left, right) {
    return ($thisType.IsNullableType(left) && $T00().op_Equality(right, $T12().__Type__));
  };

  JSIL.MakeStaticClass("Microsoft.Scripting.Utils.TypeUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AreAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      TypeUtils_AreAssignable
    );

    $.Method({Static:true , Public:false}, "AreEquivalent", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      TypeUtils_AreEquivalent
    );

    $.Method({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      TypeUtils_AreReferenceAssignable
    );

    $.Method({Static:true , Public:false}, "CanAssign", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression")]), 
      TypeUtils_CanAssign$00
    );

    $.Method({Static:true , Public:false}, "CanAssign", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      TypeUtils_CanAssign$01
    );

    $.Method({Static:true , Public:false}, "CanCompareToNull", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_CanCompareToNull
    );

    $.Method({Static:true , Public:false}, "GetConstantType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]), 
      TypeUtils_GetConstantType
    );

    $.Method({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]), 
      TypeUtils_GetNonNullableType
    );

    $.Method({Static:true , Public:false}, "GetNumericConversionOrder", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.TypeCode"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      TypeUtils_GetNumericConversionOrder
    );

    $.Method({Static:true , Public:false}, "HasBuiltinEquality", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      TypeUtils_HasBuiltinEquality
    );

    $.Method({Static:true , Public:false}, "IsArithmetic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsArithmetic
    );

    $.Method({Static:true , Public:false}, "IsBool", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsBool
    );

    $.Method({Static:true , Public:true }, "IsComObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      TypeUtils_IsComObject
    );

    $.Method({Static:true , Public:true }, "IsComObjectType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsComObjectType
    );

    $.Method({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsConvertible
    );

    $.Method({Static:true , Public:false}, "IsFloatingPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsFloatingPoint
    );

    $.Method({Static:true , Public:false}, "IsGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsGeneric
    );

    $.Method({Static:true , Public:false}, "IsImplicitlyConvertible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ]), 
      TypeUtils_IsImplicitlyConvertible
    );

    $.Method({Static:true , Public:false}, "IsIntegerOrBool", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsIntegerOrBool
    );

    $.Method({Static:true , Public:true }, "IsNested", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsNested
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsNullableType
    );

    $.Method({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsNumeric$02
    );

    $.Method({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TypeCode")]), 
      TypeUtils_IsNumeric$03
    );

    $.Method({Static:true , Public:false}, "IsUnsignedInt", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")]), 
      TypeUtils_IsUnsignedInt
    );

    $.Method({Static:true , Public:false}, "NullVsNullable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")]), 
      TypeUtils_NullVsNullable
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class Microsoft.Scripting.ArgumentTypeException */ 

(function ArgumentTypeException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.Serialization.SerializationInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")]))) ();
  };

  function ArgumentTypeException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function ArgumentTypeException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function ArgumentTypeException__ctor$02 (message, innerException) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, innerException);
  };

  function ArgumentTypeException__ctor$03 (info, context) {
    $S01().Call($T00().prototype, "_ctor", null, this, info, context);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Scripting.ArgumentTypeException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ArgumentTypeException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ArgumentTypeException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      ArgumentTypeException__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")]), 
      ArgumentTypeException__ctor$03
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.InvalidImplementationException */ 

(function InvalidImplementationException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.Runtime.Serialization.SerializationInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.String"), $asm01.TypeRef("System.Exception")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")]))) ();
  };

  function InvalidImplementationException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function InvalidImplementationException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  };

  function InvalidImplementationException__ctor$02 (message, e) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, e);
  };

  function InvalidImplementationException__ctor$03 (info, context) {
    $S01().Call($T00().prototype, "_ctor", null, this, info, context);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Scripting.InvalidImplementationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      InvalidImplementationException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      InvalidImplementationException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")]), 
      InvalidImplementationException__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")]), 
      InvalidImplementationException__ctor$03
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.ExitProcessException */ 

(function ExitProcessException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Exception)) ();
  };

  function ExitProcessException__ctor (exitCode) {
    $T01().prototype._ctor.call(this);
    this.exitCode = (exitCode | 0);
  };

  function ExitProcessException_get_ExitCode () {
    return this.exitCode;
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Exception"), 
      Name: "Microsoft.Scripting.ExitProcessException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      ExitProcessException__ctor
    );

    $.Method({Static:false, Public:true }, "get_ExitCode", 
      JSIL.MethodSignature.Return($.Int32), 
      ExitProcessException_get_ExitCode
    );

    $.Field({Static:false, Public:false}, "exitCode", $.Int32); 
    $.Property({Static:false, Public:true }, "ExitCode", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.PlatformAdaptationLayer */ 

(function PlatformAdaptationLayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.IO.Path)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.System.NotImplementedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.System.StringComparer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.System.Char)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.System.Reflection.Assembly)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.System.IO.FileMode)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.System.IO.FileAccess)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.System.IO.FileShare)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.Microsoft.Scripting.ExitProcessException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$asm01.TypeRef("System.String")]))) ();
  };

  function PlatformAdaptationLayer__ctor () {
  };

  function PlatformAdaptationLayer_CombinePaths (path1, path2) {
    return $T01().Combine(path1, path2);
  };

  function PlatformAdaptationLayer_CreateDirectory (path) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_DeleteDirectory (path, recursive) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_DeleteFile (path, deleteReadOnly) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_DirectoryExists (path) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_FileExists (path) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_get_CurrentDirectory () {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_get_IsSingleRootFileSystem () {
    return true;
  };

  function PlatformAdaptationLayer_get_PathComparer () {
    return $T04().get_OrdinalIgnoreCase();
  };

  function PlatformAdaptationLayer_GetDirectories (path, searchPattern) {
    return this.GetFileSystemEntries(path, searchPattern, false, true);
  };

  function PlatformAdaptationLayer_GetDirectoryName (path) {
    return $T01().GetDirectoryName(path);
  };

  function PlatformAdaptationLayer_GetEnvironmentVariable (key) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_GetEnvironmentVariables () {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_GetExtension (path) {
    return $T01().GetExtension(path);
  };

  function PlatformAdaptationLayer_GetFileName (path) {
    return $T01().GetFileName(path);
  };

  function PlatformAdaptationLayer_GetFileNameWithoutExtension (path) {
    return $T01().GetFileNameWithoutExtension(path);
  };

  function PlatformAdaptationLayer_GetFiles (path, searchPattern) {
    return this.GetFileSystemEntries(path, searchPattern, true, false);
  };

  function PlatformAdaptationLayer_GetFileSystemEntries$00 (path, searchPattern) {
    return this.GetFileSystemEntries(path, searchPattern, true, true);
  };

  function PlatformAdaptationLayer_GetFileSystemEntries$01 (path, searchPattern, includeFiles, includeDirectories) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_GetFullPath (path) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_IsAbsolutePath (path) {
    if ($T00().IsNullOrEmpty(path)) {
      var result = false;
    } else if (this.get_IsSingleRootFileSystem()) {
      result = this.IsDirectorySeparator(path[0]);
    } else if (this.IsDirectorySeparator(path[0])) {
      result = ((path.length | 0) > 1) && 
      this.IsDirectorySeparator(path[1]);
    } else {
      result = !(((path.length | 0) <= 2) || 
        (((path[1]).charCodeAt(0) | 0) !== ((":").charCodeAt(0) | 0)) || 
        !this.IsDirectorySeparator(path[2]));
    }
    return result;
  };

  function PlatformAdaptationLayer_IsDirectorySeparator (c) {
    return (((c.charCodeAt(0) | 0) === (("\\").charCodeAt(0) | 0)) || ((c.charCodeAt(0) | 0) === (("/").charCodeAt(0) | 0)));
  };

  function PlatformAdaptationLayer_LoadAssembly (name) {
    return $S01().CallStatic($T07(), "Load", null, name);
  };

  function PlatformAdaptationLayer_LoadAssemblyFromPath (path) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_MoveFileSystemEntry (sourcePath, destinationPath) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_OpenFileStream (path, mode, access, share, bufferSize) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_OpenInputFileStream (path, mode, access, share, bufferSize) {
    return this.OpenFileStream(
      path, 
      mode, 
      access, 
      share, 
      bufferSize
    );
  };

  function PlatformAdaptationLayer_OpenOutputFileStream (path) {
    return this.OpenFileStream(
      path, 
      $T08().Create, 
      $T09().Write, 
      $T0A().Read, 
      8192
    );
  };

  function PlatformAdaptationLayer_set_CurrentDirectory (value) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_SetEnvironmentVariable (key, value) {
    throw $S00().Construct();
  };

  function PlatformAdaptationLayer_TerminateScriptExecution (exitCode) {
    throw new ($T0B())(exitCode);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Object"), 
      Name: "Microsoft.Scripting.PlatformAdaptationLayer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      PlatformAdaptationLayer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CombinePaths", 
      new JSIL.MethodSignature($.String, [$.String, $.String]), 
      PlatformAdaptationLayer_CombinePaths
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CreateDirectory", 
      JSIL.MethodSignature.Action($.String), 
      PlatformAdaptationLayer_CreateDirectory
    );

    $.Method({Static:false, Public:true , Virtual:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean]), 
      PlatformAdaptationLayer_DeleteDirectory
    );

    $.Method({Static:false, Public:true , Virtual:true }, "DeleteFile", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean]), 
      PlatformAdaptationLayer_DeleteFile
    );

    $.Method({Static:false, Public:true , Virtual:true }, "DirectoryExists", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      PlatformAdaptationLayer_DirectoryExists
    );

    $.Method({Static:false, Public:true , Virtual:true }, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      PlatformAdaptationLayer_FileExists
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CurrentDirectory", 
      JSIL.MethodSignature.Return($.String), 
      PlatformAdaptationLayer_get_CurrentDirectory
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_IsSingleRootFileSystem", 
      JSIL.MethodSignature.Return($.Boolean), 
      PlatformAdaptationLayer_get_IsSingleRootFileSystem
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_PathComparer", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.StringComparer")), 
      PlatformAdaptationLayer_get_PathComparer
    );

    $.Method({Static:false, Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String]), 
      PlatformAdaptationLayer_GetDirectories
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetDirectoryName", 
      new JSIL.MethodSignature($.String, [$.String]), 
      PlatformAdaptationLayer_GetDirectoryName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnvironmentVariable", 
      new JSIL.MethodSignature($.String, [$.String]), 
      PlatformAdaptationLayer_GetEnvironmentVariable
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetEnvironmentVariables", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      PlatformAdaptationLayer_GetEnvironmentVariables
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetExtension", 
      new JSIL.MethodSignature($.String, [$.String]), 
      PlatformAdaptationLayer_GetExtension
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetFileName", 
      new JSIL.MethodSignature($.String, [$.String]), 
      PlatformAdaptationLayer_GetFileName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetFileNameWithoutExtension", 
      new JSIL.MethodSignature($.String, [$.String]), 
      PlatformAdaptationLayer_GetFileNameWithoutExtension
    );

    $.Method({Static:false, Public:true }, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String]), 
      PlatformAdaptationLayer_GetFiles
    );

    $.Method({Static:false, Public:true }, "GetFileSystemEntries", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String]), 
      PlatformAdaptationLayer_GetFileSystemEntries$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetFileSystemEntries", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ]), 
      PlatformAdaptationLayer_GetFileSystemEntries$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetFullPath", 
      new JSIL.MethodSignature($.String, [$.String]), 
      PlatformAdaptationLayer_GetFullPath
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsAbsolutePath", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      PlatformAdaptationLayer_IsAbsolutePath
    );

    $.Method({Static:false, Public:false}, "IsDirectorySeparator", 
      new JSIL.MethodSignature($.Boolean, [$.Char]), 
      PlatformAdaptationLayer_IsDirectorySeparator
    );

    $.Method({Static:false, Public:true , Virtual:true }, "LoadAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.String]), 
      PlatformAdaptationLayer_LoadAssembly
    );

    $.Method({Static:false, Public:true , Virtual:true }, "LoadAssemblyFromPath", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.String]), 
      PlatformAdaptationLayer_LoadAssemblyFromPath
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveFileSystemEntry", 
      new JSIL.MethodSignature(null, [$.String, $.String]), 
      PlatformAdaptationLayer_MoveFileSystemEntry
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OpenFileStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $asm01.TypeRef("System.IO.FileMode"), 
          $asm01.TypeRef("System.IO.FileAccess"), $asm01.TypeRef("System.IO.FileShare"), 
          $.Int32
        ]), 
      PlatformAdaptationLayer_OpenFileStream
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OpenInputFileStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $asm01.TypeRef("System.IO.FileMode"), 
          $asm01.TypeRef("System.IO.FileAccess"), $asm01.TypeRef("System.IO.FileShare"), 
          $.Int32
        ]), 
      PlatformAdaptationLayer_OpenInputFileStream
    );

    $.Method({Static:false, Public:true , Virtual:true }, "OpenOutputFileStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String]), 
      PlatformAdaptationLayer_OpenOutputFileStream
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_CurrentDirectory", 
      JSIL.MethodSignature.Action($.String), 
      PlatformAdaptationLayer_set_CurrentDirectory
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetEnvironmentVariable", 
      new JSIL.MethodSignature(null, [$.String, $.String]), 
      PlatformAdaptationLayer_SetEnvironmentVariable
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TerminateScriptExecution", 
      JSIL.MethodSignature.Action($.Int32), 
      PlatformAdaptationLayer_TerminateScriptExecution
    );

    $.Constant({Static:true , Public:true }, "IsCompactFramework", false); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    function PlatformAdaptationLayer__cctor () {
      $thisType.Default = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      PlatformAdaptationLayer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsSingleRootFileSystem", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PathComparer", $asm01.TypeRef("System.StringComparer"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentDirectory", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Scripting.Runtime.NotNullAttribute */ 

(function NotNullAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function NotNullAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Scripting.Runtime.NotNullAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotNullAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Parameter]; });

})();

/* class Microsoft.Scripting.Runtime.NotNullItemsAttribute */ 

(function NotNullItemsAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function NotNullItemsAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Scripting.Runtime.NotNullItemsAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NotNullItemsAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Parameter]; });

})();

/* class Microsoft.Scripting.ParamDictionaryAttribute */ 

(function ParamDictionaryAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Attribute)) ();
  };

  function ParamDictionaryAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Attribute"), 
      Name: "Microsoft.Scripting.ParamDictionaryAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ParamDictionaryAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Parameter]; });

})();

/* class System.TypeExtensions */ 

(function TypeExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Type)) ();
  };

  function TypeExtensions_AsType (type) {
    return type;
  };

  function TypeExtensions_GetTypeInfo (type) {
    return type;
  };

  JSIL.MakeStaticClass("System.TypeExtensions", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "AsType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]), 
      TypeExtensions_AsType
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetTypeInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")]), 
      TypeExtensions_GetTypeInfo
    )
      .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

JSIL.ImplementExternals("System.Linq.Expressions.LambdaExpression", function ($) {
  $.Method({Static:false , Public:true}, "Compile", 
    JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Delegate")),
    function Compile () {
      return $jsilcore.Microsoft.Scripting.Generation.CompilerHelpers.LightCompile(this);
    }
  );
});

JSIL.ImplementExternals("System.Linq.Expressions.Expression`1", function ($) {
  $.Method({Static:false , Public:true}, "Compile", 
    new JSIL.MethodSignature($.GenericParameter("TDelegate"), null), 
    function Compile () {
      return $jsilcore.Microsoft.Scripting.Generation.CompilerHelpers.LightCompile(this);
    }
  );
});

})();
